// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: directdraw.proto

package org.webswing.directdraw.proto;

public final class Directdraw {
  private Directdraw() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code org.webswing.directdraw.proto.CyclicMethodProto}
   */
  public enum CyclicMethodProto
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NO_CYCLE = 0;</code>
     */
    NO_CYCLE(0, 0),
    /**
     * <code>REFLECT = 1;</code>
     */
    REFLECT(1, 1),
    /**
     * <code>REPEAT = 2;</code>
     */
    REPEAT(2, 2),
    ;

    /**
     * <code>NO_CYCLE = 0;</code>
     */
    public static final int NO_CYCLE_VALUE = 0;
    /**
     * <code>REFLECT = 1;</code>
     */
    public static final int REFLECT_VALUE = 1;
    /**
     * <code>REPEAT = 2;</code>
     */
    public static final int REPEAT_VALUE = 2;


    public final int getNumber() { return value; }

    public static CyclicMethodProto valueOf(int value) {
      switch (value) {
        case 0: return NO_CYCLE;
        case 1: return REFLECT;
        case 2: return REPEAT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CyclicMethodProto>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<CyclicMethodProto>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CyclicMethodProto>() {
            public CyclicMethodProto findValueByNumber(int number) {
              return CyclicMethodProto.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return org.webswing.directdraw.proto.Directdraw.getDescriptor().getEnumTypes().get(0);
    }

    private static final CyclicMethodProto[] VALUES = values();

    public static CyclicMethodProto valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private CyclicMethodProto(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:org.webswing.directdraw.proto.CyclicMethodProto)
  }

  public interface WebImageProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint32 width = 1;
    /**
     * <code>required uint32 width = 1;</code>
     */
    boolean hasWidth();
    /**
     * <code>required uint32 width = 1;</code>
     */
    int getWidth();

    // required uint32 height = 2;
    /**
     * <code>required uint32 height = 2;</code>
     */
    boolean hasHeight();
    /**
     * <code>required uint32 height = 2;</code>
     */
    int getHeight();

    // repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;
    /**
     * <code>repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;</code>
     */
    java.util.List<org.webswing.directdraw.proto.Directdraw.DrawInstructionProto> 
        getInstructionsList();
    /**
     * <code>repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;</code>
     */
    org.webswing.directdraw.proto.Directdraw.DrawInstructionProto getInstructions(int index);
    /**
     * <code>repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;</code>
     */
    int getInstructionsCount();
    /**
     * <code>repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;</code>
     */
    java.util.List<? extends org.webswing.directdraw.proto.Directdraw.DrawInstructionProtoOrBuilder> 
        getInstructionsOrBuilderList();
    /**
     * <code>repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;</code>
     */
    org.webswing.directdraw.proto.Directdraw.DrawInstructionProtoOrBuilder getInstructionsOrBuilder(
        int index);

    // repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;
    /**
     * <code>repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;</code>
     */
    java.util.List<org.webswing.directdraw.proto.Directdraw.DrawConstantProto> 
        getConstantsList();
    /**
     * <code>repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;</code>
     */
    org.webswing.directdraw.proto.Directdraw.DrawConstantProto getConstants(int index);
    /**
     * <code>repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;</code>
     */
    int getConstantsCount();
    /**
     * <code>repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;</code>
     */
    java.util.List<? extends org.webswing.directdraw.proto.Directdraw.DrawConstantProtoOrBuilder> 
        getConstantsOrBuilderList();
    /**
     * <code>repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;</code>
     */
    org.webswing.directdraw.proto.Directdraw.DrawConstantProtoOrBuilder getConstantsOrBuilder(
        int index);

    // repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;
    /**
     * <code>repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;</code>
     */
    java.util.List<org.webswing.directdraw.proto.Directdraw.FontFaceProto> 
        getFontFacesList();
    /**
     * <code>repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;</code>
     */
    org.webswing.directdraw.proto.Directdraw.FontFaceProto getFontFaces(int index);
    /**
     * <code>repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;</code>
     */
    int getFontFacesCount();
    /**
     * <code>repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;</code>
     */
    java.util.List<? extends org.webswing.directdraw.proto.Directdraw.FontFaceProtoOrBuilder> 
        getFontFacesOrBuilderList();
    /**
     * <code>repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;</code>
     */
    org.webswing.directdraw.proto.Directdraw.FontFaceProtoOrBuilder getFontFacesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code org.webswing.directdraw.proto.WebImageProto}
   */
  public static final class WebImageProto extends
      com.google.protobuf.GeneratedMessage
      implements WebImageProtoOrBuilder {
    // Use WebImageProto.newBuilder() to construct.
    private WebImageProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private WebImageProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final WebImageProto defaultInstance;
    public static WebImageProto getDefaultInstance() {
      return defaultInstance;
    }

    public WebImageProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private WebImageProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              width_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              height_ = input.readUInt32();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                instructions_ = new java.util.ArrayList<org.webswing.directdraw.proto.Directdraw.DrawInstructionProto>();
                mutable_bitField0_ |= 0x00000004;
              }
              instructions_.add(input.readMessage(org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.PARSER, extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                constants_ = new java.util.ArrayList<org.webswing.directdraw.proto.Directdraw.DrawConstantProto>();
                mutable_bitField0_ |= 0x00000008;
              }
              constants_.add(input.readMessage(org.webswing.directdraw.proto.Directdraw.DrawConstantProto.PARSER, extensionRegistry));
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                fontFaces_ = new java.util.ArrayList<org.webswing.directdraw.proto.Directdraw.FontFaceProto>();
                mutable_bitField0_ |= 0x00000010;
              }
              fontFaces_.add(input.readMessage(org.webswing.directdraw.proto.Directdraw.FontFaceProto.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          instructions_ = java.util.Collections.unmodifiableList(instructions_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          constants_ = java.util.Collections.unmodifiableList(constants_);
        }
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          fontFaces_ = java.util.Collections.unmodifiableList(fontFaces_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_WebImageProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_WebImageProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.webswing.directdraw.proto.Directdraw.WebImageProto.class, org.webswing.directdraw.proto.Directdraw.WebImageProto.Builder.class);
    }

    public static com.google.protobuf.Parser<WebImageProto> PARSER =
        new com.google.protobuf.AbstractParser<WebImageProto>() {
      public WebImageProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new WebImageProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<WebImageProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 width = 1;
    public static final int WIDTH_FIELD_NUMBER = 1;
    private int width_;
    /**
     * <code>required uint32 width = 1;</code>
     */
    public boolean hasWidth() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 width = 1;</code>
     */
    public int getWidth() {
      return width_;
    }

    // required uint32 height = 2;
    public static final int HEIGHT_FIELD_NUMBER = 2;
    private int height_;
    /**
     * <code>required uint32 height = 2;</code>
     */
    public boolean hasHeight() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 height = 2;</code>
     */
    public int getHeight() {
      return height_;
    }

    // repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;
    public static final int INSTRUCTIONS_FIELD_NUMBER = 3;
    private java.util.List<org.webswing.directdraw.proto.Directdraw.DrawInstructionProto> instructions_;
    /**
     * <code>repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;</code>
     */
    public java.util.List<org.webswing.directdraw.proto.Directdraw.DrawInstructionProto> getInstructionsList() {
      return instructions_;
    }
    /**
     * <code>repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;</code>
     */
    public java.util.List<? extends org.webswing.directdraw.proto.Directdraw.DrawInstructionProtoOrBuilder> 
        getInstructionsOrBuilderList() {
      return instructions_;
    }
    /**
     * <code>repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;</code>
     */
    public int getInstructionsCount() {
      return instructions_.size();
    }
    /**
     * <code>repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.DrawInstructionProto getInstructions(int index) {
      return instructions_.get(index);
    }
    /**
     * <code>repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.DrawInstructionProtoOrBuilder getInstructionsOrBuilder(
        int index) {
      return instructions_.get(index);
    }

    // repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;
    public static final int CONSTANTS_FIELD_NUMBER = 4;
    private java.util.List<org.webswing.directdraw.proto.Directdraw.DrawConstantProto> constants_;
    /**
     * <code>repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;</code>
     */
    public java.util.List<org.webswing.directdraw.proto.Directdraw.DrawConstantProto> getConstantsList() {
      return constants_;
    }
    /**
     * <code>repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;</code>
     */
    public java.util.List<? extends org.webswing.directdraw.proto.Directdraw.DrawConstantProtoOrBuilder> 
        getConstantsOrBuilderList() {
      return constants_;
    }
    /**
     * <code>repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;</code>
     */
    public int getConstantsCount() {
      return constants_.size();
    }
    /**
     * <code>repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.DrawConstantProto getConstants(int index) {
      return constants_.get(index);
    }
    /**
     * <code>repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.DrawConstantProtoOrBuilder getConstantsOrBuilder(
        int index) {
      return constants_.get(index);
    }

    // repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;
    public static final int FONTFACES_FIELD_NUMBER = 5;
    private java.util.List<org.webswing.directdraw.proto.Directdraw.FontFaceProto> fontFaces_;
    /**
     * <code>repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;</code>
     */
    public java.util.List<org.webswing.directdraw.proto.Directdraw.FontFaceProto> getFontFacesList() {
      return fontFaces_;
    }
    /**
     * <code>repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;</code>
     */
    public java.util.List<? extends org.webswing.directdraw.proto.Directdraw.FontFaceProtoOrBuilder> 
        getFontFacesOrBuilderList() {
      return fontFaces_;
    }
    /**
     * <code>repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;</code>
     */
    public int getFontFacesCount() {
      return fontFaces_.size();
    }
    /**
     * <code>repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.FontFaceProto getFontFaces(int index) {
      return fontFaces_.get(index);
    }
    /**
     * <code>repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.FontFaceProtoOrBuilder getFontFacesOrBuilder(
        int index) {
      return fontFaces_.get(index);
    }

    private void initFields() {
      width_ = 0;
      height_ = 0;
      instructions_ = java.util.Collections.emptyList();
      constants_ = java.util.Collections.emptyList();
      fontFaces_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasWidth()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHeight()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getInstructionsCount(); i++) {
        if (!getInstructions(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getConstantsCount(); i++) {
        if (!getConstants(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getFontFacesCount(); i++) {
        if (!getFontFaces(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, width_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, height_);
      }
      for (int i = 0; i < instructions_.size(); i++) {
        output.writeMessage(3, instructions_.get(i));
      }
      for (int i = 0; i < constants_.size(); i++) {
        output.writeMessage(4, constants_.get(i));
      }
      for (int i = 0; i < fontFaces_.size(); i++) {
        output.writeMessage(5, fontFaces_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, width_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, height_);
      }
      for (int i = 0; i < instructions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, instructions_.get(i));
      }
      for (int i = 0; i < constants_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, constants_.get(i));
      }
      for (int i = 0; i < fontFaces_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, fontFaces_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.webswing.directdraw.proto.Directdraw.WebImageProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.WebImageProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.WebImageProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.WebImageProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.WebImageProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.WebImageProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.WebImageProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.WebImageProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.WebImageProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.WebImageProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.webswing.directdraw.proto.Directdraw.WebImageProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.webswing.directdraw.proto.WebImageProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.webswing.directdraw.proto.Directdraw.WebImageProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_WebImageProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_WebImageProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.webswing.directdraw.proto.Directdraw.WebImageProto.class, org.webswing.directdraw.proto.Directdraw.WebImageProto.Builder.class);
      }

      // Construct using org.webswing.directdraw.proto.Directdraw.WebImageProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getInstructionsFieldBuilder();
          getConstantsFieldBuilder();
          getFontFacesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        width_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        height_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (instructionsBuilder_ == null) {
          instructions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          instructionsBuilder_.clear();
        }
        if (constantsBuilder_ == null) {
          constants_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          constantsBuilder_.clear();
        }
        if (fontFacesBuilder_ == null) {
          fontFaces_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          fontFacesBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_WebImageProto_descriptor;
      }

      public org.webswing.directdraw.proto.Directdraw.WebImageProto getDefaultInstanceForType() {
        return org.webswing.directdraw.proto.Directdraw.WebImageProto.getDefaultInstance();
      }

      public org.webswing.directdraw.proto.Directdraw.WebImageProto build() {
        org.webswing.directdraw.proto.Directdraw.WebImageProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.webswing.directdraw.proto.Directdraw.WebImageProto buildPartial() {
        org.webswing.directdraw.proto.Directdraw.WebImageProto result = new org.webswing.directdraw.proto.Directdraw.WebImageProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.width_ = width_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.height_ = height_;
        if (instructionsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            instructions_ = java.util.Collections.unmodifiableList(instructions_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.instructions_ = instructions_;
        } else {
          result.instructions_ = instructionsBuilder_.build();
        }
        if (constantsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            constants_ = java.util.Collections.unmodifiableList(constants_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.constants_ = constants_;
        } else {
          result.constants_ = constantsBuilder_.build();
        }
        if (fontFacesBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            fontFaces_ = java.util.Collections.unmodifiableList(fontFaces_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.fontFaces_ = fontFaces_;
        } else {
          result.fontFaces_ = fontFacesBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.webswing.directdraw.proto.Directdraw.WebImageProto) {
          return mergeFrom((org.webswing.directdraw.proto.Directdraw.WebImageProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.webswing.directdraw.proto.Directdraw.WebImageProto other) {
        if (other == org.webswing.directdraw.proto.Directdraw.WebImageProto.getDefaultInstance()) return this;
        if (other.hasWidth()) {
          setWidth(other.getWidth());
        }
        if (other.hasHeight()) {
          setHeight(other.getHeight());
        }
        if (instructionsBuilder_ == null) {
          if (!other.instructions_.isEmpty()) {
            if (instructions_.isEmpty()) {
              instructions_ = other.instructions_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureInstructionsIsMutable();
              instructions_.addAll(other.instructions_);
            }
            onChanged();
          }
        } else {
          if (!other.instructions_.isEmpty()) {
            if (instructionsBuilder_.isEmpty()) {
              instructionsBuilder_.dispose();
              instructionsBuilder_ = null;
              instructions_ = other.instructions_;
              bitField0_ = (bitField0_ & ~0x00000004);
              instructionsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getInstructionsFieldBuilder() : null;
            } else {
              instructionsBuilder_.addAllMessages(other.instructions_);
            }
          }
        }
        if (constantsBuilder_ == null) {
          if (!other.constants_.isEmpty()) {
            if (constants_.isEmpty()) {
              constants_ = other.constants_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureConstantsIsMutable();
              constants_.addAll(other.constants_);
            }
            onChanged();
          }
        } else {
          if (!other.constants_.isEmpty()) {
            if (constantsBuilder_.isEmpty()) {
              constantsBuilder_.dispose();
              constantsBuilder_ = null;
              constants_ = other.constants_;
              bitField0_ = (bitField0_ & ~0x00000008);
              constantsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getConstantsFieldBuilder() : null;
            } else {
              constantsBuilder_.addAllMessages(other.constants_);
            }
          }
        }
        if (fontFacesBuilder_ == null) {
          if (!other.fontFaces_.isEmpty()) {
            if (fontFaces_.isEmpty()) {
              fontFaces_ = other.fontFaces_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureFontFacesIsMutable();
              fontFaces_.addAll(other.fontFaces_);
            }
            onChanged();
          }
        } else {
          if (!other.fontFaces_.isEmpty()) {
            if (fontFacesBuilder_.isEmpty()) {
              fontFacesBuilder_.dispose();
              fontFacesBuilder_ = null;
              fontFaces_ = other.fontFaces_;
              bitField0_ = (bitField0_ & ~0x00000010);
              fontFacesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getFontFacesFieldBuilder() : null;
            } else {
              fontFacesBuilder_.addAllMessages(other.fontFaces_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasWidth()) {
          
          return false;
        }
        if (!hasHeight()) {
          
          return false;
        }
        for (int i = 0; i < getInstructionsCount(); i++) {
          if (!getInstructions(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getConstantsCount(); i++) {
          if (!getConstants(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getFontFacesCount(); i++) {
          if (!getFontFaces(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.webswing.directdraw.proto.Directdraw.WebImageProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.webswing.directdraw.proto.Directdraw.WebImageProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 width = 1;
      private int width_ ;
      /**
       * <code>required uint32 width = 1;</code>
       */
      public boolean hasWidth() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 width = 1;</code>
       */
      public int getWidth() {
        return width_;
      }
      /**
       * <code>required uint32 width = 1;</code>
       */
      public Builder setWidth(int value) {
        bitField0_ |= 0x00000001;
        width_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 width = 1;</code>
       */
      public Builder clearWidth() {
        bitField0_ = (bitField0_ & ~0x00000001);
        width_ = 0;
        onChanged();
        return this;
      }

      // required uint32 height = 2;
      private int height_ ;
      /**
       * <code>required uint32 height = 2;</code>
       */
      public boolean hasHeight() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 height = 2;</code>
       */
      public int getHeight() {
        return height_;
      }
      /**
       * <code>required uint32 height = 2;</code>
       */
      public Builder setHeight(int value) {
        bitField0_ |= 0x00000002;
        height_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 height = 2;</code>
       */
      public Builder clearHeight() {
        bitField0_ = (bitField0_ & ~0x00000002);
        height_ = 0;
        onChanged();
        return this;
      }

      // repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;
      private java.util.List<org.webswing.directdraw.proto.Directdraw.DrawInstructionProto> instructions_ =
        java.util.Collections.emptyList();
      private void ensureInstructionsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          instructions_ = new java.util.ArrayList<org.webswing.directdraw.proto.Directdraw.DrawInstructionProto>(instructions_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.DrawInstructionProto, org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.Builder, org.webswing.directdraw.proto.Directdraw.DrawInstructionProtoOrBuilder> instructionsBuilder_;

      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;</code>
       */
      public java.util.List<org.webswing.directdraw.proto.Directdraw.DrawInstructionProto> getInstructionsList() {
        if (instructionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(instructions_);
        } else {
          return instructionsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;</code>
       */
      public int getInstructionsCount() {
        if (instructionsBuilder_ == null) {
          return instructions_.size();
        } else {
          return instructionsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.DrawInstructionProto getInstructions(int index) {
        if (instructionsBuilder_ == null) {
          return instructions_.get(index);
        } else {
          return instructionsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;</code>
       */
      public Builder setInstructions(
          int index, org.webswing.directdraw.proto.Directdraw.DrawInstructionProto value) {
        if (instructionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInstructionsIsMutable();
          instructions_.set(index, value);
          onChanged();
        } else {
          instructionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;</code>
       */
      public Builder setInstructions(
          int index, org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.Builder builderForValue) {
        if (instructionsBuilder_ == null) {
          ensureInstructionsIsMutable();
          instructions_.set(index, builderForValue.build());
          onChanged();
        } else {
          instructionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;</code>
       */
      public Builder addInstructions(org.webswing.directdraw.proto.Directdraw.DrawInstructionProto value) {
        if (instructionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInstructionsIsMutable();
          instructions_.add(value);
          onChanged();
        } else {
          instructionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;</code>
       */
      public Builder addInstructions(
          int index, org.webswing.directdraw.proto.Directdraw.DrawInstructionProto value) {
        if (instructionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInstructionsIsMutable();
          instructions_.add(index, value);
          onChanged();
        } else {
          instructionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;</code>
       */
      public Builder addInstructions(
          org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.Builder builderForValue) {
        if (instructionsBuilder_ == null) {
          ensureInstructionsIsMutable();
          instructions_.add(builderForValue.build());
          onChanged();
        } else {
          instructionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;</code>
       */
      public Builder addInstructions(
          int index, org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.Builder builderForValue) {
        if (instructionsBuilder_ == null) {
          ensureInstructionsIsMutable();
          instructions_.add(index, builderForValue.build());
          onChanged();
        } else {
          instructionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;</code>
       */
      public Builder addAllInstructions(
          java.lang.Iterable<? extends org.webswing.directdraw.proto.Directdraw.DrawInstructionProto> values) {
        if (instructionsBuilder_ == null) {
          ensureInstructionsIsMutable();
          super.addAll(values, instructions_);
          onChanged();
        } else {
          instructionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;</code>
       */
      public Builder clearInstructions() {
        if (instructionsBuilder_ == null) {
          instructions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          instructionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;</code>
       */
      public Builder removeInstructions(int index) {
        if (instructionsBuilder_ == null) {
          ensureInstructionsIsMutable();
          instructions_.remove(index);
          onChanged();
        } else {
          instructionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.Builder getInstructionsBuilder(
          int index) {
        return getInstructionsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.DrawInstructionProtoOrBuilder getInstructionsOrBuilder(
          int index) {
        if (instructionsBuilder_ == null) {
          return instructions_.get(index);  } else {
          return instructionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;</code>
       */
      public java.util.List<? extends org.webswing.directdraw.proto.Directdraw.DrawInstructionProtoOrBuilder> 
           getInstructionsOrBuilderList() {
        if (instructionsBuilder_ != null) {
          return instructionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(instructions_);
        }
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.Builder addInstructionsBuilder() {
        return getInstructionsFieldBuilder().addBuilder(
            org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.getDefaultInstance());
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.Builder addInstructionsBuilder(
          int index) {
        return getInstructionsFieldBuilder().addBuilder(
            index, org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.getDefaultInstance());
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawInstructionProto instructions = 3;</code>
       */
      public java.util.List<org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.Builder> 
           getInstructionsBuilderList() {
        return getInstructionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.DrawInstructionProto, org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.Builder, org.webswing.directdraw.proto.Directdraw.DrawInstructionProtoOrBuilder> 
          getInstructionsFieldBuilder() {
        if (instructionsBuilder_ == null) {
          instructionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              org.webswing.directdraw.proto.Directdraw.DrawInstructionProto, org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.Builder, org.webswing.directdraw.proto.Directdraw.DrawInstructionProtoOrBuilder>(
                  instructions_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          instructions_ = null;
        }
        return instructionsBuilder_;
      }

      // repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;
      private java.util.List<org.webswing.directdraw.proto.Directdraw.DrawConstantProto> constants_ =
        java.util.Collections.emptyList();
      private void ensureConstantsIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          constants_ = new java.util.ArrayList<org.webswing.directdraw.proto.Directdraw.DrawConstantProto>(constants_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.DrawConstantProto, org.webswing.directdraw.proto.Directdraw.DrawConstantProto.Builder, org.webswing.directdraw.proto.Directdraw.DrawConstantProtoOrBuilder> constantsBuilder_;

      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;</code>
       */
      public java.util.List<org.webswing.directdraw.proto.Directdraw.DrawConstantProto> getConstantsList() {
        if (constantsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(constants_);
        } else {
          return constantsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;</code>
       */
      public int getConstantsCount() {
        if (constantsBuilder_ == null) {
          return constants_.size();
        } else {
          return constantsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.DrawConstantProto getConstants(int index) {
        if (constantsBuilder_ == null) {
          return constants_.get(index);
        } else {
          return constantsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;</code>
       */
      public Builder setConstants(
          int index, org.webswing.directdraw.proto.Directdraw.DrawConstantProto value) {
        if (constantsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConstantsIsMutable();
          constants_.set(index, value);
          onChanged();
        } else {
          constantsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;</code>
       */
      public Builder setConstants(
          int index, org.webswing.directdraw.proto.Directdraw.DrawConstantProto.Builder builderForValue) {
        if (constantsBuilder_ == null) {
          ensureConstantsIsMutable();
          constants_.set(index, builderForValue.build());
          onChanged();
        } else {
          constantsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;</code>
       */
      public Builder addConstants(org.webswing.directdraw.proto.Directdraw.DrawConstantProto value) {
        if (constantsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConstantsIsMutable();
          constants_.add(value);
          onChanged();
        } else {
          constantsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;</code>
       */
      public Builder addConstants(
          int index, org.webswing.directdraw.proto.Directdraw.DrawConstantProto value) {
        if (constantsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureConstantsIsMutable();
          constants_.add(index, value);
          onChanged();
        } else {
          constantsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;</code>
       */
      public Builder addConstants(
          org.webswing.directdraw.proto.Directdraw.DrawConstantProto.Builder builderForValue) {
        if (constantsBuilder_ == null) {
          ensureConstantsIsMutable();
          constants_.add(builderForValue.build());
          onChanged();
        } else {
          constantsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;</code>
       */
      public Builder addConstants(
          int index, org.webswing.directdraw.proto.Directdraw.DrawConstantProto.Builder builderForValue) {
        if (constantsBuilder_ == null) {
          ensureConstantsIsMutable();
          constants_.add(index, builderForValue.build());
          onChanged();
        } else {
          constantsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;</code>
       */
      public Builder addAllConstants(
          java.lang.Iterable<? extends org.webswing.directdraw.proto.Directdraw.DrawConstantProto> values) {
        if (constantsBuilder_ == null) {
          ensureConstantsIsMutable();
          super.addAll(values, constants_);
          onChanged();
        } else {
          constantsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;</code>
       */
      public Builder clearConstants() {
        if (constantsBuilder_ == null) {
          constants_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          constantsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;</code>
       */
      public Builder removeConstants(int index) {
        if (constantsBuilder_ == null) {
          ensureConstantsIsMutable();
          constants_.remove(index);
          onChanged();
        } else {
          constantsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.DrawConstantProto.Builder getConstantsBuilder(
          int index) {
        return getConstantsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.DrawConstantProtoOrBuilder getConstantsOrBuilder(
          int index) {
        if (constantsBuilder_ == null) {
          return constants_.get(index);  } else {
          return constantsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;</code>
       */
      public java.util.List<? extends org.webswing.directdraw.proto.Directdraw.DrawConstantProtoOrBuilder> 
           getConstantsOrBuilderList() {
        if (constantsBuilder_ != null) {
          return constantsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(constants_);
        }
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.DrawConstantProto.Builder addConstantsBuilder() {
        return getConstantsFieldBuilder().addBuilder(
            org.webswing.directdraw.proto.Directdraw.DrawConstantProto.getDefaultInstance());
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.DrawConstantProto.Builder addConstantsBuilder(
          int index) {
        return getConstantsFieldBuilder().addBuilder(
            index, org.webswing.directdraw.proto.Directdraw.DrawConstantProto.getDefaultInstance());
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.DrawConstantProto constants = 4;</code>
       */
      public java.util.List<org.webswing.directdraw.proto.Directdraw.DrawConstantProto.Builder> 
           getConstantsBuilderList() {
        return getConstantsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.DrawConstantProto, org.webswing.directdraw.proto.Directdraw.DrawConstantProto.Builder, org.webswing.directdraw.proto.Directdraw.DrawConstantProtoOrBuilder> 
          getConstantsFieldBuilder() {
        if (constantsBuilder_ == null) {
          constantsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              org.webswing.directdraw.proto.Directdraw.DrawConstantProto, org.webswing.directdraw.proto.Directdraw.DrawConstantProto.Builder, org.webswing.directdraw.proto.Directdraw.DrawConstantProtoOrBuilder>(
                  constants_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          constants_ = null;
        }
        return constantsBuilder_;
      }

      // repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;
      private java.util.List<org.webswing.directdraw.proto.Directdraw.FontFaceProto> fontFaces_ =
        java.util.Collections.emptyList();
      private void ensureFontFacesIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          fontFaces_ = new java.util.ArrayList<org.webswing.directdraw.proto.Directdraw.FontFaceProto>(fontFaces_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.FontFaceProto, org.webswing.directdraw.proto.Directdraw.FontFaceProto.Builder, org.webswing.directdraw.proto.Directdraw.FontFaceProtoOrBuilder> fontFacesBuilder_;

      /**
       * <code>repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;</code>
       */
      public java.util.List<org.webswing.directdraw.proto.Directdraw.FontFaceProto> getFontFacesList() {
        if (fontFacesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(fontFaces_);
        } else {
          return fontFacesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;</code>
       */
      public int getFontFacesCount() {
        if (fontFacesBuilder_ == null) {
          return fontFaces_.size();
        } else {
          return fontFacesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.FontFaceProto getFontFaces(int index) {
        if (fontFacesBuilder_ == null) {
          return fontFaces_.get(index);
        } else {
          return fontFacesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;</code>
       */
      public Builder setFontFaces(
          int index, org.webswing.directdraw.proto.Directdraw.FontFaceProto value) {
        if (fontFacesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFontFacesIsMutable();
          fontFaces_.set(index, value);
          onChanged();
        } else {
          fontFacesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;</code>
       */
      public Builder setFontFaces(
          int index, org.webswing.directdraw.proto.Directdraw.FontFaceProto.Builder builderForValue) {
        if (fontFacesBuilder_ == null) {
          ensureFontFacesIsMutable();
          fontFaces_.set(index, builderForValue.build());
          onChanged();
        } else {
          fontFacesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;</code>
       */
      public Builder addFontFaces(org.webswing.directdraw.proto.Directdraw.FontFaceProto value) {
        if (fontFacesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFontFacesIsMutable();
          fontFaces_.add(value);
          onChanged();
        } else {
          fontFacesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;</code>
       */
      public Builder addFontFaces(
          int index, org.webswing.directdraw.proto.Directdraw.FontFaceProto value) {
        if (fontFacesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFontFacesIsMutable();
          fontFaces_.add(index, value);
          onChanged();
        } else {
          fontFacesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;</code>
       */
      public Builder addFontFaces(
          org.webswing.directdraw.proto.Directdraw.FontFaceProto.Builder builderForValue) {
        if (fontFacesBuilder_ == null) {
          ensureFontFacesIsMutable();
          fontFaces_.add(builderForValue.build());
          onChanged();
        } else {
          fontFacesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;</code>
       */
      public Builder addFontFaces(
          int index, org.webswing.directdraw.proto.Directdraw.FontFaceProto.Builder builderForValue) {
        if (fontFacesBuilder_ == null) {
          ensureFontFacesIsMutable();
          fontFaces_.add(index, builderForValue.build());
          onChanged();
        } else {
          fontFacesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;</code>
       */
      public Builder addAllFontFaces(
          java.lang.Iterable<? extends org.webswing.directdraw.proto.Directdraw.FontFaceProto> values) {
        if (fontFacesBuilder_ == null) {
          ensureFontFacesIsMutable();
          super.addAll(values, fontFaces_);
          onChanged();
        } else {
          fontFacesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;</code>
       */
      public Builder clearFontFaces() {
        if (fontFacesBuilder_ == null) {
          fontFaces_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          fontFacesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;</code>
       */
      public Builder removeFontFaces(int index) {
        if (fontFacesBuilder_ == null) {
          ensureFontFacesIsMutable();
          fontFaces_.remove(index);
          onChanged();
        } else {
          fontFacesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.FontFaceProto.Builder getFontFacesBuilder(
          int index) {
        return getFontFacesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.FontFaceProtoOrBuilder getFontFacesOrBuilder(
          int index) {
        if (fontFacesBuilder_ == null) {
          return fontFaces_.get(index);  } else {
          return fontFacesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;</code>
       */
      public java.util.List<? extends org.webswing.directdraw.proto.Directdraw.FontFaceProtoOrBuilder> 
           getFontFacesOrBuilderList() {
        if (fontFacesBuilder_ != null) {
          return fontFacesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(fontFaces_);
        }
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.FontFaceProto.Builder addFontFacesBuilder() {
        return getFontFacesFieldBuilder().addBuilder(
            org.webswing.directdraw.proto.Directdraw.FontFaceProto.getDefaultInstance());
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.FontFaceProto.Builder addFontFacesBuilder(
          int index) {
        return getFontFacesFieldBuilder().addBuilder(
            index, org.webswing.directdraw.proto.Directdraw.FontFaceProto.getDefaultInstance());
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.FontFaceProto fontFaces = 5;</code>
       */
      public java.util.List<org.webswing.directdraw.proto.Directdraw.FontFaceProto.Builder> 
           getFontFacesBuilderList() {
        return getFontFacesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.FontFaceProto, org.webswing.directdraw.proto.Directdraw.FontFaceProto.Builder, org.webswing.directdraw.proto.Directdraw.FontFaceProtoOrBuilder> 
          getFontFacesFieldBuilder() {
        if (fontFacesBuilder_ == null) {
          fontFacesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              org.webswing.directdraw.proto.Directdraw.FontFaceProto, org.webswing.directdraw.proto.Directdraw.FontFaceProto.Builder, org.webswing.directdraw.proto.Directdraw.FontFaceProtoOrBuilder>(
                  fontFaces_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          fontFaces_ = null;
        }
        return fontFacesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.webswing.directdraw.proto.WebImageProto)
    }

    static {
      defaultInstance = new WebImageProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.webswing.directdraw.proto.WebImageProto)
  }

  public interface DrawInstructionProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required .org.webswing.directdraw.proto.DrawInstructionProto.InstructionProto inst = 1;
    /**
     * <code>required .org.webswing.directdraw.proto.DrawInstructionProto.InstructionProto inst = 1;</code>
     */
    boolean hasInst();
    /**
     * <code>required .org.webswing.directdraw.proto.DrawInstructionProto.InstructionProto inst = 1;</code>
     */
    org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.InstructionProto getInst();

    // repeated uint32 args = 2;
    /**
     * <code>repeated uint32 args = 2;</code>
     */
    java.util.List<java.lang.Integer> getArgsList();
    /**
     * <code>repeated uint32 args = 2;</code>
     */
    int getArgsCount();
    /**
     * <code>repeated uint32 args = 2;</code>
     */
    int getArgs(int index);

    // optional bytes webImage = 3;
    /**
     * <code>optional bytes webImage = 3;</code>
     */
    boolean hasWebImage();
    /**
     * <code>optional bytes webImage = 3;</code>
     */
    com.google.protobuf.ByteString getWebImage();
  }
  /**
   * Protobuf type {@code org.webswing.directdraw.proto.DrawInstructionProto}
   */
  public static final class DrawInstructionProto extends
      com.google.protobuf.GeneratedMessage
      implements DrawInstructionProtoOrBuilder {
    // Use DrawInstructionProto.newBuilder() to construct.
    private DrawInstructionProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DrawInstructionProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DrawInstructionProto defaultInstance;
    public static DrawInstructionProto getDefaultInstance() {
      return defaultInstance;
    }

    public DrawInstructionProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DrawInstructionProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.InstructionProto value = org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.InstructionProto.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                inst_ = value;
              }
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                args_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              args_.add(input.readUInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                args_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                args_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 26: {
              bitField0_ |= 0x00000002;
              webImage_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          args_ = java.util.Collections.unmodifiableList(args_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_DrawInstructionProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_DrawInstructionProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.class, org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.Builder.class);
    }

    public static com.google.protobuf.Parser<DrawInstructionProto> PARSER =
        new com.google.protobuf.AbstractParser<DrawInstructionProto>() {
      public DrawInstructionProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DrawInstructionProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DrawInstructionProto> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code org.webswing.directdraw.proto.DrawInstructionProto.InstructionProto}
     */
    public enum InstructionProto
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>DRAW = 0;</code>
       */
      DRAW(0, 0),
      /**
       * <code>FILL = 1;</code>
       */
      FILL(1, 1),
      /**
       * <code>DRAW_IMAGE = 2;</code>
       */
      DRAW_IMAGE(2, 2),
      /**
       * <code>DRAW_WEBIMAGE = 3;</code>
       */
      DRAW_WEBIMAGE(3, 3),
      /**
       * <code>DRAW_STRING = 4;</code>
       */
      DRAW_STRING(4, 4),
      /**
       * <code>COPY_AREA = 5;</code>
       */
      COPY_AREA(5, 5),
      /**
       * <code>GRAPHICS_DISPOSE = 6;</code>
       */
      GRAPHICS_DISPOSE(6, 6),
      /**
       * <code>GRAPHICS_SWITCH = 7;</code>
       */
      GRAPHICS_SWITCH(7, 7),
      /**
       * <code>GRAPHICS_CREATE = 8;</code>
       */
      GRAPHICS_CREATE(8, 8),
      /**
       * <code>TRANSFORM = 9;</code>
       */
      TRANSFORM(9, 9),
      /**
       * <code>SET_PAINT = 10;</code>
       */
      SET_PAINT(10, 10),
      /**
       * <code>SET_FONT = 11;</code>
       */
      SET_FONT(11, 11),
      /**
       * <code>SET_STROKE = 12;</code>
       */
      SET_STROKE(12, 12),
      /**
       * <code>SET_COMPOSITE = 13;</code>
       */
      SET_COMPOSITE(13, 13),
      /**
       * <code>DRAW_GLYPH_LIST = 14;</code>
       */
      DRAW_GLYPH_LIST(14, 14),
      ;

      /**
       * <code>DRAW = 0;</code>
       */
      public static final int DRAW_VALUE = 0;
      /**
       * <code>FILL = 1;</code>
       */
      public static final int FILL_VALUE = 1;
      /**
       * <code>DRAW_IMAGE = 2;</code>
       */
      public static final int DRAW_IMAGE_VALUE = 2;
      /**
       * <code>DRAW_WEBIMAGE = 3;</code>
       */
      public static final int DRAW_WEBIMAGE_VALUE = 3;
      /**
       * <code>DRAW_STRING = 4;</code>
       */
      public static final int DRAW_STRING_VALUE = 4;
      /**
       * <code>COPY_AREA = 5;</code>
       */
      public static final int COPY_AREA_VALUE = 5;
      /**
       * <code>GRAPHICS_DISPOSE = 6;</code>
       */
      public static final int GRAPHICS_DISPOSE_VALUE = 6;
      /**
       * <code>GRAPHICS_SWITCH = 7;</code>
       */
      public static final int GRAPHICS_SWITCH_VALUE = 7;
      /**
       * <code>GRAPHICS_CREATE = 8;</code>
       */
      public static final int GRAPHICS_CREATE_VALUE = 8;
      /**
       * <code>TRANSFORM = 9;</code>
       */
      public static final int TRANSFORM_VALUE = 9;
      /**
       * <code>SET_PAINT = 10;</code>
       */
      public static final int SET_PAINT_VALUE = 10;
      /**
       * <code>SET_FONT = 11;</code>
       */
      public static final int SET_FONT_VALUE = 11;
      /**
       * <code>SET_STROKE = 12;</code>
       */
      public static final int SET_STROKE_VALUE = 12;
      /**
       * <code>SET_COMPOSITE = 13;</code>
       */
      public static final int SET_COMPOSITE_VALUE = 13;
      /**
       * <code>DRAW_GLYPH_LIST = 14;</code>
       */
      public static final int DRAW_GLYPH_LIST_VALUE = 14;


      public final int getNumber() { return value; }

      public static InstructionProto valueOf(int value) {
        switch (value) {
          case 0: return DRAW;
          case 1: return FILL;
          case 2: return DRAW_IMAGE;
          case 3: return DRAW_WEBIMAGE;
          case 4: return DRAW_STRING;
          case 5: return COPY_AREA;
          case 6: return GRAPHICS_DISPOSE;
          case 7: return GRAPHICS_SWITCH;
          case 8: return GRAPHICS_CREATE;
          case 9: return TRANSFORM;
          case 10: return SET_PAINT;
          case 11: return SET_FONT;
          case 12: return SET_STROKE;
          case 13: return SET_COMPOSITE;
          case 14: return DRAW_GLYPH_LIST;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<InstructionProto>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<InstructionProto>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<InstructionProto>() {
              public InstructionProto findValueByNumber(int number) {
                return InstructionProto.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.getDescriptor().getEnumTypes().get(0);
      }

      private static final InstructionProto[] VALUES = values();

      public static InstructionProto valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private InstructionProto(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.webswing.directdraw.proto.DrawInstructionProto.InstructionProto)
    }

    private int bitField0_;
    // required .org.webswing.directdraw.proto.DrawInstructionProto.InstructionProto inst = 1;
    public static final int INST_FIELD_NUMBER = 1;
    private org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.InstructionProto inst_;
    /**
     * <code>required .org.webswing.directdraw.proto.DrawInstructionProto.InstructionProto inst = 1;</code>
     */
    public boolean hasInst() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.webswing.directdraw.proto.DrawInstructionProto.InstructionProto inst = 1;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.InstructionProto getInst() {
      return inst_;
    }

    // repeated uint32 args = 2;
    public static final int ARGS_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> args_;
    /**
     * <code>repeated uint32 args = 2;</code>
     */
    public java.util.List<java.lang.Integer>
        getArgsList() {
      return args_;
    }
    /**
     * <code>repeated uint32 args = 2;</code>
     */
    public int getArgsCount() {
      return args_.size();
    }
    /**
     * <code>repeated uint32 args = 2;</code>
     */
    public int getArgs(int index) {
      return args_.get(index);
    }

    // optional bytes webImage = 3;
    public static final int WEBIMAGE_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString webImage_;
    /**
     * <code>optional bytes webImage = 3;</code>
     */
    public boolean hasWebImage() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bytes webImage = 3;</code>
     */
    public com.google.protobuf.ByteString getWebImage() {
      return webImage_;
    }

    private void initFields() {
      inst_ = org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.InstructionProto.DRAW;
      args_ = java.util.Collections.emptyList();
      webImage_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasInst()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, inst_.getNumber());
      }
      for (int i = 0; i < args_.size(); i++) {
        output.writeUInt32(2, args_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(3, webImage_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, inst_.getNumber());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < args_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(args_.get(i));
        }
        size += dataSize;
        size += 1 * getArgsList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, webImage_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.webswing.directdraw.proto.Directdraw.DrawInstructionProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.DrawInstructionProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.DrawInstructionProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.DrawInstructionProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.DrawInstructionProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.DrawInstructionProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.DrawInstructionProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.DrawInstructionProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.DrawInstructionProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.DrawInstructionProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.webswing.directdraw.proto.Directdraw.DrawInstructionProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.webswing.directdraw.proto.DrawInstructionProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.webswing.directdraw.proto.Directdraw.DrawInstructionProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_DrawInstructionProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_DrawInstructionProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.class, org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.Builder.class);
      }

      // Construct using org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        inst_ = org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.InstructionProto.DRAW;
        bitField0_ = (bitField0_ & ~0x00000001);
        args_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        webImage_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_DrawInstructionProto_descriptor;
      }

      public org.webswing.directdraw.proto.Directdraw.DrawInstructionProto getDefaultInstanceForType() {
        return org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.getDefaultInstance();
      }

      public org.webswing.directdraw.proto.Directdraw.DrawInstructionProto build() {
        org.webswing.directdraw.proto.Directdraw.DrawInstructionProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.webswing.directdraw.proto.Directdraw.DrawInstructionProto buildPartial() {
        org.webswing.directdraw.proto.Directdraw.DrawInstructionProto result = new org.webswing.directdraw.proto.Directdraw.DrawInstructionProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.inst_ = inst_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          args_ = java.util.Collections.unmodifiableList(args_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.args_ = args_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.webImage_ = webImage_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.webswing.directdraw.proto.Directdraw.DrawInstructionProto) {
          return mergeFrom((org.webswing.directdraw.proto.Directdraw.DrawInstructionProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.webswing.directdraw.proto.Directdraw.DrawInstructionProto other) {
        if (other == org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.getDefaultInstance()) return this;
        if (other.hasInst()) {
          setInst(other.getInst());
        }
        if (!other.args_.isEmpty()) {
          if (args_.isEmpty()) {
            args_ = other.args_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureArgsIsMutable();
            args_.addAll(other.args_);
          }
          onChanged();
        }
        if (other.hasWebImage()) {
          setWebImage(other.getWebImage());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasInst()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.webswing.directdraw.proto.Directdraw.DrawInstructionProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.webswing.directdraw.proto.Directdraw.DrawInstructionProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .org.webswing.directdraw.proto.DrawInstructionProto.InstructionProto inst = 1;
      private org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.InstructionProto inst_ = org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.InstructionProto.DRAW;
      /**
       * <code>required .org.webswing.directdraw.proto.DrawInstructionProto.InstructionProto inst = 1;</code>
       */
      public boolean hasInst() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.webswing.directdraw.proto.DrawInstructionProto.InstructionProto inst = 1;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.InstructionProto getInst() {
        return inst_;
      }
      /**
       * <code>required .org.webswing.directdraw.proto.DrawInstructionProto.InstructionProto inst = 1;</code>
       */
      public Builder setInst(org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.InstructionProto value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        inst_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .org.webswing.directdraw.proto.DrawInstructionProto.InstructionProto inst = 1;</code>
       */
      public Builder clearInst() {
        bitField0_ = (bitField0_ & ~0x00000001);
        inst_ = org.webswing.directdraw.proto.Directdraw.DrawInstructionProto.InstructionProto.DRAW;
        onChanged();
        return this;
      }

      // repeated uint32 args = 2;
      private java.util.List<java.lang.Integer> args_ = java.util.Collections.emptyList();
      private void ensureArgsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          args_ = new java.util.ArrayList<java.lang.Integer>(args_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated uint32 args = 2;</code>
       */
      public java.util.List<java.lang.Integer>
          getArgsList() {
        return java.util.Collections.unmodifiableList(args_);
      }
      /**
       * <code>repeated uint32 args = 2;</code>
       */
      public int getArgsCount() {
        return args_.size();
      }
      /**
       * <code>repeated uint32 args = 2;</code>
       */
      public int getArgs(int index) {
        return args_.get(index);
      }
      /**
       * <code>repeated uint32 args = 2;</code>
       */
      public Builder setArgs(
          int index, int value) {
        ensureArgsIsMutable();
        args_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 args = 2;</code>
       */
      public Builder addArgs(int value) {
        ensureArgsIsMutable();
        args_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 args = 2;</code>
       */
      public Builder addAllArgs(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureArgsIsMutable();
        super.addAll(values, args_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 args = 2;</code>
       */
      public Builder clearArgs() {
        args_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // optional bytes webImage = 3;
      private com.google.protobuf.ByteString webImage_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes webImage = 3;</code>
       */
      public boolean hasWebImage() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bytes webImage = 3;</code>
       */
      public com.google.protobuf.ByteString getWebImage() {
        return webImage_;
      }
      /**
       * <code>optional bytes webImage = 3;</code>
       */
      public Builder setWebImage(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        webImage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes webImage = 3;</code>
       */
      public Builder clearWebImage() {
        bitField0_ = (bitField0_ & ~0x00000004);
        webImage_ = getDefaultInstance().getWebImage();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.webswing.directdraw.proto.DrawInstructionProto)
    }

    static {
      defaultInstance = new DrawInstructionProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.webswing.directdraw.proto.DrawInstructionProto)
  }

  public interface DrawConstantProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint32 id = 1;
    /**
     * <code>required uint32 id = 1;</code>
     */
    boolean hasId();
    /**
     * <code>required uint32 id = 1;</code>
     */
    int getId();

    // optional .org.webswing.directdraw.proto.ColorProto color = 2;
    /**
     * <code>optional .org.webswing.directdraw.proto.ColorProto color = 2;</code>
     */
    boolean hasColor();
    /**
     * <code>optional .org.webswing.directdraw.proto.ColorProto color = 2;</code>
     */
    org.webswing.directdraw.proto.Directdraw.ColorProto getColor();
    /**
     * <code>optional .org.webswing.directdraw.proto.ColorProto color = 2;</code>
     */
    org.webswing.directdraw.proto.Directdraw.ColorProtoOrBuilder getColorOrBuilder();

    // optional .org.webswing.directdraw.proto.ImageProto image = 3;
    /**
     * <code>optional .org.webswing.directdraw.proto.ImageProto image = 3;</code>
     */
    boolean hasImage();
    /**
     * <code>optional .org.webswing.directdraw.proto.ImageProto image = 3;</code>
     */
    org.webswing.directdraw.proto.Directdraw.ImageProto getImage();
    /**
     * <code>optional .org.webswing.directdraw.proto.ImageProto image = 3;</code>
     */
    org.webswing.directdraw.proto.Directdraw.ImageProtoOrBuilder getImageOrBuilder();

    // optional .org.webswing.directdraw.proto.TransformProto transform = 4;
    /**
     * <code>optional .org.webswing.directdraw.proto.TransformProto transform = 4;</code>
     */
    boolean hasTransform();
    /**
     * <code>optional .org.webswing.directdraw.proto.TransformProto transform = 4;</code>
     */
    org.webswing.directdraw.proto.Directdraw.TransformProto getTransform();
    /**
     * <code>optional .org.webswing.directdraw.proto.TransformProto transform = 4;</code>
     */
    org.webswing.directdraw.proto.Directdraw.TransformProtoOrBuilder getTransformOrBuilder();

    // optional string string = 5;
    /**
     * <code>optional string string = 5;</code>
     */
    boolean hasString();
    /**
     * <code>optional string string = 5;</code>
     */
    java.lang.String getString();
    /**
     * <code>optional string string = 5;</code>
     */
    com.google.protobuf.ByteString
        getStringBytes();

    // optional .org.webswing.directdraw.proto.PathProto path = 6;
    /**
     * <code>optional .org.webswing.directdraw.proto.PathProto path = 6;</code>
     */
    boolean hasPath();
    /**
     * <code>optional .org.webswing.directdraw.proto.PathProto path = 6;</code>
     */
    org.webswing.directdraw.proto.Directdraw.PathProto getPath();
    /**
     * <code>optional .org.webswing.directdraw.proto.PathProto path = 6;</code>
     */
    org.webswing.directdraw.proto.Directdraw.PathProtoOrBuilder getPathOrBuilder();

    // optional .org.webswing.directdraw.proto.FontProto font = 7;
    /**
     * <code>optional .org.webswing.directdraw.proto.FontProto font = 7;</code>
     */
    boolean hasFont();
    /**
     * <code>optional .org.webswing.directdraw.proto.FontProto font = 7;</code>
     */
    org.webswing.directdraw.proto.Directdraw.FontProto getFont();
    /**
     * <code>optional .org.webswing.directdraw.proto.FontProto font = 7;</code>
     */
    org.webswing.directdraw.proto.Directdraw.FontProtoOrBuilder getFontOrBuilder();

    // optional .org.webswing.directdraw.proto.LinearGradientProto linearGrad = 8;
    /**
     * <code>optional .org.webswing.directdraw.proto.LinearGradientProto linearGrad = 8;</code>
     */
    boolean hasLinearGrad();
    /**
     * <code>optional .org.webswing.directdraw.proto.LinearGradientProto linearGrad = 8;</code>
     */
    org.webswing.directdraw.proto.Directdraw.LinearGradientProto getLinearGrad();
    /**
     * <code>optional .org.webswing.directdraw.proto.LinearGradientProto linearGrad = 8;</code>
     */
    org.webswing.directdraw.proto.Directdraw.LinearGradientProtoOrBuilder getLinearGradOrBuilder();

    // optional .org.webswing.directdraw.proto.RadialGradientProto radialGrad = 9;
    /**
     * <code>optional .org.webswing.directdraw.proto.RadialGradientProto radialGrad = 9;</code>
     */
    boolean hasRadialGrad();
    /**
     * <code>optional .org.webswing.directdraw.proto.RadialGradientProto radialGrad = 9;</code>
     */
    org.webswing.directdraw.proto.Directdraw.RadialGradientProto getRadialGrad();
    /**
     * <code>optional .org.webswing.directdraw.proto.RadialGradientProto radialGrad = 9;</code>
     */
    org.webswing.directdraw.proto.Directdraw.RadialGradientProtoOrBuilder getRadialGradOrBuilder();

    // optional .org.webswing.directdraw.proto.PointsProto points = 10;
    /**
     * <code>optional .org.webswing.directdraw.proto.PointsProto points = 10;</code>
     */
    boolean hasPoints();
    /**
     * <code>optional .org.webswing.directdraw.proto.PointsProto points = 10;</code>
     */
    org.webswing.directdraw.proto.Directdraw.PointsProto getPoints();
    /**
     * <code>optional .org.webswing.directdraw.proto.PointsProto points = 10;</code>
     */
    org.webswing.directdraw.proto.Directdraw.PointsProtoOrBuilder getPointsOrBuilder();

    // optional .org.webswing.directdraw.proto.RectangleProto rectangle = 11;
    /**
     * <code>optional .org.webswing.directdraw.proto.RectangleProto rectangle = 11;</code>
     */
    boolean hasRectangle();
    /**
     * <code>optional .org.webswing.directdraw.proto.RectangleProto rectangle = 11;</code>
     */
    org.webswing.directdraw.proto.Directdraw.RectangleProto getRectangle();
    /**
     * <code>optional .org.webswing.directdraw.proto.RectangleProto rectangle = 11;</code>
     */
    org.webswing.directdraw.proto.Directdraw.RectangleProtoOrBuilder getRectangleOrBuilder();

    // optional .org.webswing.directdraw.proto.EllipseProto ellipse = 12;
    /**
     * <code>optional .org.webswing.directdraw.proto.EllipseProto ellipse = 12;</code>
     */
    boolean hasEllipse();
    /**
     * <code>optional .org.webswing.directdraw.proto.EllipseProto ellipse = 12;</code>
     */
    org.webswing.directdraw.proto.Directdraw.EllipseProto getEllipse();
    /**
     * <code>optional .org.webswing.directdraw.proto.EllipseProto ellipse = 12;</code>
     */
    org.webswing.directdraw.proto.Directdraw.EllipseProtoOrBuilder getEllipseOrBuilder();

    // optional .org.webswing.directdraw.proto.RoundRectangleProto roundRectangle = 13;
    /**
     * <code>optional .org.webswing.directdraw.proto.RoundRectangleProto roundRectangle = 13;</code>
     */
    boolean hasRoundRectangle();
    /**
     * <code>optional .org.webswing.directdraw.proto.RoundRectangleProto roundRectangle = 13;</code>
     */
    org.webswing.directdraw.proto.Directdraw.RoundRectangleProto getRoundRectangle();
    /**
     * <code>optional .org.webswing.directdraw.proto.RoundRectangleProto roundRectangle = 13;</code>
     */
    org.webswing.directdraw.proto.Directdraw.RoundRectangleProtoOrBuilder getRoundRectangleOrBuilder();

    // optional .org.webswing.directdraw.proto.ArcProto arc = 14;
    /**
     * <code>optional .org.webswing.directdraw.proto.ArcProto arc = 14;</code>
     */
    boolean hasArc();
    /**
     * <code>optional .org.webswing.directdraw.proto.ArcProto arc = 14;</code>
     */
    org.webswing.directdraw.proto.Directdraw.ArcProto getArc();
    /**
     * <code>optional .org.webswing.directdraw.proto.ArcProto arc = 14;</code>
     */
    org.webswing.directdraw.proto.Directdraw.ArcProtoOrBuilder getArcOrBuilder();

    // optional .org.webswing.directdraw.proto.StrokeProto stroke = 15;
    /**
     * <code>optional .org.webswing.directdraw.proto.StrokeProto stroke = 15;</code>
     */
    boolean hasStroke();
    /**
     * <code>optional .org.webswing.directdraw.proto.StrokeProto stroke = 15;</code>
     */
    org.webswing.directdraw.proto.Directdraw.StrokeProto getStroke();
    /**
     * <code>optional .org.webswing.directdraw.proto.StrokeProto stroke = 15;</code>
     */
    org.webswing.directdraw.proto.Directdraw.StrokeProtoOrBuilder getStrokeOrBuilder();

    // optional .org.webswing.directdraw.proto.CompositeProto composite = 16;
    /**
     * <code>optional .org.webswing.directdraw.proto.CompositeProto composite = 16;</code>
     */
    boolean hasComposite();
    /**
     * <code>optional .org.webswing.directdraw.proto.CompositeProto composite = 16;</code>
     */
    org.webswing.directdraw.proto.Directdraw.CompositeProto getComposite();
    /**
     * <code>optional .org.webswing.directdraw.proto.CompositeProto composite = 16;</code>
     */
    org.webswing.directdraw.proto.Directdraw.CompositeProtoOrBuilder getCompositeOrBuilder();

    // optional .org.webswing.directdraw.proto.TextureProto texture = 17;
    /**
     * <code>optional .org.webswing.directdraw.proto.TextureProto texture = 17;</code>
     */
    boolean hasTexture();
    /**
     * <code>optional .org.webswing.directdraw.proto.TextureProto texture = 17;</code>
     */
    org.webswing.directdraw.proto.Directdraw.TextureProto getTexture();
    /**
     * <code>optional .org.webswing.directdraw.proto.TextureProto texture = 17;</code>
     */
    org.webswing.directdraw.proto.Directdraw.TextureProtoOrBuilder getTextureOrBuilder();

    // optional .org.webswing.directdraw.proto.GlyphProto glyph = 18;
    /**
     * <code>optional .org.webswing.directdraw.proto.GlyphProto glyph = 18;</code>
     */
    boolean hasGlyph();
    /**
     * <code>optional .org.webswing.directdraw.proto.GlyphProto glyph = 18;</code>
     */
    org.webswing.directdraw.proto.Directdraw.GlyphProto getGlyph();
    /**
     * <code>optional .org.webswing.directdraw.proto.GlyphProto glyph = 18;</code>
     */
    org.webswing.directdraw.proto.Directdraw.GlyphProtoOrBuilder getGlyphOrBuilder();

    // optional .org.webswing.directdraw.proto.CombinedProto combined = 19;
    /**
     * <code>optional .org.webswing.directdraw.proto.CombinedProto combined = 19;</code>
     */
    boolean hasCombined();
    /**
     * <code>optional .org.webswing.directdraw.proto.CombinedProto combined = 19;</code>
     */
    org.webswing.directdraw.proto.Directdraw.CombinedProto getCombined();
    /**
     * <code>optional .org.webswing.directdraw.proto.CombinedProto combined = 19;</code>
     */
    org.webswing.directdraw.proto.Directdraw.CombinedProtoOrBuilder getCombinedOrBuilder();
  }
  /**
   * Protobuf type {@code org.webswing.directdraw.proto.DrawConstantProto}
   */
  public static final class DrawConstantProto extends
      com.google.protobuf.GeneratedMessage
      implements DrawConstantProtoOrBuilder {
    // Use DrawConstantProto.newBuilder() to construct.
    private DrawConstantProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DrawConstantProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DrawConstantProto defaultInstance;
    public static DrawConstantProto getDefaultInstance() {
      return defaultInstance;
    }

    public DrawConstantProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DrawConstantProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readUInt32();
              break;
            }
            case 18: {
              org.webswing.directdraw.proto.Directdraw.ColorProto.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = color_.toBuilder();
              }
              color_ = input.readMessage(org.webswing.directdraw.proto.Directdraw.ColorProto.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(color_);
                color_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              org.webswing.directdraw.proto.Directdraw.ImageProto.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = image_.toBuilder();
              }
              image_ = input.readMessage(org.webswing.directdraw.proto.Directdraw.ImageProto.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(image_);
                image_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              org.webswing.directdraw.proto.Directdraw.TransformProto.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = transform_.toBuilder();
              }
              transform_ = input.readMessage(org.webswing.directdraw.proto.Directdraw.TransformProto.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(transform_);
                transform_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              bitField0_ |= 0x00000010;
              string_ = input.readBytes();
              break;
            }
            case 50: {
              org.webswing.directdraw.proto.Directdraw.PathProto.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = path_.toBuilder();
              }
              path_ = input.readMessage(org.webswing.directdraw.proto.Directdraw.PathProto.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(path_);
                path_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 58: {
              org.webswing.directdraw.proto.Directdraw.FontProto.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = font_.toBuilder();
              }
              font_ = input.readMessage(org.webswing.directdraw.proto.Directdraw.FontProto.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(font_);
                font_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 66: {
              org.webswing.directdraw.proto.Directdraw.LinearGradientProto.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = linearGrad_.toBuilder();
              }
              linearGrad_ = input.readMessage(org.webswing.directdraw.proto.Directdraw.LinearGradientProto.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(linearGrad_);
                linearGrad_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 74: {
              org.webswing.directdraw.proto.Directdraw.RadialGradientProto.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = radialGrad_.toBuilder();
              }
              radialGrad_ = input.readMessage(org.webswing.directdraw.proto.Directdraw.RadialGradientProto.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(radialGrad_);
                radialGrad_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 82: {
              org.webswing.directdraw.proto.Directdraw.PointsProto.Builder subBuilder = null;
              if (((bitField0_ & 0x00000200) == 0x00000200)) {
                subBuilder = points_.toBuilder();
              }
              points_ = input.readMessage(org.webswing.directdraw.proto.Directdraw.PointsProto.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(points_);
                points_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000200;
              break;
            }
            case 90: {
              org.webswing.directdraw.proto.Directdraw.RectangleProto.Builder subBuilder = null;
              if (((bitField0_ & 0x00000400) == 0x00000400)) {
                subBuilder = rectangle_.toBuilder();
              }
              rectangle_ = input.readMessage(org.webswing.directdraw.proto.Directdraw.RectangleProto.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(rectangle_);
                rectangle_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000400;
              break;
            }
            case 98: {
              org.webswing.directdraw.proto.Directdraw.EllipseProto.Builder subBuilder = null;
              if (((bitField0_ & 0x00000800) == 0x00000800)) {
                subBuilder = ellipse_.toBuilder();
              }
              ellipse_ = input.readMessage(org.webswing.directdraw.proto.Directdraw.EllipseProto.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(ellipse_);
                ellipse_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000800;
              break;
            }
            case 106: {
              org.webswing.directdraw.proto.Directdraw.RoundRectangleProto.Builder subBuilder = null;
              if (((bitField0_ & 0x00001000) == 0x00001000)) {
                subBuilder = roundRectangle_.toBuilder();
              }
              roundRectangle_ = input.readMessage(org.webswing.directdraw.proto.Directdraw.RoundRectangleProto.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(roundRectangle_);
                roundRectangle_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00001000;
              break;
            }
            case 114: {
              org.webswing.directdraw.proto.Directdraw.ArcProto.Builder subBuilder = null;
              if (((bitField0_ & 0x00002000) == 0x00002000)) {
                subBuilder = arc_.toBuilder();
              }
              arc_ = input.readMessage(org.webswing.directdraw.proto.Directdraw.ArcProto.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(arc_);
                arc_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00002000;
              break;
            }
            case 122: {
              org.webswing.directdraw.proto.Directdraw.StrokeProto.Builder subBuilder = null;
              if (((bitField0_ & 0x00004000) == 0x00004000)) {
                subBuilder = stroke_.toBuilder();
              }
              stroke_ = input.readMessage(org.webswing.directdraw.proto.Directdraw.StrokeProto.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(stroke_);
                stroke_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00004000;
              break;
            }
            case 130: {
              org.webswing.directdraw.proto.Directdraw.CompositeProto.Builder subBuilder = null;
              if (((bitField0_ & 0x00008000) == 0x00008000)) {
                subBuilder = composite_.toBuilder();
              }
              composite_ = input.readMessage(org.webswing.directdraw.proto.Directdraw.CompositeProto.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(composite_);
                composite_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00008000;
              break;
            }
            case 138: {
              org.webswing.directdraw.proto.Directdraw.TextureProto.Builder subBuilder = null;
              if (((bitField0_ & 0x00010000) == 0x00010000)) {
                subBuilder = texture_.toBuilder();
              }
              texture_ = input.readMessage(org.webswing.directdraw.proto.Directdraw.TextureProto.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(texture_);
                texture_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00010000;
              break;
            }
            case 146: {
              org.webswing.directdraw.proto.Directdraw.GlyphProto.Builder subBuilder = null;
              if (((bitField0_ & 0x00020000) == 0x00020000)) {
                subBuilder = glyph_.toBuilder();
              }
              glyph_ = input.readMessage(org.webswing.directdraw.proto.Directdraw.GlyphProto.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(glyph_);
                glyph_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00020000;
              break;
            }
            case 154: {
              org.webswing.directdraw.proto.Directdraw.CombinedProto.Builder subBuilder = null;
              if (((bitField0_ & 0x00040000) == 0x00040000)) {
                subBuilder = combined_.toBuilder();
              }
              combined_ = input.readMessage(org.webswing.directdraw.proto.Directdraw.CombinedProto.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(combined_);
                combined_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00040000;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_DrawConstantProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_DrawConstantProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.webswing.directdraw.proto.Directdraw.DrawConstantProto.class, org.webswing.directdraw.proto.Directdraw.DrawConstantProto.Builder.class);
    }

    public static com.google.protobuf.Parser<DrawConstantProto> PARSER =
        new com.google.protobuf.AbstractParser<DrawConstantProto>() {
      public DrawConstantProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DrawConstantProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DrawConstantProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint32 id = 1;
    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required uint32 id = 1;</code>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 id = 1;</code>
     */
    public int getId() {
      return id_;
    }

    // optional .org.webswing.directdraw.proto.ColorProto color = 2;
    public static final int COLOR_FIELD_NUMBER = 2;
    private org.webswing.directdraw.proto.Directdraw.ColorProto color_;
    /**
     * <code>optional .org.webswing.directdraw.proto.ColorProto color = 2;</code>
     */
    public boolean hasColor() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.ColorProto color = 2;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.ColorProto getColor() {
      return color_;
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.ColorProto color = 2;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.ColorProtoOrBuilder getColorOrBuilder() {
      return color_;
    }

    // optional .org.webswing.directdraw.proto.ImageProto image = 3;
    public static final int IMAGE_FIELD_NUMBER = 3;
    private org.webswing.directdraw.proto.Directdraw.ImageProto image_;
    /**
     * <code>optional .org.webswing.directdraw.proto.ImageProto image = 3;</code>
     */
    public boolean hasImage() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.ImageProto image = 3;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.ImageProto getImage() {
      return image_;
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.ImageProto image = 3;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.ImageProtoOrBuilder getImageOrBuilder() {
      return image_;
    }

    // optional .org.webswing.directdraw.proto.TransformProto transform = 4;
    public static final int TRANSFORM_FIELD_NUMBER = 4;
    private org.webswing.directdraw.proto.Directdraw.TransformProto transform_;
    /**
     * <code>optional .org.webswing.directdraw.proto.TransformProto transform = 4;</code>
     */
    public boolean hasTransform() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.TransformProto transform = 4;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.TransformProto getTransform() {
      return transform_;
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.TransformProto transform = 4;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.TransformProtoOrBuilder getTransformOrBuilder() {
      return transform_;
    }

    // optional string string = 5;
    public static final int STRING_FIELD_NUMBER = 5;
    private java.lang.Object string_;
    /**
     * <code>optional string string = 5;</code>
     */
    public boolean hasString() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional string string = 5;</code>
     */
    public java.lang.String getString() {
      java.lang.Object ref = string_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          string_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string string = 5;</code>
     */
    public com.google.protobuf.ByteString
        getStringBytes() {
      java.lang.Object ref = string_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        string_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional .org.webswing.directdraw.proto.PathProto path = 6;
    public static final int PATH_FIELD_NUMBER = 6;
    private org.webswing.directdraw.proto.Directdraw.PathProto path_;
    /**
     * <code>optional .org.webswing.directdraw.proto.PathProto path = 6;</code>
     */
    public boolean hasPath() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.PathProto path = 6;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.PathProto getPath() {
      return path_;
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.PathProto path = 6;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.PathProtoOrBuilder getPathOrBuilder() {
      return path_;
    }

    // optional .org.webswing.directdraw.proto.FontProto font = 7;
    public static final int FONT_FIELD_NUMBER = 7;
    private org.webswing.directdraw.proto.Directdraw.FontProto font_;
    /**
     * <code>optional .org.webswing.directdraw.proto.FontProto font = 7;</code>
     */
    public boolean hasFont() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.FontProto font = 7;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.FontProto getFont() {
      return font_;
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.FontProto font = 7;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.FontProtoOrBuilder getFontOrBuilder() {
      return font_;
    }

    // optional .org.webswing.directdraw.proto.LinearGradientProto linearGrad = 8;
    public static final int LINEARGRAD_FIELD_NUMBER = 8;
    private org.webswing.directdraw.proto.Directdraw.LinearGradientProto linearGrad_;
    /**
     * <code>optional .org.webswing.directdraw.proto.LinearGradientProto linearGrad = 8;</code>
     */
    public boolean hasLinearGrad() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.LinearGradientProto linearGrad = 8;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.LinearGradientProto getLinearGrad() {
      return linearGrad_;
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.LinearGradientProto linearGrad = 8;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.LinearGradientProtoOrBuilder getLinearGradOrBuilder() {
      return linearGrad_;
    }

    // optional .org.webswing.directdraw.proto.RadialGradientProto radialGrad = 9;
    public static final int RADIALGRAD_FIELD_NUMBER = 9;
    private org.webswing.directdraw.proto.Directdraw.RadialGradientProto radialGrad_;
    /**
     * <code>optional .org.webswing.directdraw.proto.RadialGradientProto radialGrad = 9;</code>
     */
    public boolean hasRadialGrad() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.RadialGradientProto radialGrad = 9;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.RadialGradientProto getRadialGrad() {
      return radialGrad_;
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.RadialGradientProto radialGrad = 9;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.RadialGradientProtoOrBuilder getRadialGradOrBuilder() {
      return radialGrad_;
    }

    // optional .org.webswing.directdraw.proto.PointsProto points = 10;
    public static final int POINTS_FIELD_NUMBER = 10;
    private org.webswing.directdraw.proto.Directdraw.PointsProto points_;
    /**
     * <code>optional .org.webswing.directdraw.proto.PointsProto points = 10;</code>
     */
    public boolean hasPoints() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.PointsProto points = 10;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.PointsProto getPoints() {
      return points_;
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.PointsProto points = 10;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.PointsProtoOrBuilder getPointsOrBuilder() {
      return points_;
    }

    // optional .org.webswing.directdraw.proto.RectangleProto rectangle = 11;
    public static final int RECTANGLE_FIELD_NUMBER = 11;
    private org.webswing.directdraw.proto.Directdraw.RectangleProto rectangle_;
    /**
     * <code>optional .org.webswing.directdraw.proto.RectangleProto rectangle = 11;</code>
     */
    public boolean hasRectangle() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.RectangleProto rectangle = 11;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.RectangleProto getRectangle() {
      return rectangle_;
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.RectangleProto rectangle = 11;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.RectangleProtoOrBuilder getRectangleOrBuilder() {
      return rectangle_;
    }

    // optional .org.webswing.directdraw.proto.EllipseProto ellipse = 12;
    public static final int ELLIPSE_FIELD_NUMBER = 12;
    private org.webswing.directdraw.proto.Directdraw.EllipseProto ellipse_;
    /**
     * <code>optional .org.webswing.directdraw.proto.EllipseProto ellipse = 12;</code>
     */
    public boolean hasEllipse() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.EllipseProto ellipse = 12;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.EllipseProto getEllipse() {
      return ellipse_;
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.EllipseProto ellipse = 12;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.EllipseProtoOrBuilder getEllipseOrBuilder() {
      return ellipse_;
    }

    // optional .org.webswing.directdraw.proto.RoundRectangleProto roundRectangle = 13;
    public static final int ROUNDRECTANGLE_FIELD_NUMBER = 13;
    private org.webswing.directdraw.proto.Directdraw.RoundRectangleProto roundRectangle_;
    /**
     * <code>optional .org.webswing.directdraw.proto.RoundRectangleProto roundRectangle = 13;</code>
     */
    public boolean hasRoundRectangle() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.RoundRectangleProto roundRectangle = 13;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.RoundRectangleProto getRoundRectangle() {
      return roundRectangle_;
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.RoundRectangleProto roundRectangle = 13;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.RoundRectangleProtoOrBuilder getRoundRectangleOrBuilder() {
      return roundRectangle_;
    }

    // optional .org.webswing.directdraw.proto.ArcProto arc = 14;
    public static final int ARC_FIELD_NUMBER = 14;
    private org.webswing.directdraw.proto.Directdraw.ArcProto arc_;
    /**
     * <code>optional .org.webswing.directdraw.proto.ArcProto arc = 14;</code>
     */
    public boolean hasArc() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.ArcProto arc = 14;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.ArcProto getArc() {
      return arc_;
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.ArcProto arc = 14;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.ArcProtoOrBuilder getArcOrBuilder() {
      return arc_;
    }

    // optional .org.webswing.directdraw.proto.StrokeProto stroke = 15;
    public static final int STROKE_FIELD_NUMBER = 15;
    private org.webswing.directdraw.proto.Directdraw.StrokeProto stroke_;
    /**
     * <code>optional .org.webswing.directdraw.proto.StrokeProto stroke = 15;</code>
     */
    public boolean hasStroke() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.StrokeProto stroke = 15;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.StrokeProto getStroke() {
      return stroke_;
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.StrokeProto stroke = 15;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.StrokeProtoOrBuilder getStrokeOrBuilder() {
      return stroke_;
    }

    // optional .org.webswing.directdraw.proto.CompositeProto composite = 16;
    public static final int COMPOSITE_FIELD_NUMBER = 16;
    private org.webswing.directdraw.proto.Directdraw.CompositeProto composite_;
    /**
     * <code>optional .org.webswing.directdraw.proto.CompositeProto composite = 16;</code>
     */
    public boolean hasComposite() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.CompositeProto composite = 16;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.CompositeProto getComposite() {
      return composite_;
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.CompositeProto composite = 16;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.CompositeProtoOrBuilder getCompositeOrBuilder() {
      return composite_;
    }

    // optional .org.webswing.directdraw.proto.TextureProto texture = 17;
    public static final int TEXTURE_FIELD_NUMBER = 17;
    private org.webswing.directdraw.proto.Directdraw.TextureProto texture_;
    /**
     * <code>optional .org.webswing.directdraw.proto.TextureProto texture = 17;</code>
     */
    public boolean hasTexture() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.TextureProto texture = 17;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.TextureProto getTexture() {
      return texture_;
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.TextureProto texture = 17;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.TextureProtoOrBuilder getTextureOrBuilder() {
      return texture_;
    }

    // optional .org.webswing.directdraw.proto.GlyphProto glyph = 18;
    public static final int GLYPH_FIELD_NUMBER = 18;
    private org.webswing.directdraw.proto.Directdraw.GlyphProto glyph_;
    /**
     * <code>optional .org.webswing.directdraw.proto.GlyphProto glyph = 18;</code>
     */
    public boolean hasGlyph() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.GlyphProto glyph = 18;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.GlyphProto getGlyph() {
      return glyph_;
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.GlyphProto glyph = 18;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.GlyphProtoOrBuilder getGlyphOrBuilder() {
      return glyph_;
    }

    // optional .org.webswing.directdraw.proto.CombinedProto combined = 19;
    public static final int COMBINED_FIELD_NUMBER = 19;
    private org.webswing.directdraw.proto.Directdraw.CombinedProto combined_;
    /**
     * <code>optional .org.webswing.directdraw.proto.CombinedProto combined = 19;</code>
     */
    public boolean hasCombined() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.CombinedProto combined = 19;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.CombinedProto getCombined() {
      return combined_;
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.CombinedProto combined = 19;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.CombinedProtoOrBuilder getCombinedOrBuilder() {
      return combined_;
    }

    private void initFields() {
      id_ = 0;
      color_ = org.webswing.directdraw.proto.Directdraw.ColorProto.getDefaultInstance();
      image_ = org.webswing.directdraw.proto.Directdraw.ImageProto.getDefaultInstance();
      transform_ = org.webswing.directdraw.proto.Directdraw.TransformProto.getDefaultInstance();
      string_ = "";
      path_ = org.webswing.directdraw.proto.Directdraw.PathProto.getDefaultInstance();
      font_ = org.webswing.directdraw.proto.Directdraw.FontProto.getDefaultInstance();
      linearGrad_ = org.webswing.directdraw.proto.Directdraw.LinearGradientProto.getDefaultInstance();
      radialGrad_ = org.webswing.directdraw.proto.Directdraw.RadialGradientProto.getDefaultInstance();
      points_ = org.webswing.directdraw.proto.Directdraw.PointsProto.getDefaultInstance();
      rectangle_ = org.webswing.directdraw.proto.Directdraw.RectangleProto.getDefaultInstance();
      ellipse_ = org.webswing.directdraw.proto.Directdraw.EllipseProto.getDefaultInstance();
      roundRectangle_ = org.webswing.directdraw.proto.Directdraw.RoundRectangleProto.getDefaultInstance();
      arc_ = org.webswing.directdraw.proto.Directdraw.ArcProto.getDefaultInstance();
      stroke_ = org.webswing.directdraw.proto.Directdraw.StrokeProto.getDefaultInstance();
      composite_ = org.webswing.directdraw.proto.Directdraw.CompositeProto.getDefaultInstance();
      texture_ = org.webswing.directdraw.proto.Directdraw.TextureProto.getDefaultInstance();
      glyph_ = org.webswing.directdraw.proto.Directdraw.GlyphProto.getDefaultInstance();
      combined_ = org.webswing.directdraw.proto.Directdraw.CombinedProto.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasColor()) {
        if (!getColor().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasImage()) {
        if (!getImage().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasPath()) {
        if (!getPath().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasFont()) {
        if (!getFont().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasLinearGrad()) {
        if (!getLinearGrad().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasRadialGrad()) {
        if (!getRadialGrad().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasRectangle()) {
        if (!getRectangle().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasEllipse()) {
        if (!getEllipse().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasRoundRectangle()) {
        if (!getRoundRectangle().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasArc()) {
        if (!getArc().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasStroke()) {
        if (!getStroke().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasComposite()) {
        if (!getComposite().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasTexture()) {
        if (!getTexture().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, color_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, image_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, transform_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(5, getStringBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, path_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, font_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(8, linearGrad_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(9, radialGrad_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(10, points_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(11, rectangle_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeMessage(12, ellipse_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeMessage(13, roundRectangle_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeMessage(14, arc_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeMessage(15, stroke_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeMessage(16, composite_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeMessage(17, texture_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeMessage(18, glyph_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeMessage(19, combined_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, color_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, image_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, transform_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, getStringBytes());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, path_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, font_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, linearGrad_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, radialGrad_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, points_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, rectangle_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, ellipse_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, roundRectangle_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, arc_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, stroke_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, composite_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, texture_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, glyph_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(19, combined_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.webswing.directdraw.proto.Directdraw.DrawConstantProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.DrawConstantProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.DrawConstantProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.DrawConstantProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.DrawConstantProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.DrawConstantProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.DrawConstantProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.DrawConstantProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.DrawConstantProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.DrawConstantProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.webswing.directdraw.proto.Directdraw.DrawConstantProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.webswing.directdraw.proto.DrawConstantProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.webswing.directdraw.proto.Directdraw.DrawConstantProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_DrawConstantProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_DrawConstantProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.webswing.directdraw.proto.Directdraw.DrawConstantProto.class, org.webswing.directdraw.proto.Directdraw.DrawConstantProto.Builder.class);
      }

      // Construct using org.webswing.directdraw.proto.Directdraw.DrawConstantProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getColorFieldBuilder();
          getImageFieldBuilder();
          getTransformFieldBuilder();
          getPathFieldBuilder();
          getFontFieldBuilder();
          getLinearGradFieldBuilder();
          getRadialGradFieldBuilder();
          getPointsFieldBuilder();
          getRectangleFieldBuilder();
          getEllipseFieldBuilder();
          getRoundRectangleFieldBuilder();
          getArcFieldBuilder();
          getStrokeFieldBuilder();
          getCompositeFieldBuilder();
          getTextureFieldBuilder();
          getGlyphFieldBuilder();
          getCombinedFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (colorBuilder_ == null) {
          color_ = org.webswing.directdraw.proto.Directdraw.ColorProto.getDefaultInstance();
        } else {
          colorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (imageBuilder_ == null) {
          image_ = org.webswing.directdraw.proto.Directdraw.ImageProto.getDefaultInstance();
        } else {
          imageBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (transformBuilder_ == null) {
          transform_ = org.webswing.directdraw.proto.Directdraw.TransformProto.getDefaultInstance();
        } else {
          transformBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        string_ = "";
        bitField0_ = (bitField0_ & ~0x00000010);
        if (pathBuilder_ == null) {
          path_ = org.webswing.directdraw.proto.Directdraw.PathProto.getDefaultInstance();
        } else {
          pathBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (fontBuilder_ == null) {
          font_ = org.webswing.directdraw.proto.Directdraw.FontProto.getDefaultInstance();
        } else {
          fontBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        if (linearGradBuilder_ == null) {
          linearGrad_ = org.webswing.directdraw.proto.Directdraw.LinearGradientProto.getDefaultInstance();
        } else {
          linearGradBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        if (radialGradBuilder_ == null) {
          radialGrad_ = org.webswing.directdraw.proto.Directdraw.RadialGradientProto.getDefaultInstance();
        } else {
          radialGradBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        if (pointsBuilder_ == null) {
          points_ = org.webswing.directdraw.proto.Directdraw.PointsProto.getDefaultInstance();
        } else {
          pointsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        if (rectangleBuilder_ == null) {
          rectangle_ = org.webswing.directdraw.proto.Directdraw.RectangleProto.getDefaultInstance();
        } else {
          rectangleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        if (ellipseBuilder_ == null) {
          ellipse_ = org.webswing.directdraw.proto.Directdraw.EllipseProto.getDefaultInstance();
        } else {
          ellipseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        if (roundRectangleBuilder_ == null) {
          roundRectangle_ = org.webswing.directdraw.proto.Directdraw.RoundRectangleProto.getDefaultInstance();
        } else {
          roundRectangleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        if (arcBuilder_ == null) {
          arc_ = org.webswing.directdraw.proto.Directdraw.ArcProto.getDefaultInstance();
        } else {
          arcBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        if (strokeBuilder_ == null) {
          stroke_ = org.webswing.directdraw.proto.Directdraw.StrokeProto.getDefaultInstance();
        } else {
          strokeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00004000);
        if (compositeBuilder_ == null) {
          composite_ = org.webswing.directdraw.proto.Directdraw.CompositeProto.getDefaultInstance();
        } else {
          compositeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00008000);
        if (textureBuilder_ == null) {
          texture_ = org.webswing.directdraw.proto.Directdraw.TextureProto.getDefaultInstance();
        } else {
          textureBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        if (glyphBuilder_ == null) {
          glyph_ = org.webswing.directdraw.proto.Directdraw.GlyphProto.getDefaultInstance();
        } else {
          glyphBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        if (combinedBuilder_ == null) {
          combined_ = org.webswing.directdraw.proto.Directdraw.CombinedProto.getDefaultInstance();
        } else {
          combinedBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00040000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_DrawConstantProto_descriptor;
      }

      public org.webswing.directdraw.proto.Directdraw.DrawConstantProto getDefaultInstanceForType() {
        return org.webswing.directdraw.proto.Directdraw.DrawConstantProto.getDefaultInstance();
      }

      public org.webswing.directdraw.proto.Directdraw.DrawConstantProto build() {
        org.webswing.directdraw.proto.Directdraw.DrawConstantProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.webswing.directdraw.proto.Directdraw.DrawConstantProto buildPartial() {
        org.webswing.directdraw.proto.Directdraw.DrawConstantProto result = new org.webswing.directdraw.proto.Directdraw.DrawConstantProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (colorBuilder_ == null) {
          result.color_ = color_;
        } else {
          result.color_ = colorBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (imageBuilder_ == null) {
          result.image_ = image_;
        } else {
          result.image_ = imageBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (transformBuilder_ == null) {
          result.transform_ = transform_;
        } else {
          result.transform_ = transformBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.string_ = string_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (pathBuilder_ == null) {
          result.path_ = path_;
        } else {
          result.path_ = pathBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (fontBuilder_ == null) {
          result.font_ = font_;
        } else {
          result.font_ = fontBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        if (linearGradBuilder_ == null) {
          result.linearGrad_ = linearGrad_;
        } else {
          result.linearGrad_ = linearGradBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        if (radialGradBuilder_ == null) {
          result.radialGrad_ = radialGrad_;
        } else {
          result.radialGrad_ = radialGradBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        if (pointsBuilder_ == null) {
          result.points_ = points_;
        } else {
          result.points_ = pointsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        if (rectangleBuilder_ == null) {
          result.rectangle_ = rectangle_;
        } else {
          result.rectangle_ = rectangleBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        if (ellipseBuilder_ == null) {
          result.ellipse_ = ellipse_;
        } else {
          result.ellipse_ = ellipseBuilder_.build();
        }
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        if (roundRectangleBuilder_ == null) {
          result.roundRectangle_ = roundRectangle_;
        } else {
          result.roundRectangle_ = roundRectangleBuilder_.build();
        }
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        if (arcBuilder_ == null) {
          result.arc_ = arc_;
        } else {
          result.arc_ = arcBuilder_.build();
        }
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        if (strokeBuilder_ == null) {
          result.stroke_ = stroke_;
        } else {
          result.stroke_ = strokeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        if (compositeBuilder_ == null) {
          result.composite_ = composite_;
        } else {
          result.composite_ = compositeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        if (textureBuilder_ == null) {
          result.texture_ = texture_;
        } else {
          result.texture_ = textureBuilder_.build();
        }
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        if (glyphBuilder_ == null) {
          result.glyph_ = glyph_;
        } else {
          result.glyph_ = glyphBuilder_.build();
        }
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        if (combinedBuilder_ == null) {
          result.combined_ = combined_;
        } else {
          result.combined_ = combinedBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.webswing.directdraw.proto.Directdraw.DrawConstantProto) {
          return mergeFrom((org.webswing.directdraw.proto.Directdraw.DrawConstantProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.webswing.directdraw.proto.Directdraw.DrawConstantProto other) {
        if (other == org.webswing.directdraw.proto.Directdraw.DrawConstantProto.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasColor()) {
          mergeColor(other.getColor());
        }
        if (other.hasImage()) {
          mergeImage(other.getImage());
        }
        if (other.hasTransform()) {
          mergeTransform(other.getTransform());
        }
        if (other.hasString()) {
          bitField0_ |= 0x00000010;
          string_ = other.string_;
          onChanged();
        }
        if (other.hasPath()) {
          mergePath(other.getPath());
        }
        if (other.hasFont()) {
          mergeFont(other.getFont());
        }
        if (other.hasLinearGrad()) {
          mergeLinearGrad(other.getLinearGrad());
        }
        if (other.hasRadialGrad()) {
          mergeRadialGrad(other.getRadialGrad());
        }
        if (other.hasPoints()) {
          mergePoints(other.getPoints());
        }
        if (other.hasRectangle()) {
          mergeRectangle(other.getRectangle());
        }
        if (other.hasEllipse()) {
          mergeEllipse(other.getEllipse());
        }
        if (other.hasRoundRectangle()) {
          mergeRoundRectangle(other.getRoundRectangle());
        }
        if (other.hasArc()) {
          mergeArc(other.getArc());
        }
        if (other.hasStroke()) {
          mergeStroke(other.getStroke());
        }
        if (other.hasComposite()) {
          mergeComposite(other.getComposite());
        }
        if (other.hasTexture()) {
          mergeTexture(other.getTexture());
        }
        if (other.hasGlyph()) {
          mergeGlyph(other.getGlyph());
        }
        if (other.hasCombined()) {
          mergeCombined(other.getCombined());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (hasColor()) {
          if (!getColor().isInitialized()) {
            
            return false;
          }
        }
        if (hasImage()) {
          if (!getImage().isInitialized()) {
            
            return false;
          }
        }
        if (hasPath()) {
          if (!getPath().isInitialized()) {
            
            return false;
          }
        }
        if (hasFont()) {
          if (!getFont().isInitialized()) {
            
            return false;
          }
        }
        if (hasLinearGrad()) {
          if (!getLinearGrad().isInitialized()) {
            
            return false;
          }
        }
        if (hasRadialGrad()) {
          if (!getRadialGrad().isInitialized()) {
            
            return false;
          }
        }
        if (hasRectangle()) {
          if (!getRectangle().isInitialized()) {
            
            return false;
          }
        }
        if (hasEllipse()) {
          if (!getEllipse().isInitialized()) {
            
            return false;
          }
        }
        if (hasRoundRectangle()) {
          if (!getRoundRectangle().isInitialized()) {
            
            return false;
          }
        }
        if (hasArc()) {
          if (!getArc().isInitialized()) {
            
            return false;
          }
        }
        if (hasStroke()) {
          if (!getStroke().isInitialized()) {
            
            return false;
          }
        }
        if (hasComposite()) {
          if (!getComposite().isInitialized()) {
            
            return false;
          }
        }
        if (hasTexture()) {
          if (!getTexture().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.webswing.directdraw.proto.Directdraw.DrawConstantProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.webswing.directdraw.proto.Directdraw.DrawConstantProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint32 id = 1;
      private int id_ ;
      /**
       * <code>required uint32 id = 1;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 id = 1;</code>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required uint32 id = 1;</code>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 id = 1;</code>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        onChanged();
        return this;
      }

      // optional .org.webswing.directdraw.proto.ColorProto color = 2;
      private org.webswing.directdraw.proto.Directdraw.ColorProto color_ = org.webswing.directdraw.proto.Directdraw.ColorProto.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.ColorProto, org.webswing.directdraw.proto.Directdraw.ColorProto.Builder, org.webswing.directdraw.proto.Directdraw.ColorProtoOrBuilder> colorBuilder_;
      /**
       * <code>optional .org.webswing.directdraw.proto.ColorProto color = 2;</code>
       */
      public boolean hasColor() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.ColorProto color = 2;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.ColorProto getColor() {
        if (colorBuilder_ == null) {
          return color_;
        } else {
          return colorBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.ColorProto color = 2;</code>
       */
      public Builder setColor(org.webswing.directdraw.proto.Directdraw.ColorProto value) {
        if (colorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          color_ = value;
          onChanged();
        } else {
          colorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.ColorProto color = 2;</code>
       */
      public Builder setColor(
          org.webswing.directdraw.proto.Directdraw.ColorProto.Builder builderForValue) {
        if (colorBuilder_ == null) {
          color_ = builderForValue.build();
          onChanged();
        } else {
          colorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.ColorProto color = 2;</code>
       */
      public Builder mergeColor(org.webswing.directdraw.proto.Directdraw.ColorProto value) {
        if (colorBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              color_ != org.webswing.directdraw.proto.Directdraw.ColorProto.getDefaultInstance()) {
            color_ =
              org.webswing.directdraw.proto.Directdraw.ColorProto.newBuilder(color_).mergeFrom(value).buildPartial();
          } else {
            color_ = value;
          }
          onChanged();
        } else {
          colorBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.ColorProto color = 2;</code>
       */
      public Builder clearColor() {
        if (colorBuilder_ == null) {
          color_ = org.webswing.directdraw.proto.Directdraw.ColorProto.getDefaultInstance();
          onChanged();
        } else {
          colorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.ColorProto color = 2;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.ColorProto.Builder getColorBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getColorFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.ColorProto color = 2;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.ColorProtoOrBuilder getColorOrBuilder() {
        if (colorBuilder_ != null) {
          return colorBuilder_.getMessageOrBuilder();
        } else {
          return color_;
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.ColorProto color = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.ColorProto, org.webswing.directdraw.proto.Directdraw.ColorProto.Builder, org.webswing.directdraw.proto.Directdraw.ColorProtoOrBuilder> 
          getColorFieldBuilder() {
        if (colorBuilder_ == null) {
          colorBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.webswing.directdraw.proto.Directdraw.ColorProto, org.webswing.directdraw.proto.Directdraw.ColorProto.Builder, org.webswing.directdraw.proto.Directdraw.ColorProtoOrBuilder>(
                  color_,
                  getParentForChildren(),
                  isClean());
          color_ = null;
        }
        return colorBuilder_;
      }

      // optional .org.webswing.directdraw.proto.ImageProto image = 3;
      private org.webswing.directdraw.proto.Directdraw.ImageProto image_ = org.webswing.directdraw.proto.Directdraw.ImageProto.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.ImageProto, org.webswing.directdraw.proto.Directdraw.ImageProto.Builder, org.webswing.directdraw.proto.Directdraw.ImageProtoOrBuilder> imageBuilder_;
      /**
       * <code>optional .org.webswing.directdraw.proto.ImageProto image = 3;</code>
       */
      public boolean hasImage() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.ImageProto image = 3;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.ImageProto getImage() {
        if (imageBuilder_ == null) {
          return image_;
        } else {
          return imageBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.ImageProto image = 3;</code>
       */
      public Builder setImage(org.webswing.directdraw.proto.Directdraw.ImageProto value) {
        if (imageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          image_ = value;
          onChanged();
        } else {
          imageBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.ImageProto image = 3;</code>
       */
      public Builder setImage(
          org.webswing.directdraw.proto.Directdraw.ImageProto.Builder builderForValue) {
        if (imageBuilder_ == null) {
          image_ = builderForValue.build();
          onChanged();
        } else {
          imageBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.ImageProto image = 3;</code>
       */
      public Builder mergeImage(org.webswing.directdraw.proto.Directdraw.ImageProto value) {
        if (imageBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              image_ != org.webswing.directdraw.proto.Directdraw.ImageProto.getDefaultInstance()) {
            image_ =
              org.webswing.directdraw.proto.Directdraw.ImageProto.newBuilder(image_).mergeFrom(value).buildPartial();
          } else {
            image_ = value;
          }
          onChanged();
        } else {
          imageBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.ImageProto image = 3;</code>
       */
      public Builder clearImage() {
        if (imageBuilder_ == null) {
          image_ = org.webswing.directdraw.proto.Directdraw.ImageProto.getDefaultInstance();
          onChanged();
        } else {
          imageBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.ImageProto image = 3;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.ImageProto.Builder getImageBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getImageFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.ImageProto image = 3;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.ImageProtoOrBuilder getImageOrBuilder() {
        if (imageBuilder_ != null) {
          return imageBuilder_.getMessageOrBuilder();
        } else {
          return image_;
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.ImageProto image = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.ImageProto, org.webswing.directdraw.proto.Directdraw.ImageProto.Builder, org.webswing.directdraw.proto.Directdraw.ImageProtoOrBuilder> 
          getImageFieldBuilder() {
        if (imageBuilder_ == null) {
          imageBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.webswing.directdraw.proto.Directdraw.ImageProto, org.webswing.directdraw.proto.Directdraw.ImageProto.Builder, org.webswing.directdraw.proto.Directdraw.ImageProtoOrBuilder>(
                  image_,
                  getParentForChildren(),
                  isClean());
          image_ = null;
        }
        return imageBuilder_;
      }

      // optional .org.webswing.directdraw.proto.TransformProto transform = 4;
      private org.webswing.directdraw.proto.Directdraw.TransformProto transform_ = org.webswing.directdraw.proto.Directdraw.TransformProto.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.TransformProto, org.webswing.directdraw.proto.Directdraw.TransformProto.Builder, org.webswing.directdraw.proto.Directdraw.TransformProtoOrBuilder> transformBuilder_;
      /**
       * <code>optional .org.webswing.directdraw.proto.TransformProto transform = 4;</code>
       */
      public boolean hasTransform() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.TransformProto transform = 4;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.TransformProto getTransform() {
        if (transformBuilder_ == null) {
          return transform_;
        } else {
          return transformBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.TransformProto transform = 4;</code>
       */
      public Builder setTransform(org.webswing.directdraw.proto.Directdraw.TransformProto value) {
        if (transformBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          transform_ = value;
          onChanged();
        } else {
          transformBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.TransformProto transform = 4;</code>
       */
      public Builder setTransform(
          org.webswing.directdraw.proto.Directdraw.TransformProto.Builder builderForValue) {
        if (transformBuilder_ == null) {
          transform_ = builderForValue.build();
          onChanged();
        } else {
          transformBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.TransformProto transform = 4;</code>
       */
      public Builder mergeTransform(org.webswing.directdraw.proto.Directdraw.TransformProto value) {
        if (transformBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              transform_ != org.webswing.directdraw.proto.Directdraw.TransformProto.getDefaultInstance()) {
            transform_ =
              org.webswing.directdraw.proto.Directdraw.TransformProto.newBuilder(transform_).mergeFrom(value).buildPartial();
          } else {
            transform_ = value;
          }
          onChanged();
        } else {
          transformBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.TransformProto transform = 4;</code>
       */
      public Builder clearTransform() {
        if (transformBuilder_ == null) {
          transform_ = org.webswing.directdraw.proto.Directdraw.TransformProto.getDefaultInstance();
          onChanged();
        } else {
          transformBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.TransformProto transform = 4;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.TransformProto.Builder getTransformBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getTransformFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.TransformProto transform = 4;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.TransformProtoOrBuilder getTransformOrBuilder() {
        if (transformBuilder_ != null) {
          return transformBuilder_.getMessageOrBuilder();
        } else {
          return transform_;
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.TransformProto transform = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.TransformProto, org.webswing.directdraw.proto.Directdraw.TransformProto.Builder, org.webswing.directdraw.proto.Directdraw.TransformProtoOrBuilder> 
          getTransformFieldBuilder() {
        if (transformBuilder_ == null) {
          transformBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.webswing.directdraw.proto.Directdraw.TransformProto, org.webswing.directdraw.proto.Directdraw.TransformProto.Builder, org.webswing.directdraw.proto.Directdraw.TransformProtoOrBuilder>(
                  transform_,
                  getParentForChildren(),
                  isClean());
          transform_ = null;
        }
        return transformBuilder_;
      }

      // optional string string = 5;
      private java.lang.Object string_ = "";
      /**
       * <code>optional string string = 5;</code>
       */
      public boolean hasString() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional string string = 5;</code>
       */
      public java.lang.String getString() {
        java.lang.Object ref = string_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          string_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string string = 5;</code>
       */
      public com.google.protobuf.ByteString
          getStringBytes() {
        java.lang.Object ref = string_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          string_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string string = 5;</code>
       */
      public Builder setString(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        string_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string string = 5;</code>
       */
      public Builder clearString() {
        bitField0_ = (bitField0_ & ~0x00000010);
        string_ = getDefaultInstance().getString();
        onChanged();
        return this;
      }
      /**
       * <code>optional string string = 5;</code>
       */
      public Builder setStringBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        string_ = value;
        onChanged();
        return this;
      }

      // optional .org.webswing.directdraw.proto.PathProto path = 6;
      private org.webswing.directdraw.proto.Directdraw.PathProto path_ = org.webswing.directdraw.proto.Directdraw.PathProto.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.PathProto, org.webswing.directdraw.proto.Directdraw.PathProto.Builder, org.webswing.directdraw.proto.Directdraw.PathProtoOrBuilder> pathBuilder_;
      /**
       * <code>optional .org.webswing.directdraw.proto.PathProto path = 6;</code>
       */
      public boolean hasPath() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.PathProto path = 6;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.PathProto getPath() {
        if (pathBuilder_ == null) {
          return path_;
        } else {
          return pathBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.PathProto path = 6;</code>
       */
      public Builder setPath(org.webswing.directdraw.proto.Directdraw.PathProto value) {
        if (pathBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          path_ = value;
          onChanged();
        } else {
          pathBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.PathProto path = 6;</code>
       */
      public Builder setPath(
          org.webswing.directdraw.proto.Directdraw.PathProto.Builder builderForValue) {
        if (pathBuilder_ == null) {
          path_ = builderForValue.build();
          onChanged();
        } else {
          pathBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.PathProto path = 6;</code>
       */
      public Builder mergePath(org.webswing.directdraw.proto.Directdraw.PathProto value) {
        if (pathBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              path_ != org.webswing.directdraw.proto.Directdraw.PathProto.getDefaultInstance()) {
            path_ =
              org.webswing.directdraw.proto.Directdraw.PathProto.newBuilder(path_).mergeFrom(value).buildPartial();
          } else {
            path_ = value;
          }
          onChanged();
        } else {
          pathBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.PathProto path = 6;</code>
       */
      public Builder clearPath() {
        if (pathBuilder_ == null) {
          path_ = org.webswing.directdraw.proto.Directdraw.PathProto.getDefaultInstance();
          onChanged();
        } else {
          pathBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.PathProto path = 6;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.PathProto.Builder getPathBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getPathFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.PathProto path = 6;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.PathProtoOrBuilder getPathOrBuilder() {
        if (pathBuilder_ != null) {
          return pathBuilder_.getMessageOrBuilder();
        } else {
          return path_;
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.PathProto path = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.PathProto, org.webswing.directdraw.proto.Directdraw.PathProto.Builder, org.webswing.directdraw.proto.Directdraw.PathProtoOrBuilder> 
          getPathFieldBuilder() {
        if (pathBuilder_ == null) {
          pathBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.webswing.directdraw.proto.Directdraw.PathProto, org.webswing.directdraw.proto.Directdraw.PathProto.Builder, org.webswing.directdraw.proto.Directdraw.PathProtoOrBuilder>(
                  path_,
                  getParentForChildren(),
                  isClean());
          path_ = null;
        }
        return pathBuilder_;
      }

      // optional .org.webswing.directdraw.proto.FontProto font = 7;
      private org.webswing.directdraw.proto.Directdraw.FontProto font_ = org.webswing.directdraw.proto.Directdraw.FontProto.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.FontProto, org.webswing.directdraw.proto.Directdraw.FontProto.Builder, org.webswing.directdraw.proto.Directdraw.FontProtoOrBuilder> fontBuilder_;
      /**
       * <code>optional .org.webswing.directdraw.proto.FontProto font = 7;</code>
       */
      public boolean hasFont() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.FontProto font = 7;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.FontProto getFont() {
        if (fontBuilder_ == null) {
          return font_;
        } else {
          return fontBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.FontProto font = 7;</code>
       */
      public Builder setFont(org.webswing.directdraw.proto.Directdraw.FontProto value) {
        if (fontBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          font_ = value;
          onChanged();
        } else {
          fontBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.FontProto font = 7;</code>
       */
      public Builder setFont(
          org.webswing.directdraw.proto.Directdraw.FontProto.Builder builderForValue) {
        if (fontBuilder_ == null) {
          font_ = builderForValue.build();
          onChanged();
        } else {
          fontBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.FontProto font = 7;</code>
       */
      public Builder mergeFont(org.webswing.directdraw.proto.Directdraw.FontProto value) {
        if (fontBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              font_ != org.webswing.directdraw.proto.Directdraw.FontProto.getDefaultInstance()) {
            font_ =
              org.webswing.directdraw.proto.Directdraw.FontProto.newBuilder(font_).mergeFrom(value).buildPartial();
          } else {
            font_ = value;
          }
          onChanged();
        } else {
          fontBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.FontProto font = 7;</code>
       */
      public Builder clearFont() {
        if (fontBuilder_ == null) {
          font_ = org.webswing.directdraw.proto.Directdraw.FontProto.getDefaultInstance();
          onChanged();
        } else {
          fontBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.FontProto font = 7;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.FontProto.Builder getFontBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getFontFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.FontProto font = 7;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.FontProtoOrBuilder getFontOrBuilder() {
        if (fontBuilder_ != null) {
          return fontBuilder_.getMessageOrBuilder();
        } else {
          return font_;
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.FontProto font = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.FontProto, org.webswing.directdraw.proto.Directdraw.FontProto.Builder, org.webswing.directdraw.proto.Directdraw.FontProtoOrBuilder> 
          getFontFieldBuilder() {
        if (fontBuilder_ == null) {
          fontBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.webswing.directdraw.proto.Directdraw.FontProto, org.webswing.directdraw.proto.Directdraw.FontProto.Builder, org.webswing.directdraw.proto.Directdraw.FontProtoOrBuilder>(
                  font_,
                  getParentForChildren(),
                  isClean());
          font_ = null;
        }
        return fontBuilder_;
      }

      // optional .org.webswing.directdraw.proto.LinearGradientProto linearGrad = 8;
      private org.webswing.directdraw.proto.Directdraw.LinearGradientProto linearGrad_ = org.webswing.directdraw.proto.Directdraw.LinearGradientProto.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.LinearGradientProto, org.webswing.directdraw.proto.Directdraw.LinearGradientProto.Builder, org.webswing.directdraw.proto.Directdraw.LinearGradientProtoOrBuilder> linearGradBuilder_;
      /**
       * <code>optional .org.webswing.directdraw.proto.LinearGradientProto linearGrad = 8;</code>
       */
      public boolean hasLinearGrad() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.LinearGradientProto linearGrad = 8;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.LinearGradientProto getLinearGrad() {
        if (linearGradBuilder_ == null) {
          return linearGrad_;
        } else {
          return linearGradBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.LinearGradientProto linearGrad = 8;</code>
       */
      public Builder setLinearGrad(org.webswing.directdraw.proto.Directdraw.LinearGradientProto value) {
        if (linearGradBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          linearGrad_ = value;
          onChanged();
        } else {
          linearGradBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.LinearGradientProto linearGrad = 8;</code>
       */
      public Builder setLinearGrad(
          org.webswing.directdraw.proto.Directdraw.LinearGradientProto.Builder builderForValue) {
        if (linearGradBuilder_ == null) {
          linearGrad_ = builderForValue.build();
          onChanged();
        } else {
          linearGradBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.LinearGradientProto linearGrad = 8;</code>
       */
      public Builder mergeLinearGrad(org.webswing.directdraw.proto.Directdraw.LinearGradientProto value) {
        if (linearGradBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              linearGrad_ != org.webswing.directdraw.proto.Directdraw.LinearGradientProto.getDefaultInstance()) {
            linearGrad_ =
              org.webswing.directdraw.proto.Directdraw.LinearGradientProto.newBuilder(linearGrad_).mergeFrom(value).buildPartial();
          } else {
            linearGrad_ = value;
          }
          onChanged();
        } else {
          linearGradBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.LinearGradientProto linearGrad = 8;</code>
       */
      public Builder clearLinearGrad() {
        if (linearGradBuilder_ == null) {
          linearGrad_ = org.webswing.directdraw.proto.Directdraw.LinearGradientProto.getDefaultInstance();
          onChanged();
        } else {
          linearGradBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.LinearGradientProto linearGrad = 8;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.LinearGradientProto.Builder getLinearGradBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getLinearGradFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.LinearGradientProto linearGrad = 8;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.LinearGradientProtoOrBuilder getLinearGradOrBuilder() {
        if (linearGradBuilder_ != null) {
          return linearGradBuilder_.getMessageOrBuilder();
        } else {
          return linearGrad_;
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.LinearGradientProto linearGrad = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.LinearGradientProto, org.webswing.directdraw.proto.Directdraw.LinearGradientProto.Builder, org.webswing.directdraw.proto.Directdraw.LinearGradientProtoOrBuilder> 
          getLinearGradFieldBuilder() {
        if (linearGradBuilder_ == null) {
          linearGradBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.webswing.directdraw.proto.Directdraw.LinearGradientProto, org.webswing.directdraw.proto.Directdraw.LinearGradientProto.Builder, org.webswing.directdraw.proto.Directdraw.LinearGradientProtoOrBuilder>(
                  linearGrad_,
                  getParentForChildren(),
                  isClean());
          linearGrad_ = null;
        }
        return linearGradBuilder_;
      }

      // optional .org.webswing.directdraw.proto.RadialGradientProto radialGrad = 9;
      private org.webswing.directdraw.proto.Directdraw.RadialGradientProto radialGrad_ = org.webswing.directdraw.proto.Directdraw.RadialGradientProto.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.RadialGradientProto, org.webswing.directdraw.proto.Directdraw.RadialGradientProto.Builder, org.webswing.directdraw.proto.Directdraw.RadialGradientProtoOrBuilder> radialGradBuilder_;
      /**
       * <code>optional .org.webswing.directdraw.proto.RadialGradientProto radialGrad = 9;</code>
       */
      public boolean hasRadialGrad() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.RadialGradientProto radialGrad = 9;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.RadialGradientProto getRadialGrad() {
        if (radialGradBuilder_ == null) {
          return radialGrad_;
        } else {
          return radialGradBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.RadialGradientProto radialGrad = 9;</code>
       */
      public Builder setRadialGrad(org.webswing.directdraw.proto.Directdraw.RadialGradientProto value) {
        if (radialGradBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          radialGrad_ = value;
          onChanged();
        } else {
          radialGradBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.RadialGradientProto radialGrad = 9;</code>
       */
      public Builder setRadialGrad(
          org.webswing.directdraw.proto.Directdraw.RadialGradientProto.Builder builderForValue) {
        if (radialGradBuilder_ == null) {
          radialGrad_ = builderForValue.build();
          onChanged();
        } else {
          radialGradBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.RadialGradientProto radialGrad = 9;</code>
       */
      public Builder mergeRadialGrad(org.webswing.directdraw.proto.Directdraw.RadialGradientProto value) {
        if (radialGradBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100) &&
              radialGrad_ != org.webswing.directdraw.proto.Directdraw.RadialGradientProto.getDefaultInstance()) {
            radialGrad_ =
              org.webswing.directdraw.proto.Directdraw.RadialGradientProto.newBuilder(radialGrad_).mergeFrom(value).buildPartial();
          } else {
            radialGrad_ = value;
          }
          onChanged();
        } else {
          radialGradBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.RadialGradientProto radialGrad = 9;</code>
       */
      public Builder clearRadialGrad() {
        if (radialGradBuilder_ == null) {
          radialGrad_ = org.webswing.directdraw.proto.Directdraw.RadialGradientProto.getDefaultInstance();
          onChanged();
        } else {
          radialGradBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.RadialGradientProto radialGrad = 9;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.RadialGradientProto.Builder getRadialGradBuilder() {
        bitField0_ |= 0x00000100;
        onChanged();
        return getRadialGradFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.RadialGradientProto radialGrad = 9;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.RadialGradientProtoOrBuilder getRadialGradOrBuilder() {
        if (radialGradBuilder_ != null) {
          return radialGradBuilder_.getMessageOrBuilder();
        } else {
          return radialGrad_;
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.RadialGradientProto radialGrad = 9;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.RadialGradientProto, org.webswing.directdraw.proto.Directdraw.RadialGradientProto.Builder, org.webswing.directdraw.proto.Directdraw.RadialGradientProtoOrBuilder> 
          getRadialGradFieldBuilder() {
        if (radialGradBuilder_ == null) {
          radialGradBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.webswing.directdraw.proto.Directdraw.RadialGradientProto, org.webswing.directdraw.proto.Directdraw.RadialGradientProto.Builder, org.webswing.directdraw.proto.Directdraw.RadialGradientProtoOrBuilder>(
                  radialGrad_,
                  getParentForChildren(),
                  isClean());
          radialGrad_ = null;
        }
        return radialGradBuilder_;
      }

      // optional .org.webswing.directdraw.proto.PointsProto points = 10;
      private org.webswing.directdraw.proto.Directdraw.PointsProto points_ = org.webswing.directdraw.proto.Directdraw.PointsProto.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.PointsProto, org.webswing.directdraw.proto.Directdraw.PointsProto.Builder, org.webswing.directdraw.proto.Directdraw.PointsProtoOrBuilder> pointsBuilder_;
      /**
       * <code>optional .org.webswing.directdraw.proto.PointsProto points = 10;</code>
       */
      public boolean hasPoints() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.PointsProto points = 10;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.PointsProto getPoints() {
        if (pointsBuilder_ == null) {
          return points_;
        } else {
          return pointsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.PointsProto points = 10;</code>
       */
      public Builder setPoints(org.webswing.directdraw.proto.Directdraw.PointsProto value) {
        if (pointsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          points_ = value;
          onChanged();
        } else {
          pointsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.PointsProto points = 10;</code>
       */
      public Builder setPoints(
          org.webswing.directdraw.proto.Directdraw.PointsProto.Builder builderForValue) {
        if (pointsBuilder_ == null) {
          points_ = builderForValue.build();
          onChanged();
        } else {
          pointsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.PointsProto points = 10;</code>
       */
      public Builder mergePoints(org.webswing.directdraw.proto.Directdraw.PointsProto value) {
        if (pointsBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200) &&
              points_ != org.webswing.directdraw.proto.Directdraw.PointsProto.getDefaultInstance()) {
            points_ =
              org.webswing.directdraw.proto.Directdraw.PointsProto.newBuilder(points_).mergeFrom(value).buildPartial();
          } else {
            points_ = value;
          }
          onChanged();
        } else {
          pointsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.PointsProto points = 10;</code>
       */
      public Builder clearPoints() {
        if (pointsBuilder_ == null) {
          points_ = org.webswing.directdraw.proto.Directdraw.PointsProto.getDefaultInstance();
          onChanged();
        } else {
          pointsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.PointsProto points = 10;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.PointsProto.Builder getPointsBuilder() {
        bitField0_ |= 0x00000200;
        onChanged();
        return getPointsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.PointsProto points = 10;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.PointsProtoOrBuilder getPointsOrBuilder() {
        if (pointsBuilder_ != null) {
          return pointsBuilder_.getMessageOrBuilder();
        } else {
          return points_;
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.PointsProto points = 10;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.PointsProto, org.webswing.directdraw.proto.Directdraw.PointsProto.Builder, org.webswing.directdraw.proto.Directdraw.PointsProtoOrBuilder> 
          getPointsFieldBuilder() {
        if (pointsBuilder_ == null) {
          pointsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.webswing.directdraw.proto.Directdraw.PointsProto, org.webswing.directdraw.proto.Directdraw.PointsProto.Builder, org.webswing.directdraw.proto.Directdraw.PointsProtoOrBuilder>(
                  points_,
                  getParentForChildren(),
                  isClean());
          points_ = null;
        }
        return pointsBuilder_;
      }

      // optional .org.webswing.directdraw.proto.RectangleProto rectangle = 11;
      private org.webswing.directdraw.proto.Directdraw.RectangleProto rectangle_ = org.webswing.directdraw.proto.Directdraw.RectangleProto.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.RectangleProto, org.webswing.directdraw.proto.Directdraw.RectangleProto.Builder, org.webswing.directdraw.proto.Directdraw.RectangleProtoOrBuilder> rectangleBuilder_;
      /**
       * <code>optional .org.webswing.directdraw.proto.RectangleProto rectangle = 11;</code>
       */
      public boolean hasRectangle() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.RectangleProto rectangle = 11;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.RectangleProto getRectangle() {
        if (rectangleBuilder_ == null) {
          return rectangle_;
        } else {
          return rectangleBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.RectangleProto rectangle = 11;</code>
       */
      public Builder setRectangle(org.webswing.directdraw.proto.Directdraw.RectangleProto value) {
        if (rectangleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          rectangle_ = value;
          onChanged();
        } else {
          rectangleBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.RectangleProto rectangle = 11;</code>
       */
      public Builder setRectangle(
          org.webswing.directdraw.proto.Directdraw.RectangleProto.Builder builderForValue) {
        if (rectangleBuilder_ == null) {
          rectangle_ = builderForValue.build();
          onChanged();
        } else {
          rectangleBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.RectangleProto rectangle = 11;</code>
       */
      public Builder mergeRectangle(org.webswing.directdraw.proto.Directdraw.RectangleProto value) {
        if (rectangleBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400) &&
              rectangle_ != org.webswing.directdraw.proto.Directdraw.RectangleProto.getDefaultInstance()) {
            rectangle_ =
              org.webswing.directdraw.proto.Directdraw.RectangleProto.newBuilder(rectangle_).mergeFrom(value).buildPartial();
          } else {
            rectangle_ = value;
          }
          onChanged();
        } else {
          rectangleBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.RectangleProto rectangle = 11;</code>
       */
      public Builder clearRectangle() {
        if (rectangleBuilder_ == null) {
          rectangle_ = org.webswing.directdraw.proto.Directdraw.RectangleProto.getDefaultInstance();
          onChanged();
        } else {
          rectangleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.RectangleProto rectangle = 11;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.RectangleProto.Builder getRectangleBuilder() {
        bitField0_ |= 0x00000400;
        onChanged();
        return getRectangleFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.RectangleProto rectangle = 11;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.RectangleProtoOrBuilder getRectangleOrBuilder() {
        if (rectangleBuilder_ != null) {
          return rectangleBuilder_.getMessageOrBuilder();
        } else {
          return rectangle_;
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.RectangleProto rectangle = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.RectangleProto, org.webswing.directdraw.proto.Directdraw.RectangleProto.Builder, org.webswing.directdraw.proto.Directdraw.RectangleProtoOrBuilder> 
          getRectangleFieldBuilder() {
        if (rectangleBuilder_ == null) {
          rectangleBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.webswing.directdraw.proto.Directdraw.RectangleProto, org.webswing.directdraw.proto.Directdraw.RectangleProto.Builder, org.webswing.directdraw.proto.Directdraw.RectangleProtoOrBuilder>(
                  rectangle_,
                  getParentForChildren(),
                  isClean());
          rectangle_ = null;
        }
        return rectangleBuilder_;
      }

      // optional .org.webswing.directdraw.proto.EllipseProto ellipse = 12;
      private org.webswing.directdraw.proto.Directdraw.EllipseProto ellipse_ = org.webswing.directdraw.proto.Directdraw.EllipseProto.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.EllipseProto, org.webswing.directdraw.proto.Directdraw.EllipseProto.Builder, org.webswing.directdraw.proto.Directdraw.EllipseProtoOrBuilder> ellipseBuilder_;
      /**
       * <code>optional .org.webswing.directdraw.proto.EllipseProto ellipse = 12;</code>
       */
      public boolean hasEllipse() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.EllipseProto ellipse = 12;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.EllipseProto getEllipse() {
        if (ellipseBuilder_ == null) {
          return ellipse_;
        } else {
          return ellipseBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.EllipseProto ellipse = 12;</code>
       */
      public Builder setEllipse(org.webswing.directdraw.proto.Directdraw.EllipseProto value) {
        if (ellipseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ellipse_ = value;
          onChanged();
        } else {
          ellipseBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.EllipseProto ellipse = 12;</code>
       */
      public Builder setEllipse(
          org.webswing.directdraw.proto.Directdraw.EllipseProto.Builder builderForValue) {
        if (ellipseBuilder_ == null) {
          ellipse_ = builderForValue.build();
          onChanged();
        } else {
          ellipseBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.EllipseProto ellipse = 12;</code>
       */
      public Builder mergeEllipse(org.webswing.directdraw.proto.Directdraw.EllipseProto value) {
        if (ellipseBuilder_ == null) {
          if (((bitField0_ & 0x00000800) == 0x00000800) &&
              ellipse_ != org.webswing.directdraw.proto.Directdraw.EllipseProto.getDefaultInstance()) {
            ellipse_ =
              org.webswing.directdraw.proto.Directdraw.EllipseProto.newBuilder(ellipse_).mergeFrom(value).buildPartial();
          } else {
            ellipse_ = value;
          }
          onChanged();
        } else {
          ellipseBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.EllipseProto ellipse = 12;</code>
       */
      public Builder clearEllipse() {
        if (ellipseBuilder_ == null) {
          ellipse_ = org.webswing.directdraw.proto.Directdraw.EllipseProto.getDefaultInstance();
          onChanged();
        } else {
          ellipseBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.EllipseProto ellipse = 12;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.EllipseProto.Builder getEllipseBuilder() {
        bitField0_ |= 0x00000800;
        onChanged();
        return getEllipseFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.EllipseProto ellipse = 12;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.EllipseProtoOrBuilder getEllipseOrBuilder() {
        if (ellipseBuilder_ != null) {
          return ellipseBuilder_.getMessageOrBuilder();
        } else {
          return ellipse_;
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.EllipseProto ellipse = 12;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.EllipseProto, org.webswing.directdraw.proto.Directdraw.EllipseProto.Builder, org.webswing.directdraw.proto.Directdraw.EllipseProtoOrBuilder> 
          getEllipseFieldBuilder() {
        if (ellipseBuilder_ == null) {
          ellipseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.webswing.directdraw.proto.Directdraw.EllipseProto, org.webswing.directdraw.proto.Directdraw.EllipseProto.Builder, org.webswing.directdraw.proto.Directdraw.EllipseProtoOrBuilder>(
                  ellipse_,
                  getParentForChildren(),
                  isClean());
          ellipse_ = null;
        }
        return ellipseBuilder_;
      }

      // optional .org.webswing.directdraw.proto.RoundRectangleProto roundRectangle = 13;
      private org.webswing.directdraw.proto.Directdraw.RoundRectangleProto roundRectangle_ = org.webswing.directdraw.proto.Directdraw.RoundRectangleProto.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.RoundRectangleProto, org.webswing.directdraw.proto.Directdraw.RoundRectangleProto.Builder, org.webswing.directdraw.proto.Directdraw.RoundRectangleProtoOrBuilder> roundRectangleBuilder_;
      /**
       * <code>optional .org.webswing.directdraw.proto.RoundRectangleProto roundRectangle = 13;</code>
       */
      public boolean hasRoundRectangle() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.RoundRectangleProto roundRectangle = 13;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.RoundRectangleProto getRoundRectangle() {
        if (roundRectangleBuilder_ == null) {
          return roundRectangle_;
        } else {
          return roundRectangleBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.RoundRectangleProto roundRectangle = 13;</code>
       */
      public Builder setRoundRectangle(org.webswing.directdraw.proto.Directdraw.RoundRectangleProto value) {
        if (roundRectangleBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          roundRectangle_ = value;
          onChanged();
        } else {
          roundRectangleBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.RoundRectangleProto roundRectangle = 13;</code>
       */
      public Builder setRoundRectangle(
          org.webswing.directdraw.proto.Directdraw.RoundRectangleProto.Builder builderForValue) {
        if (roundRectangleBuilder_ == null) {
          roundRectangle_ = builderForValue.build();
          onChanged();
        } else {
          roundRectangleBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.RoundRectangleProto roundRectangle = 13;</code>
       */
      public Builder mergeRoundRectangle(org.webswing.directdraw.proto.Directdraw.RoundRectangleProto value) {
        if (roundRectangleBuilder_ == null) {
          if (((bitField0_ & 0x00001000) == 0x00001000) &&
              roundRectangle_ != org.webswing.directdraw.proto.Directdraw.RoundRectangleProto.getDefaultInstance()) {
            roundRectangle_ =
              org.webswing.directdraw.proto.Directdraw.RoundRectangleProto.newBuilder(roundRectangle_).mergeFrom(value).buildPartial();
          } else {
            roundRectangle_ = value;
          }
          onChanged();
        } else {
          roundRectangleBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.RoundRectangleProto roundRectangle = 13;</code>
       */
      public Builder clearRoundRectangle() {
        if (roundRectangleBuilder_ == null) {
          roundRectangle_ = org.webswing.directdraw.proto.Directdraw.RoundRectangleProto.getDefaultInstance();
          onChanged();
        } else {
          roundRectangleBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.RoundRectangleProto roundRectangle = 13;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.RoundRectangleProto.Builder getRoundRectangleBuilder() {
        bitField0_ |= 0x00001000;
        onChanged();
        return getRoundRectangleFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.RoundRectangleProto roundRectangle = 13;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.RoundRectangleProtoOrBuilder getRoundRectangleOrBuilder() {
        if (roundRectangleBuilder_ != null) {
          return roundRectangleBuilder_.getMessageOrBuilder();
        } else {
          return roundRectangle_;
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.RoundRectangleProto roundRectangle = 13;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.RoundRectangleProto, org.webswing.directdraw.proto.Directdraw.RoundRectangleProto.Builder, org.webswing.directdraw.proto.Directdraw.RoundRectangleProtoOrBuilder> 
          getRoundRectangleFieldBuilder() {
        if (roundRectangleBuilder_ == null) {
          roundRectangleBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.webswing.directdraw.proto.Directdraw.RoundRectangleProto, org.webswing.directdraw.proto.Directdraw.RoundRectangleProto.Builder, org.webswing.directdraw.proto.Directdraw.RoundRectangleProtoOrBuilder>(
                  roundRectangle_,
                  getParentForChildren(),
                  isClean());
          roundRectangle_ = null;
        }
        return roundRectangleBuilder_;
      }

      // optional .org.webswing.directdraw.proto.ArcProto arc = 14;
      private org.webswing.directdraw.proto.Directdraw.ArcProto arc_ = org.webswing.directdraw.proto.Directdraw.ArcProto.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.ArcProto, org.webswing.directdraw.proto.Directdraw.ArcProto.Builder, org.webswing.directdraw.proto.Directdraw.ArcProtoOrBuilder> arcBuilder_;
      /**
       * <code>optional .org.webswing.directdraw.proto.ArcProto arc = 14;</code>
       */
      public boolean hasArc() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.ArcProto arc = 14;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.ArcProto getArc() {
        if (arcBuilder_ == null) {
          return arc_;
        } else {
          return arcBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.ArcProto arc = 14;</code>
       */
      public Builder setArc(org.webswing.directdraw.proto.Directdraw.ArcProto value) {
        if (arcBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          arc_ = value;
          onChanged();
        } else {
          arcBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.ArcProto arc = 14;</code>
       */
      public Builder setArc(
          org.webswing.directdraw.proto.Directdraw.ArcProto.Builder builderForValue) {
        if (arcBuilder_ == null) {
          arc_ = builderForValue.build();
          onChanged();
        } else {
          arcBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.ArcProto arc = 14;</code>
       */
      public Builder mergeArc(org.webswing.directdraw.proto.Directdraw.ArcProto value) {
        if (arcBuilder_ == null) {
          if (((bitField0_ & 0x00002000) == 0x00002000) &&
              arc_ != org.webswing.directdraw.proto.Directdraw.ArcProto.getDefaultInstance()) {
            arc_ =
              org.webswing.directdraw.proto.Directdraw.ArcProto.newBuilder(arc_).mergeFrom(value).buildPartial();
          } else {
            arc_ = value;
          }
          onChanged();
        } else {
          arcBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.ArcProto arc = 14;</code>
       */
      public Builder clearArc() {
        if (arcBuilder_ == null) {
          arc_ = org.webswing.directdraw.proto.Directdraw.ArcProto.getDefaultInstance();
          onChanged();
        } else {
          arcBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.ArcProto arc = 14;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.ArcProto.Builder getArcBuilder() {
        bitField0_ |= 0x00002000;
        onChanged();
        return getArcFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.ArcProto arc = 14;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.ArcProtoOrBuilder getArcOrBuilder() {
        if (arcBuilder_ != null) {
          return arcBuilder_.getMessageOrBuilder();
        } else {
          return arc_;
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.ArcProto arc = 14;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.ArcProto, org.webswing.directdraw.proto.Directdraw.ArcProto.Builder, org.webswing.directdraw.proto.Directdraw.ArcProtoOrBuilder> 
          getArcFieldBuilder() {
        if (arcBuilder_ == null) {
          arcBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.webswing.directdraw.proto.Directdraw.ArcProto, org.webswing.directdraw.proto.Directdraw.ArcProto.Builder, org.webswing.directdraw.proto.Directdraw.ArcProtoOrBuilder>(
                  arc_,
                  getParentForChildren(),
                  isClean());
          arc_ = null;
        }
        return arcBuilder_;
      }

      // optional .org.webswing.directdraw.proto.StrokeProto stroke = 15;
      private org.webswing.directdraw.proto.Directdraw.StrokeProto stroke_ = org.webswing.directdraw.proto.Directdraw.StrokeProto.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.StrokeProto, org.webswing.directdraw.proto.Directdraw.StrokeProto.Builder, org.webswing.directdraw.proto.Directdraw.StrokeProtoOrBuilder> strokeBuilder_;
      /**
       * <code>optional .org.webswing.directdraw.proto.StrokeProto stroke = 15;</code>
       */
      public boolean hasStroke() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.StrokeProto stroke = 15;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.StrokeProto getStroke() {
        if (strokeBuilder_ == null) {
          return stroke_;
        } else {
          return strokeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.StrokeProto stroke = 15;</code>
       */
      public Builder setStroke(org.webswing.directdraw.proto.Directdraw.StrokeProto value) {
        if (strokeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          stroke_ = value;
          onChanged();
        } else {
          strokeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.StrokeProto stroke = 15;</code>
       */
      public Builder setStroke(
          org.webswing.directdraw.proto.Directdraw.StrokeProto.Builder builderForValue) {
        if (strokeBuilder_ == null) {
          stroke_ = builderForValue.build();
          onChanged();
        } else {
          strokeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.StrokeProto stroke = 15;</code>
       */
      public Builder mergeStroke(org.webswing.directdraw.proto.Directdraw.StrokeProto value) {
        if (strokeBuilder_ == null) {
          if (((bitField0_ & 0x00004000) == 0x00004000) &&
              stroke_ != org.webswing.directdraw.proto.Directdraw.StrokeProto.getDefaultInstance()) {
            stroke_ =
              org.webswing.directdraw.proto.Directdraw.StrokeProto.newBuilder(stroke_).mergeFrom(value).buildPartial();
          } else {
            stroke_ = value;
          }
          onChanged();
        } else {
          strokeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.StrokeProto stroke = 15;</code>
       */
      public Builder clearStroke() {
        if (strokeBuilder_ == null) {
          stroke_ = org.webswing.directdraw.proto.Directdraw.StrokeProto.getDefaultInstance();
          onChanged();
        } else {
          strokeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00004000);
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.StrokeProto stroke = 15;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.StrokeProto.Builder getStrokeBuilder() {
        bitField0_ |= 0x00004000;
        onChanged();
        return getStrokeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.StrokeProto stroke = 15;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.StrokeProtoOrBuilder getStrokeOrBuilder() {
        if (strokeBuilder_ != null) {
          return strokeBuilder_.getMessageOrBuilder();
        } else {
          return stroke_;
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.StrokeProto stroke = 15;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.StrokeProto, org.webswing.directdraw.proto.Directdraw.StrokeProto.Builder, org.webswing.directdraw.proto.Directdraw.StrokeProtoOrBuilder> 
          getStrokeFieldBuilder() {
        if (strokeBuilder_ == null) {
          strokeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.webswing.directdraw.proto.Directdraw.StrokeProto, org.webswing.directdraw.proto.Directdraw.StrokeProto.Builder, org.webswing.directdraw.proto.Directdraw.StrokeProtoOrBuilder>(
                  stroke_,
                  getParentForChildren(),
                  isClean());
          stroke_ = null;
        }
        return strokeBuilder_;
      }

      // optional .org.webswing.directdraw.proto.CompositeProto composite = 16;
      private org.webswing.directdraw.proto.Directdraw.CompositeProto composite_ = org.webswing.directdraw.proto.Directdraw.CompositeProto.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.CompositeProto, org.webswing.directdraw.proto.Directdraw.CompositeProto.Builder, org.webswing.directdraw.proto.Directdraw.CompositeProtoOrBuilder> compositeBuilder_;
      /**
       * <code>optional .org.webswing.directdraw.proto.CompositeProto composite = 16;</code>
       */
      public boolean hasComposite() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.CompositeProto composite = 16;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.CompositeProto getComposite() {
        if (compositeBuilder_ == null) {
          return composite_;
        } else {
          return compositeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.CompositeProto composite = 16;</code>
       */
      public Builder setComposite(org.webswing.directdraw.proto.Directdraw.CompositeProto value) {
        if (compositeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          composite_ = value;
          onChanged();
        } else {
          compositeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.CompositeProto composite = 16;</code>
       */
      public Builder setComposite(
          org.webswing.directdraw.proto.Directdraw.CompositeProto.Builder builderForValue) {
        if (compositeBuilder_ == null) {
          composite_ = builderForValue.build();
          onChanged();
        } else {
          compositeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.CompositeProto composite = 16;</code>
       */
      public Builder mergeComposite(org.webswing.directdraw.proto.Directdraw.CompositeProto value) {
        if (compositeBuilder_ == null) {
          if (((bitField0_ & 0x00008000) == 0x00008000) &&
              composite_ != org.webswing.directdraw.proto.Directdraw.CompositeProto.getDefaultInstance()) {
            composite_ =
              org.webswing.directdraw.proto.Directdraw.CompositeProto.newBuilder(composite_).mergeFrom(value).buildPartial();
          } else {
            composite_ = value;
          }
          onChanged();
        } else {
          compositeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.CompositeProto composite = 16;</code>
       */
      public Builder clearComposite() {
        if (compositeBuilder_ == null) {
          composite_ = org.webswing.directdraw.proto.Directdraw.CompositeProto.getDefaultInstance();
          onChanged();
        } else {
          compositeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00008000);
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.CompositeProto composite = 16;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.CompositeProto.Builder getCompositeBuilder() {
        bitField0_ |= 0x00008000;
        onChanged();
        return getCompositeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.CompositeProto composite = 16;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.CompositeProtoOrBuilder getCompositeOrBuilder() {
        if (compositeBuilder_ != null) {
          return compositeBuilder_.getMessageOrBuilder();
        } else {
          return composite_;
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.CompositeProto composite = 16;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.CompositeProto, org.webswing.directdraw.proto.Directdraw.CompositeProto.Builder, org.webswing.directdraw.proto.Directdraw.CompositeProtoOrBuilder> 
          getCompositeFieldBuilder() {
        if (compositeBuilder_ == null) {
          compositeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.webswing.directdraw.proto.Directdraw.CompositeProto, org.webswing.directdraw.proto.Directdraw.CompositeProto.Builder, org.webswing.directdraw.proto.Directdraw.CompositeProtoOrBuilder>(
                  composite_,
                  getParentForChildren(),
                  isClean());
          composite_ = null;
        }
        return compositeBuilder_;
      }

      // optional .org.webswing.directdraw.proto.TextureProto texture = 17;
      private org.webswing.directdraw.proto.Directdraw.TextureProto texture_ = org.webswing.directdraw.proto.Directdraw.TextureProto.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.TextureProto, org.webswing.directdraw.proto.Directdraw.TextureProto.Builder, org.webswing.directdraw.proto.Directdraw.TextureProtoOrBuilder> textureBuilder_;
      /**
       * <code>optional .org.webswing.directdraw.proto.TextureProto texture = 17;</code>
       */
      public boolean hasTexture() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.TextureProto texture = 17;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.TextureProto getTexture() {
        if (textureBuilder_ == null) {
          return texture_;
        } else {
          return textureBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.TextureProto texture = 17;</code>
       */
      public Builder setTexture(org.webswing.directdraw.proto.Directdraw.TextureProto value) {
        if (textureBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          texture_ = value;
          onChanged();
        } else {
          textureBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.TextureProto texture = 17;</code>
       */
      public Builder setTexture(
          org.webswing.directdraw.proto.Directdraw.TextureProto.Builder builderForValue) {
        if (textureBuilder_ == null) {
          texture_ = builderForValue.build();
          onChanged();
        } else {
          textureBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.TextureProto texture = 17;</code>
       */
      public Builder mergeTexture(org.webswing.directdraw.proto.Directdraw.TextureProto value) {
        if (textureBuilder_ == null) {
          if (((bitField0_ & 0x00010000) == 0x00010000) &&
              texture_ != org.webswing.directdraw.proto.Directdraw.TextureProto.getDefaultInstance()) {
            texture_ =
              org.webswing.directdraw.proto.Directdraw.TextureProto.newBuilder(texture_).mergeFrom(value).buildPartial();
          } else {
            texture_ = value;
          }
          onChanged();
        } else {
          textureBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.TextureProto texture = 17;</code>
       */
      public Builder clearTexture() {
        if (textureBuilder_ == null) {
          texture_ = org.webswing.directdraw.proto.Directdraw.TextureProto.getDefaultInstance();
          onChanged();
        } else {
          textureBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.TextureProto texture = 17;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.TextureProto.Builder getTextureBuilder() {
        bitField0_ |= 0x00010000;
        onChanged();
        return getTextureFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.TextureProto texture = 17;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.TextureProtoOrBuilder getTextureOrBuilder() {
        if (textureBuilder_ != null) {
          return textureBuilder_.getMessageOrBuilder();
        } else {
          return texture_;
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.TextureProto texture = 17;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.TextureProto, org.webswing.directdraw.proto.Directdraw.TextureProto.Builder, org.webswing.directdraw.proto.Directdraw.TextureProtoOrBuilder> 
          getTextureFieldBuilder() {
        if (textureBuilder_ == null) {
          textureBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.webswing.directdraw.proto.Directdraw.TextureProto, org.webswing.directdraw.proto.Directdraw.TextureProto.Builder, org.webswing.directdraw.proto.Directdraw.TextureProtoOrBuilder>(
                  texture_,
                  getParentForChildren(),
                  isClean());
          texture_ = null;
        }
        return textureBuilder_;
      }

      // optional .org.webswing.directdraw.proto.GlyphProto glyph = 18;
      private org.webswing.directdraw.proto.Directdraw.GlyphProto glyph_ = org.webswing.directdraw.proto.Directdraw.GlyphProto.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.GlyphProto, org.webswing.directdraw.proto.Directdraw.GlyphProto.Builder, org.webswing.directdraw.proto.Directdraw.GlyphProtoOrBuilder> glyphBuilder_;
      /**
       * <code>optional .org.webswing.directdraw.proto.GlyphProto glyph = 18;</code>
       */
      public boolean hasGlyph() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.GlyphProto glyph = 18;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.GlyphProto getGlyph() {
        if (glyphBuilder_ == null) {
          return glyph_;
        } else {
          return glyphBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.GlyphProto glyph = 18;</code>
       */
      public Builder setGlyph(org.webswing.directdraw.proto.Directdraw.GlyphProto value) {
        if (glyphBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          glyph_ = value;
          onChanged();
        } else {
          glyphBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.GlyphProto glyph = 18;</code>
       */
      public Builder setGlyph(
          org.webswing.directdraw.proto.Directdraw.GlyphProto.Builder builderForValue) {
        if (glyphBuilder_ == null) {
          glyph_ = builderForValue.build();
          onChanged();
        } else {
          glyphBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.GlyphProto glyph = 18;</code>
       */
      public Builder mergeGlyph(org.webswing.directdraw.proto.Directdraw.GlyphProto value) {
        if (glyphBuilder_ == null) {
          if (((bitField0_ & 0x00020000) == 0x00020000) &&
              glyph_ != org.webswing.directdraw.proto.Directdraw.GlyphProto.getDefaultInstance()) {
            glyph_ =
              org.webswing.directdraw.proto.Directdraw.GlyphProto.newBuilder(glyph_).mergeFrom(value).buildPartial();
          } else {
            glyph_ = value;
          }
          onChanged();
        } else {
          glyphBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.GlyphProto glyph = 18;</code>
       */
      public Builder clearGlyph() {
        if (glyphBuilder_ == null) {
          glyph_ = org.webswing.directdraw.proto.Directdraw.GlyphProto.getDefaultInstance();
          onChanged();
        } else {
          glyphBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.GlyphProto glyph = 18;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.GlyphProto.Builder getGlyphBuilder() {
        bitField0_ |= 0x00020000;
        onChanged();
        return getGlyphFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.GlyphProto glyph = 18;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.GlyphProtoOrBuilder getGlyphOrBuilder() {
        if (glyphBuilder_ != null) {
          return glyphBuilder_.getMessageOrBuilder();
        } else {
          return glyph_;
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.GlyphProto glyph = 18;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.GlyphProto, org.webswing.directdraw.proto.Directdraw.GlyphProto.Builder, org.webswing.directdraw.proto.Directdraw.GlyphProtoOrBuilder> 
          getGlyphFieldBuilder() {
        if (glyphBuilder_ == null) {
          glyphBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.webswing.directdraw.proto.Directdraw.GlyphProto, org.webswing.directdraw.proto.Directdraw.GlyphProto.Builder, org.webswing.directdraw.proto.Directdraw.GlyphProtoOrBuilder>(
                  glyph_,
                  getParentForChildren(),
                  isClean());
          glyph_ = null;
        }
        return glyphBuilder_;
      }

      // optional .org.webswing.directdraw.proto.CombinedProto combined = 19;
      private org.webswing.directdraw.proto.Directdraw.CombinedProto combined_ = org.webswing.directdraw.proto.Directdraw.CombinedProto.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.CombinedProto, org.webswing.directdraw.proto.Directdraw.CombinedProto.Builder, org.webswing.directdraw.proto.Directdraw.CombinedProtoOrBuilder> combinedBuilder_;
      /**
       * <code>optional .org.webswing.directdraw.proto.CombinedProto combined = 19;</code>
       */
      public boolean hasCombined() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.CombinedProto combined = 19;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.CombinedProto getCombined() {
        if (combinedBuilder_ == null) {
          return combined_;
        } else {
          return combinedBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.CombinedProto combined = 19;</code>
       */
      public Builder setCombined(org.webswing.directdraw.proto.Directdraw.CombinedProto value) {
        if (combinedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          combined_ = value;
          onChanged();
        } else {
          combinedBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.CombinedProto combined = 19;</code>
       */
      public Builder setCombined(
          org.webswing.directdraw.proto.Directdraw.CombinedProto.Builder builderForValue) {
        if (combinedBuilder_ == null) {
          combined_ = builderForValue.build();
          onChanged();
        } else {
          combinedBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.CombinedProto combined = 19;</code>
       */
      public Builder mergeCombined(org.webswing.directdraw.proto.Directdraw.CombinedProto value) {
        if (combinedBuilder_ == null) {
          if (((bitField0_ & 0x00040000) == 0x00040000) &&
              combined_ != org.webswing.directdraw.proto.Directdraw.CombinedProto.getDefaultInstance()) {
            combined_ =
              org.webswing.directdraw.proto.Directdraw.CombinedProto.newBuilder(combined_).mergeFrom(value).buildPartial();
          } else {
            combined_ = value;
          }
          onChanged();
        } else {
          combinedBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.CombinedProto combined = 19;</code>
       */
      public Builder clearCombined() {
        if (combinedBuilder_ == null) {
          combined_ = org.webswing.directdraw.proto.Directdraw.CombinedProto.getDefaultInstance();
          onChanged();
        } else {
          combinedBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00040000);
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.CombinedProto combined = 19;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.CombinedProto.Builder getCombinedBuilder() {
        bitField0_ |= 0x00040000;
        onChanged();
        return getCombinedFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.CombinedProto combined = 19;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.CombinedProtoOrBuilder getCombinedOrBuilder() {
        if (combinedBuilder_ != null) {
          return combinedBuilder_.getMessageOrBuilder();
        } else {
          return combined_;
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.CombinedProto combined = 19;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.CombinedProto, org.webswing.directdraw.proto.Directdraw.CombinedProto.Builder, org.webswing.directdraw.proto.Directdraw.CombinedProtoOrBuilder> 
          getCombinedFieldBuilder() {
        if (combinedBuilder_ == null) {
          combinedBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.webswing.directdraw.proto.Directdraw.CombinedProto, org.webswing.directdraw.proto.Directdraw.CombinedProto.Builder, org.webswing.directdraw.proto.Directdraw.CombinedProtoOrBuilder>(
                  combined_,
                  getParentForChildren(),
                  isClean());
          combined_ = null;
        }
        return combinedBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.webswing.directdraw.proto.DrawConstantProto)
    }

    static {
      defaultInstance = new DrawConstantProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.webswing.directdraw.proto.DrawConstantProto)
  }

  public interface FontFaceProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required string name = 1;
    /**
     * <code>required string name = 1;</code>
     */
    boolean hasName();
    /**
     * <code>required string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <code>required string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    // required bytes font = 2;
    /**
     * <code>required bytes font = 2;</code>
     */
    boolean hasFont();
    /**
     * <code>required bytes font = 2;</code>
     */
    com.google.protobuf.ByteString getFont();

    // optional string style = 3;
    /**
     * <code>optional string style = 3;</code>
     */
    boolean hasStyle();
    /**
     * <code>optional string style = 3;</code>
     */
    java.lang.String getStyle();
    /**
     * <code>optional string style = 3;</code>
     */
    com.google.protobuf.ByteString
        getStyleBytes();
  }
  /**
   * Protobuf type {@code org.webswing.directdraw.proto.FontFaceProto}
   */
  public static final class FontFaceProto extends
      com.google.protobuf.GeneratedMessage
      implements FontFaceProtoOrBuilder {
    // Use FontFaceProto.newBuilder() to construct.
    private FontFaceProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FontFaceProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FontFaceProto defaultInstance;
    public static FontFaceProto getDefaultInstance() {
      return defaultInstance;
    }

    public FontFaceProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FontFaceProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              name_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              font_ = input.readBytes();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              style_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_FontFaceProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_FontFaceProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.webswing.directdraw.proto.Directdraw.FontFaceProto.class, org.webswing.directdraw.proto.Directdraw.FontFaceProto.Builder.class);
    }

    public static com.google.protobuf.Parser<FontFaceProto> PARSER =
        new com.google.protobuf.AbstractParser<FontFaceProto>() {
      public FontFaceProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FontFaceProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<FontFaceProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required string name = 1;
    public static final int NAME_FIELD_NUMBER = 1;
    private java.lang.Object name_;
    /**
     * <code>required string name = 1;</code>
     */
    public boolean hasName() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          name_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required bytes font = 2;
    public static final int FONT_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString font_;
    /**
     * <code>required bytes font = 2;</code>
     */
    public boolean hasFont() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required bytes font = 2;</code>
     */
    public com.google.protobuf.ByteString getFont() {
      return font_;
    }

    // optional string style = 3;
    public static final int STYLE_FIELD_NUMBER = 3;
    private java.lang.Object style_;
    /**
     * <code>optional string style = 3;</code>
     */
    public boolean hasStyle() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string style = 3;</code>
     */
    public java.lang.String getStyle() {
      java.lang.Object ref = style_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          style_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string style = 3;</code>
     */
    public com.google.protobuf.ByteString
        getStyleBytes() {
      java.lang.Object ref = style_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        style_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      name_ = "";
      font_ = com.google.protobuf.ByteString.EMPTY;
      style_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasName()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFont()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, font_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getStyleBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getNameBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, font_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getStyleBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.webswing.directdraw.proto.Directdraw.FontFaceProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.FontFaceProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.FontFaceProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.FontFaceProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.FontFaceProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.FontFaceProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.FontFaceProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.FontFaceProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.FontFaceProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.FontFaceProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.webswing.directdraw.proto.Directdraw.FontFaceProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.webswing.directdraw.proto.FontFaceProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.webswing.directdraw.proto.Directdraw.FontFaceProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_FontFaceProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_FontFaceProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.webswing.directdraw.proto.Directdraw.FontFaceProto.class, org.webswing.directdraw.proto.Directdraw.FontFaceProto.Builder.class);
      }

      // Construct using org.webswing.directdraw.proto.Directdraw.FontFaceProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        name_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        font_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        style_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_FontFaceProto_descriptor;
      }

      public org.webswing.directdraw.proto.Directdraw.FontFaceProto getDefaultInstanceForType() {
        return org.webswing.directdraw.proto.Directdraw.FontFaceProto.getDefaultInstance();
      }

      public org.webswing.directdraw.proto.Directdraw.FontFaceProto build() {
        org.webswing.directdraw.proto.Directdraw.FontFaceProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.webswing.directdraw.proto.Directdraw.FontFaceProto buildPartial() {
        org.webswing.directdraw.proto.Directdraw.FontFaceProto result = new org.webswing.directdraw.proto.Directdraw.FontFaceProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.font_ = font_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.style_ = style_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.webswing.directdraw.proto.Directdraw.FontFaceProto) {
          return mergeFrom((org.webswing.directdraw.proto.Directdraw.FontFaceProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.webswing.directdraw.proto.Directdraw.FontFaceProto other) {
        if (other == org.webswing.directdraw.proto.Directdraw.FontFaceProto.getDefaultInstance()) return this;
        if (other.hasName()) {
          bitField0_ |= 0x00000001;
          name_ = other.name_;
          onChanged();
        }
        if (other.hasFont()) {
          setFont(other.getFont());
        }
        if (other.hasStyle()) {
          bitField0_ |= 0x00000004;
          style_ = other.style_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasName()) {
          
          return false;
        }
        if (!hasFont()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.webswing.directdraw.proto.Directdraw.FontFaceProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.webswing.directdraw.proto.Directdraw.FontFaceProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string name = 1;
      private java.lang.Object name_ = "";
      /**
       * <code>required string name = 1;</code>
       */
      public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 1;</code>
       */
      public Builder clearName() {
        bitField0_ = (bitField0_ & ~0x00000001);
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <code>required string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        name_ = value;
        onChanged();
        return this;
      }

      // required bytes font = 2;
      private com.google.protobuf.ByteString font_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes font = 2;</code>
       */
      public boolean hasFont() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required bytes font = 2;</code>
       */
      public com.google.protobuf.ByteString getFont() {
        return font_;
      }
      /**
       * <code>required bytes font = 2;</code>
       */
      public Builder setFont(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        font_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes font = 2;</code>
       */
      public Builder clearFont() {
        bitField0_ = (bitField0_ & ~0x00000002);
        font_ = getDefaultInstance().getFont();
        onChanged();
        return this;
      }

      // optional string style = 3;
      private java.lang.Object style_ = "";
      /**
       * <code>optional string style = 3;</code>
       */
      public boolean hasStyle() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string style = 3;</code>
       */
      public java.lang.String getStyle() {
        java.lang.Object ref = style_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          style_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string style = 3;</code>
       */
      public com.google.protobuf.ByteString
          getStyleBytes() {
        java.lang.Object ref = style_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          style_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string style = 3;</code>
       */
      public Builder setStyle(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        style_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string style = 3;</code>
       */
      public Builder clearStyle() {
        bitField0_ = (bitField0_ & ~0x00000004);
        style_ = getDefaultInstance().getStyle();
        onChanged();
        return this;
      }
      /**
       * <code>optional string style = 3;</code>
       */
      public Builder setStyleBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        style_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.webswing.directdraw.proto.FontFaceProto)
    }

    static {
      defaultInstance = new FontFaceProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.webswing.directdraw.proto.FontFaceProto)
  }

  public interface ColorProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required fixed32 rgba = 1;
    /**
     * <code>required fixed32 rgba = 1;</code>
     */
    boolean hasRgba();
    /**
     * <code>required fixed32 rgba = 1;</code>
     */
    int getRgba();
  }
  /**
   * Protobuf type {@code org.webswing.directdraw.proto.ColorProto}
   */
  public static final class ColorProto extends
      com.google.protobuf.GeneratedMessage
      implements ColorProtoOrBuilder {
    // Use ColorProto.newBuilder() to construct.
    private ColorProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ColorProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ColorProto defaultInstance;
    public static ColorProto getDefaultInstance() {
      return defaultInstance;
    }

    public ColorProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ColorProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              rgba_ = input.readFixed32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_ColorProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_ColorProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.webswing.directdraw.proto.Directdraw.ColorProto.class, org.webswing.directdraw.proto.Directdraw.ColorProto.Builder.class);
    }

    public static com.google.protobuf.Parser<ColorProto> PARSER =
        new com.google.protobuf.AbstractParser<ColorProto>() {
      public ColorProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ColorProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ColorProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required fixed32 rgba = 1;
    public static final int RGBA_FIELD_NUMBER = 1;
    private int rgba_;
    /**
     * <code>required fixed32 rgba = 1;</code>
     */
    public boolean hasRgba() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required fixed32 rgba = 1;</code>
     */
    public int getRgba() {
      return rgba_;
    }

    private void initFields() {
      rgba_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasRgba()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFixed32(1, rgba_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, rgba_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.webswing.directdraw.proto.Directdraw.ColorProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.ColorProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.ColorProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.ColorProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.ColorProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.ColorProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.ColorProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.ColorProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.ColorProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.ColorProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.webswing.directdraw.proto.Directdraw.ColorProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.webswing.directdraw.proto.ColorProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.webswing.directdraw.proto.Directdraw.ColorProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_ColorProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_ColorProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.webswing.directdraw.proto.Directdraw.ColorProto.class, org.webswing.directdraw.proto.Directdraw.ColorProto.Builder.class);
      }

      // Construct using org.webswing.directdraw.proto.Directdraw.ColorProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        rgba_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_ColorProto_descriptor;
      }

      public org.webswing.directdraw.proto.Directdraw.ColorProto getDefaultInstanceForType() {
        return org.webswing.directdraw.proto.Directdraw.ColorProto.getDefaultInstance();
      }

      public org.webswing.directdraw.proto.Directdraw.ColorProto build() {
        org.webswing.directdraw.proto.Directdraw.ColorProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.webswing.directdraw.proto.Directdraw.ColorProto buildPartial() {
        org.webswing.directdraw.proto.Directdraw.ColorProto result = new org.webswing.directdraw.proto.Directdraw.ColorProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.rgba_ = rgba_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.webswing.directdraw.proto.Directdraw.ColorProto) {
          return mergeFrom((org.webswing.directdraw.proto.Directdraw.ColorProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.webswing.directdraw.proto.Directdraw.ColorProto other) {
        if (other == org.webswing.directdraw.proto.Directdraw.ColorProto.getDefaultInstance()) return this;
        if (other.hasRgba()) {
          setRgba(other.getRgba());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasRgba()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.webswing.directdraw.proto.Directdraw.ColorProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.webswing.directdraw.proto.Directdraw.ColorProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required fixed32 rgba = 1;
      private int rgba_ ;
      /**
       * <code>required fixed32 rgba = 1;</code>
       */
      public boolean hasRgba() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required fixed32 rgba = 1;</code>
       */
      public int getRgba() {
        return rgba_;
      }
      /**
       * <code>required fixed32 rgba = 1;</code>
       */
      public Builder setRgba(int value) {
        bitField0_ |= 0x00000001;
        rgba_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required fixed32 rgba = 1;</code>
       */
      public Builder clearRgba() {
        bitField0_ = (bitField0_ & ~0x00000001);
        rgba_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.webswing.directdraw.proto.ColorProto)
    }

    static {
      defaultInstance = new ColorProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.webswing.directdraw.proto.ColorProto)
  }

  public interface ImageProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required bytes data = 1;
    /**
     * <code>required bytes data = 1;</code>
     */
    boolean hasData();
    /**
     * <code>required bytes data = 1;</code>
     */
    com.google.protobuf.ByteString getData();
  }
  /**
   * Protobuf type {@code org.webswing.directdraw.proto.ImageProto}
   */
  public static final class ImageProto extends
      com.google.protobuf.GeneratedMessage
      implements ImageProtoOrBuilder {
    // Use ImageProto.newBuilder() to construct.
    private ImageProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ImageProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ImageProto defaultInstance;
    public static ImageProto getDefaultInstance() {
      return defaultInstance;
    }

    public ImageProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ImageProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              data_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_ImageProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_ImageProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.webswing.directdraw.proto.Directdraw.ImageProto.class, org.webswing.directdraw.proto.Directdraw.ImageProto.Builder.class);
    }

    public static com.google.protobuf.Parser<ImageProto> PARSER =
        new com.google.protobuf.AbstractParser<ImageProto>() {
      public ImageProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ImageProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ImageProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required bytes data = 1;
    public static final int DATA_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString data_;
    /**
     * <code>required bytes data = 1;</code>
     */
    public boolean hasData() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required bytes data = 1;</code>
     */
    public com.google.protobuf.ByteString getData() {
      return data_;
    }

    private void initFields() {
      data_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasData()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, data_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, data_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.webswing.directdraw.proto.Directdraw.ImageProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.ImageProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.ImageProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.ImageProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.ImageProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.ImageProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.ImageProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.ImageProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.ImageProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.ImageProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.webswing.directdraw.proto.Directdraw.ImageProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.webswing.directdraw.proto.ImageProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.webswing.directdraw.proto.Directdraw.ImageProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_ImageProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_ImageProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.webswing.directdraw.proto.Directdraw.ImageProto.class, org.webswing.directdraw.proto.Directdraw.ImageProto.Builder.class);
      }

      // Construct using org.webswing.directdraw.proto.Directdraw.ImageProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        data_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_ImageProto_descriptor;
      }

      public org.webswing.directdraw.proto.Directdraw.ImageProto getDefaultInstanceForType() {
        return org.webswing.directdraw.proto.Directdraw.ImageProto.getDefaultInstance();
      }

      public org.webswing.directdraw.proto.Directdraw.ImageProto build() {
        org.webswing.directdraw.proto.Directdraw.ImageProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.webswing.directdraw.proto.Directdraw.ImageProto buildPartial() {
        org.webswing.directdraw.proto.Directdraw.ImageProto result = new org.webswing.directdraw.proto.Directdraw.ImageProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.data_ = data_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.webswing.directdraw.proto.Directdraw.ImageProto) {
          return mergeFrom((org.webswing.directdraw.proto.Directdraw.ImageProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.webswing.directdraw.proto.Directdraw.ImageProto other) {
        if (other == org.webswing.directdraw.proto.Directdraw.ImageProto.getDefaultInstance()) return this;
        if (other.hasData()) {
          setData(other.getData());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasData()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.webswing.directdraw.proto.Directdraw.ImageProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.webswing.directdraw.proto.Directdraw.ImageProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required bytes data = 1;
      private com.google.protobuf.ByteString data_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes data = 1;</code>
       */
      public boolean hasData() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required bytes data = 1;</code>
       */
      public com.google.protobuf.ByteString getData() {
        return data_;
      }
      /**
       * <code>required bytes data = 1;</code>
       */
      public Builder setData(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        data_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes data = 1;</code>
       */
      public Builder clearData() {
        bitField0_ = (bitField0_ & ~0x00000001);
        data_ = getDefaultInstance().getData();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.webswing.directdraw.proto.ImageProto)
    }

    static {
      defaultInstance = new ImageProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.webswing.directdraw.proto.ImageProto)
  }

  public interface TransformProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional float m00 = 1 [default = 1];
    /**
     * <code>optional float m00 = 1 [default = 1];</code>
     */
    boolean hasM00();
    /**
     * <code>optional float m00 = 1 [default = 1];</code>
     */
    float getM00();

    // optional float m10 = 2;
    /**
     * <code>optional float m10 = 2;</code>
     */
    boolean hasM10();
    /**
     * <code>optional float m10 = 2;</code>
     */
    float getM10();

    // optional float m01 = 3;
    /**
     * <code>optional float m01 = 3;</code>
     */
    boolean hasM01();
    /**
     * <code>optional float m01 = 3;</code>
     */
    float getM01();

    // optional float m11 = 4 [default = 1];
    /**
     * <code>optional float m11 = 4 [default = 1];</code>
     */
    boolean hasM11();
    /**
     * <code>optional float m11 = 4 [default = 1];</code>
     */
    float getM11();

    // optional float m02 = 5;
    /**
     * <code>optional float m02 = 5;</code>
     */
    boolean hasM02();
    /**
     * <code>optional float m02 = 5;</code>
     */
    float getM02();

    // optional float m12 = 6;
    /**
     * <code>optional float m12 = 6;</code>
     */
    boolean hasM12();
    /**
     * <code>optional float m12 = 6;</code>
     */
    float getM12();
  }
  /**
   * Protobuf type {@code org.webswing.directdraw.proto.TransformProto}
   */
  public static final class TransformProto extends
      com.google.protobuf.GeneratedMessage
      implements TransformProtoOrBuilder {
    // Use TransformProto.newBuilder() to construct.
    private TransformProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TransformProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TransformProto defaultInstance;
    public static TransformProto getDefaultInstance() {
      return defaultInstance;
    }

    public TransformProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TransformProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              m00_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              m10_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              m01_ = input.readFloat();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              m11_ = input.readFloat();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              m02_ = input.readFloat();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              m12_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_TransformProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_TransformProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.webswing.directdraw.proto.Directdraw.TransformProto.class, org.webswing.directdraw.proto.Directdraw.TransformProto.Builder.class);
    }

    public static com.google.protobuf.Parser<TransformProto> PARSER =
        new com.google.protobuf.AbstractParser<TransformProto>() {
      public TransformProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TransformProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TransformProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional float m00 = 1 [default = 1];
    public static final int M00_FIELD_NUMBER = 1;
    private float m00_;
    /**
     * <code>optional float m00 = 1 [default = 1];</code>
     */
    public boolean hasM00() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional float m00 = 1 [default = 1];</code>
     */
    public float getM00() {
      return m00_;
    }

    // optional float m10 = 2;
    public static final int M10_FIELD_NUMBER = 2;
    private float m10_;
    /**
     * <code>optional float m10 = 2;</code>
     */
    public boolean hasM10() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float m10 = 2;</code>
     */
    public float getM10() {
      return m10_;
    }

    // optional float m01 = 3;
    public static final int M01_FIELD_NUMBER = 3;
    private float m01_;
    /**
     * <code>optional float m01 = 3;</code>
     */
    public boolean hasM01() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float m01 = 3;</code>
     */
    public float getM01() {
      return m01_;
    }

    // optional float m11 = 4 [default = 1];
    public static final int M11_FIELD_NUMBER = 4;
    private float m11_;
    /**
     * <code>optional float m11 = 4 [default = 1];</code>
     */
    public boolean hasM11() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional float m11 = 4 [default = 1];</code>
     */
    public float getM11() {
      return m11_;
    }

    // optional float m02 = 5;
    public static final int M02_FIELD_NUMBER = 5;
    private float m02_;
    /**
     * <code>optional float m02 = 5;</code>
     */
    public boolean hasM02() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float m02 = 5;</code>
     */
    public float getM02() {
      return m02_;
    }

    // optional float m12 = 6;
    public static final int M12_FIELD_NUMBER = 6;
    private float m12_;
    /**
     * <code>optional float m12 = 6;</code>
     */
    public boolean hasM12() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional float m12 = 6;</code>
     */
    public float getM12() {
      return m12_;
    }

    private void initFields() {
      m00_ = 1F;
      m10_ = 0F;
      m01_ = 0F;
      m11_ = 1F;
      m02_ = 0F;
      m12_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, m00_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, m10_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, m01_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, m11_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, m02_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, m12_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, m00_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, m10_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, m01_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, m11_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, m02_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, m12_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.webswing.directdraw.proto.Directdraw.TransformProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.TransformProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.TransformProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.TransformProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.TransformProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.TransformProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.TransformProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.TransformProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.TransformProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.TransformProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.webswing.directdraw.proto.Directdraw.TransformProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.webswing.directdraw.proto.TransformProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.webswing.directdraw.proto.Directdraw.TransformProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_TransformProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_TransformProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.webswing.directdraw.proto.Directdraw.TransformProto.class, org.webswing.directdraw.proto.Directdraw.TransformProto.Builder.class);
      }

      // Construct using org.webswing.directdraw.proto.Directdraw.TransformProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        m00_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000001);
        m10_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        m01_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        m11_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000008);
        m02_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        m12_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_TransformProto_descriptor;
      }

      public org.webswing.directdraw.proto.Directdraw.TransformProto getDefaultInstanceForType() {
        return org.webswing.directdraw.proto.Directdraw.TransformProto.getDefaultInstance();
      }

      public org.webswing.directdraw.proto.Directdraw.TransformProto build() {
        org.webswing.directdraw.proto.Directdraw.TransformProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.webswing.directdraw.proto.Directdraw.TransformProto buildPartial() {
        org.webswing.directdraw.proto.Directdraw.TransformProto result = new org.webswing.directdraw.proto.Directdraw.TransformProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.m00_ = m00_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.m10_ = m10_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.m01_ = m01_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.m11_ = m11_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.m02_ = m02_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.m12_ = m12_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.webswing.directdraw.proto.Directdraw.TransformProto) {
          return mergeFrom((org.webswing.directdraw.proto.Directdraw.TransformProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.webswing.directdraw.proto.Directdraw.TransformProto other) {
        if (other == org.webswing.directdraw.proto.Directdraw.TransformProto.getDefaultInstance()) return this;
        if (other.hasM00()) {
          setM00(other.getM00());
        }
        if (other.hasM10()) {
          setM10(other.getM10());
        }
        if (other.hasM01()) {
          setM01(other.getM01());
        }
        if (other.hasM11()) {
          setM11(other.getM11());
        }
        if (other.hasM02()) {
          setM02(other.getM02());
        }
        if (other.hasM12()) {
          setM12(other.getM12());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.webswing.directdraw.proto.Directdraw.TransformProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.webswing.directdraw.proto.Directdraw.TransformProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional float m00 = 1 [default = 1];
      private float m00_ = 1F;
      /**
       * <code>optional float m00 = 1 [default = 1];</code>
       */
      public boolean hasM00() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional float m00 = 1 [default = 1];</code>
       */
      public float getM00() {
        return m00_;
      }
      /**
       * <code>optional float m00 = 1 [default = 1];</code>
       */
      public Builder setM00(float value) {
        bitField0_ |= 0x00000001;
        m00_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float m00 = 1 [default = 1];</code>
       */
      public Builder clearM00() {
        bitField0_ = (bitField0_ & ~0x00000001);
        m00_ = 1F;
        onChanged();
        return this;
      }

      // optional float m10 = 2;
      private float m10_ ;
      /**
       * <code>optional float m10 = 2;</code>
       */
      public boolean hasM10() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float m10 = 2;</code>
       */
      public float getM10() {
        return m10_;
      }
      /**
       * <code>optional float m10 = 2;</code>
       */
      public Builder setM10(float value) {
        bitField0_ |= 0x00000002;
        m10_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float m10 = 2;</code>
       */
      public Builder clearM10() {
        bitField0_ = (bitField0_ & ~0x00000002);
        m10_ = 0F;
        onChanged();
        return this;
      }

      // optional float m01 = 3;
      private float m01_ ;
      /**
       * <code>optional float m01 = 3;</code>
       */
      public boolean hasM01() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float m01 = 3;</code>
       */
      public float getM01() {
        return m01_;
      }
      /**
       * <code>optional float m01 = 3;</code>
       */
      public Builder setM01(float value) {
        bitField0_ |= 0x00000004;
        m01_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float m01 = 3;</code>
       */
      public Builder clearM01() {
        bitField0_ = (bitField0_ & ~0x00000004);
        m01_ = 0F;
        onChanged();
        return this;
      }

      // optional float m11 = 4 [default = 1];
      private float m11_ = 1F;
      /**
       * <code>optional float m11 = 4 [default = 1];</code>
       */
      public boolean hasM11() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional float m11 = 4 [default = 1];</code>
       */
      public float getM11() {
        return m11_;
      }
      /**
       * <code>optional float m11 = 4 [default = 1];</code>
       */
      public Builder setM11(float value) {
        bitField0_ |= 0x00000008;
        m11_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float m11 = 4 [default = 1];</code>
       */
      public Builder clearM11() {
        bitField0_ = (bitField0_ & ~0x00000008);
        m11_ = 1F;
        onChanged();
        return this;
      }

      // optional float m02 = 5;
      private float m02_ ;
      /**
       * <code>optional float m02 = 5;</code>
       */
      public boolean hasM02() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional float m02 = 5;</code>
       */
      public float getM02() {
        return m02_;
      }
      /**
       * <code>optional float m02 = 5;</code>
       */
      public Builder setM02(float value) {
        bitField0_ |= 0x00000010;
        m02_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float m02 = 5;</code>
       */
      public Builder clearM02() {
        bitField0_ = (bitField0_ & ~0x00000010);
        m02_ = 0F;
        onChanged();
        return this;
      }

      // optional float m12 = 6;
      private float m12_ ;
      /**
       * <code>optional float m12 = 6;</code>
       */
      public boolean hasM12() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional float m12 = 6;</code>
       */
      public float getM12() {
        return m12_;
      }
      /**
       * <code>optional float m12 = 6;</code>
       */
      public Builder setM12(float value) {
        bitField0_ |= 0x00000020;
        m12_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float m12 = 6;</code>
       */
      public Builder clearM12() {
        bitField0_ = (bitField0_ & ~0x00000020);
        m12_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.webswing.directdraw.proto.TransformProto)
    }

    static {
      defaultInstance = new TransformProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.webswing.directdraw.proto.TransformProto)
  }

  public interface CombinedProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated uint32 ids = 1;
    /**
     * <code>repeated uint32 ids = 1;</code>
     */
    java.util.List<java.lang.Integer> getIdsList();
    /**
     * <code>repeated uint32 ids = 1;</code>
     */
    int getIdsCount();
    /**
     * <code>repeated uint32 ids = 1;</code>
     */
    int getIds(int index);
  }
  /**
   * Protobuf type {@code org.webswing.directdraw.proto.CombinedProto}
   */
  public static final class CombinedProto extends
      com.google.protobuf.GeneratedMessage
      implements CombinedProtoOrBuilder {
    // Use CombinedProto.newBuilder() to construct.
    private CombinedProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CombinedProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CombinedProto defaultInstance;
    public static CombinedProto getDefaultInstance() {
      return defaultInstance;
    }

    public CombinedProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CombinedProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                ids_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              ids_.add(input.readUInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                ids_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                ids_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          ids_ = java.util.Collections.unmodifiableList(ids_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_CombinedProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_CombinedProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.webswing.directdraw.proto.Directdraw.CombinedProto.class, org.webswing.directdraw.proto.Directdraw.CombinedProto.Builder.class);
    }

    public static com.google.protobuf.Parser<CombinedProto> PARSER =
        new com.google.protobuf.AbstractParser<CombinedProto>() {
      public CombinedProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CombinedProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CombinedProto> getParserForType() {
      return PARSER;
    }

    // repeated uint32 ids = 1;
    public static final int IDS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> ids_;
    /**
     * <code>repeated uint32 ids = 1;</code>
     */
    public java.util.List<java.lang.Integer>
        getIdsList() {
      return ids_;
    }
    /**
     * <code>repeated uint32 ids = 1;</code>
     */
    public int getIdsCount() {
      return ids_.size();
    }
    /**
     * <code>repeated uint32 ids = 1;</code>
     */
    public int getIds(int index) {
      return ids_.get(index);
    }

    private void initFields() {
      ids_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < ids_.size(); i++) {
        output.writeUInt32(1, ids_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < ids_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(ids_.get(i));
        }
        size += dataSize;
        size += 1 * getIdsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.webswing.directdraw.proto.Directdraw.CombinedProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.CombinedProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.CombinedProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.CombinedProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.CombinedProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.CombinedProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.CombinedProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.CombinedProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.CombinedProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.CombinedProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.webswing.directdraw.proto.Directdraw.CombinedProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.webswing.directdraw.proto.CombinedProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.webswing.directdraw.proto.Directdraw.CombinedProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_CombinedProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_CombinedProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.webswing.directdraw.proto.Directdraw.CombinedProto.class, org.webswing.directdraw.proto.Directdraw.CombinedProto.Builder.class);
      }

      // Construct using org.webswing.directdraw.proto.Directdraw.CombinedProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        ids_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_CombinedProto_descriptor;
      }

      public org.webswing.directdraw.proto.Directdraw.CombinedProto getDefaultInstanceForType() {
        return org.webswing.directdraw.proto.Directdraw.CombinedProto.getDefaultInstance();
      }

      public org.webswing.directdraw.proto.Directdraw.CombinedProto build() {
        org.webswing.directdraw.proto.Directdraw.CombinedProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.webswing.directdraw.proto.Directdraw.CombinedProto buildPartial() {
        org.webswing.directdraw.proto.Directdraw.CombinedProto result = new org.webswing.directdraw.proto.Directdraw.CombinedProto(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          ids_ = java.util.Collections.unmodifiableList(ids_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.ids_ = ids_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.webswing.directdraw.proto.Directdraw.CombinedProto) {
          return mergeFrom((org.webswing.directdraw.proto.Directdraw.CombinedProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.webswing.directdraw.proto.Directdraw.CombinedProto other) {
        if (other == org.webswing.directdraw.proto.Directdraw.CombinedProto.getDefaultInstance()) return this;
        if (!other.ids_.isEmpty()) {
          if (ids_.isEmpty()) {
            ids_ = other.ids_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureIdsIsMutable();
            ids_.addAll(other.ids_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.webswing.directdraw.proto.Directdraw.CombinedProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.webswing.directdraw.proto.Directdraw.CombinedProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated uint32 ids = 1;
      private java.util.List<java.lang.Integer> ids_ = java.util.Collections.emptyList();
      private void ensureIdsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          ids_ = new java.util.ArrayList<java.lang.Integer>(ids_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated uint32 ids = 1;</code>
       */
      public java.util.List<java.lang.Integer>
          getIdsList() {
        return java.util.Collections.unmodifiableList(ids_);
      }
      /**
       * <code>repeated uint32 ids = 1;</code>
       */
      public int getIdsCount() {
        return ids_.size();
      }
      /**
       * <code>repeated uint32 ids = 1;</code>
       */
      public int getIds(int index) {
        return ids_.get(index);
      }
      /**
       * <code>repeated uint32 ids = 1;</code>
       */
      public Builder setIds(
          int index, int value) {
        ensureIdsIsMutable();
        ids_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 ids = 1;</code>
       */
      public Builder addIds(int value) {
        ensureIdsIsMutable();
        ids_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 ids = 1;</code>
       */
      public Builder addAllIds(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureIdsIsMutable();
        super.addAll(values, ids_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 ids = 1;</code>
       */
      public Builder clearIds() {
        ids_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.webswing.directdraw.proto.CombinedProto)
    }

    static {
      defaultInstance = new CombinedProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.webswing.directdraw.proto.CombinedProto)
  }

  public interface GlyphProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional bytes data = 1;
    /**
     * <code>optional bytes data = 1;</code>
     */
    boolean hasData();
    /**
     * <code>optional bytes data = 1;</code>
     */
    com.google.protobuf.ByteString getData();
  }
  /**
   * Protobuf type {@code org.webswing.directdraw.proto.GlyphProto}
   */
  public static final class GlyphProto extends
      com.google.protobuf.GeneratedMessage
      implements GlyphProtoOrBuilder {
    // Use GlyphProto.newBuilder() to construct.
    private GlyphProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GlyphProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GlyphProto defaultInstance;
    public static GlyphProto getDefaultInstance() {
      return defaultInstance;
    }

    public GlyphProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GlyphProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              data_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_GlyphProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_GlyphProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.webswing.directdraw.proto.Directdraw.GlyphProto.class, org.webswing.directdraw.proto.Directdraw.GlyphProto.Builder.class);
    }

    public static com.google.protobuf.Parser<GlyphProto> PARSER =
        new com.google.protobuf.AbstractParser<GlyphProto>() {
      public GlyphProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GlyphProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GlyphProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional bytes data = 1;
    public static final int DATA_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString data_;
    /**
     * <code>optional bytes data = 1;</code>
     */
    public boolean hasData() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bytes data = 1;</code>
     */
    public com.google.protobuf.ByteString getData() {
      return data_;
    }

    private void initFields() {
      data_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, data_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, data_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.webswing.directdraw.proto.Directdraw.GlyphProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.GlyphProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.GlyphProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.GlyphProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.GlyphProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.GlyphProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.GlyphProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.GlyphProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.GlyphProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.GlyphProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.webswing.directdraw.proto.Directdraw.GlyphProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.webswing.directdraw.proto.GlyphProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.webswing.directdraw.proto.Directdraw.GlyphProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_GlyphProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_GlyphProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.webswing.directdraw.proto.Directdraw.GlyphProto.class, org.webswing.directdraw.proto.Directdraw.GlyphProto.Builder.class);
      }

      // Construct using org.webswing.directdraw.proto.Directdraw.GlyphProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        data_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_GlyphProto_descriptor;
      }

      public org.webswing.directdraw.proto.Directdraw.GlyphProto getDefaultInstanceForType() {
        return org.webswing.directdraw.proto.Directdraw.GlyphProto.getDefaultInstance();
      }

      public org.webswing.directdraw.proto.Directdraw.GlyphProto build() {
        org.webswing.directdraw.proto.Directdraw.GlyphProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.webswing.directdraw.proto.Directdraw.GlyphProto buildPartial() {
        org.webswing.directdraw.proto.Directdraw.GlyphProto result = new org.webswing.directdraw.proto.Directdraw.GlyphProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.data_ = data_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.webswing.directdraw.proto.Directdraw.GlyphProto) {
          return mergeFrom((org.webswing.directdraw.proto.Directdraw.GlyphProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.webswing.directdraw.proto.Directdraw.GlyphProto other) {
        if (other == org.webswing.directdraw.proto.Directdraw.GlyphProto.getDefaultInstance()) return this;
        if (other.hasData()) {
          setData(other.getData());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.webswing.directdraw.proto.Directdraw.GlyphProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.webswing.directdraw.proto.Directdraw.GlyphProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional bytes data = 1;
      private com.google.protobuf.ByteString data_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes data = 1;</code>
       */
      public boolean hasData() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bytes data = 1;</code>
       */
      public com.google.protobuf.ByteString getData() {
        return data_;
      }
      /**
       * <code>optional bytes data = 1;</code>
       */
      public Builder setData(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        data_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes data = 1;</code>
       */
      public Builder clearData() {
        bitField0_ = (bitField0_ & ~0x00000001);
        data_ = getDefaultInstance().getData();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.webswing.directdraw.proto.GlyphProto)
    }

    static {
      defaultInstance = new GlyphProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.webswing.directdraw.proto.GlyphProto)
  }

  public interface RectangleProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required sint32 x = 1;
    /**
     * <code>required sint32 x = 1;</code>
     */
    boolean hasX();
    /**
     * <code>required sint32 x = 1;</code>
     */
    int getX();

    // required sint32 y = 2;
    /**
     * <code>required sint32 y = 2;</code>
     */
    boolean hasY();
    /**
     * <code>required sint32 y = 2;</code>
     */
    int getY();

    // required sint32 w = 3;
    /**
     * <code>required sint32 w = 3;</code>
     */
    boolean hasW();
    /**
     * <code>required sint32 w = 3;</code>
     */
    int getW();

    // required sint32 h = 4;
    /**
     * <code>required sint32 h = 4;</code>
     */
    boolean hasH();
    /**
     * <code>required sint32 h = 4;</code>
     */
    int getH();
  }
  /**
   * Protobuf type {@code org.webswing.directdraw.proto.RectangleProto}
   */
  public static final class RectangleProto extends
      com.google.protobuf.GeneratedMessage
      implements RectangleProtoOrBuilder {
    // Use RectangleProto.newBuilder() to construct.
    private RectangleProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RectangleProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RectangleProto defaultInstance;
    public static RectangleProto getDefaultInstance() {
      return defaultInstance;
    }

    public RectangleProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RectangleProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              x_ = input.readSInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              y_ = input.readSInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              w_ = input.readSInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              h_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_RectangleProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_RectangleProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.webswing.directdraw.proto.Directdraw.RectangleProto.class, org.webswing.directdraw.proto.Directdraw.RectangleProto.Builder.class);
    }

    public static com.google.protobuf.Parser<RectangleProto> PARSER =
        new com.google.protobuf.AbstractParser<RectangleProto>() {
      public RectangleProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RectangleProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RectangleProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required sint32 x = 1;
    public static final int X_FIELD_NUMBER = 1;
    private int x_;
    /**
     * <code>required sint32 x = 1;</code>
     */
    public boolean hasX() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sint32 x = 1;</code>
     */
    public int getX() {
      return x_;
    }

    // required sint32 y = 2;
    public static final int Y_FIELD_NUMBER = 2;
    private int y_;
    /**
     * <code>required sint32 y = 2;</code>
     */
    public boolean hasY() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required sint32 y = 2;</code>
     */
    public int getY() {
      return y_;
    }

    // required sint32 w = 3;
    public static final int W_FIELD_NUMBER = 3;
    private int w_;
    /**
     * <code>required sint32 w = 3;</code>
     */
    public boolean hasW() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required sint32 w = 3;</code>
     */
    public int getW() {
      return w_;
    }

    // required sint32 h = 4;
    public static final int H_FIELD_NUMBER = 4;
    private int h_;
    /**
     * <code>required sint32 h = 4;</code>
     */
    public boolean hasH() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required sint32 h = 4;</code>
     */
    public int getH() {
      return h_;
    }

    private void initFields() {
      x_ = 0;
      y_ = 0;
      w_ = 0;
      h_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasW()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasH()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, y_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(3, w_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeSInt32(4, h_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, y_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, w_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(4, h_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.webswing.directdraw.proto.Directdraw.RectangleProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.RectangleProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.RectangleProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.RectangleProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.RectangleProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.RectangleProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.RectangleProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.RectangleProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.RectangleProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.RectangleProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.webswing.directdraw.proto.Directdraw.RectangleProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.webswing.directdraw.proto.RectangleProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.webswing.directdraw.proto.Directdraw.RectangleProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_RectangleProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_RectangleProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.webswing.directdraw.proto.Directdraw.RectangleProto.class, org.webswing.directdraw.proto.Directdraw.RectangleProto.Builder.class);
      }

      // Construct using org.webswing.directdraw.proto.Directdraw.RectangleProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        x_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        y_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        w_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        h_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_RectangleProto_descriptor;
      }

      public org.webswing.directdraw.proto.Directdraw.RectangleProto getDefaultInstanceForType() {
        return org.webswing.directdraw.proto.Directdraw.RectangleProto.getDefaultInstance();
      }

      public org.webswing.directdraw.proto.Directdraw.RectangleProto build() {
        org.webswing.directdraw.proto.Directdraw.RectangleProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.webswing.directdraw.proto.Directdraw.RectangleProto buildPartial() {
        org.webswing.directdraw.proto.Directdraw.RectangleProto result = new org.webswing.directdraw.proto.Directdraw.RectangleProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.y_ = y_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.w_ = w_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.h_ = h_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.webswing.directdraw.proto.Directdraw.RectangleProto) {
          return mergeFrom((org.webswing.directdraw.proto.Directdraw.RectangleProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.webswing.directdraw.proto.Directdraw.RectangleProto other) {
        if (other == org.webswing.directdraw.proto.Directdraw.RectangleProto.getDefaultInstance()) return this;
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        if (other.hasW()) {
          setW(other.getW());
        }
        if (other.hasH()) {
          setH(other.getH());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasX()) {
          
          return false;
        }
        if (!hasY()) {
          
          return false;
        }
        if (!hasW()) {
          
          return false;
        }
        if (!hasH()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.webswing.directdraw.proto.Directdraw.RectangleProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.webswing.directdraw.proto.Directdraw.RectangleProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required sint32 x = 1;
      private int x_ ;
      /**
       * <code>required sint32 x = 1;</code>
       */
      public boolean hasX() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sint32 x = 1;</code>
       */
      public int getX() {
        return x_;
      }
      /**
       * <code>required sint32 x = 1;</code>
       */
      public Builder setX(int value) {
        bitField0_ |= 0x00000001;
        x_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 x = 1;</code>
       */
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        x_ = 0;
        onChanged();
        return this;
      }

      // required sint32 y = 2;
      private int y_ ;
      /**
       * <code>required sint32 y = 2;</code>
       */
      public boolean hasY() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required sint32 y = 2;</code>
       */
      public int getY() {
        return y_;
      }
      /**
       * <code>required sint32 y = 2;</code>
       */
      public Builder setY(int value) {
        bitField0_ |= 0x00000002;
        y_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 y = 2;</code>
       */
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        y_ = 0;
        onChanged();
        return this;
      }

      // required sint32 w = 3;
      private int w_ ;
      /**
       * <code>required sint32 w = 3;</code>
       */
      public boolean hasW() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required sint32 w = 3;</code>
       */
      public int getW() {
        return w_;
      }
      /**
       * <code>required sint32 w = 3;</code>
       */
      public Builder setW(int value) {
        bitField0_ |= 0x00000004;
        w_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 w = 3;</code>
       */
      public Builder clearW() {
        bitField0_ = (bitField0_ & ~0x00000004);
        w_ = 0;
        onChanged();
        return this;
      }

      // required sint32 h = 4;
      private int h_ ;
      /**
       * <code>required sint32 h = 4;</code>
       */
      public boolean hasH() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required sint32 h = 4;</code>
       */
      public int getH() {
        return h_;
      }
      /**
       * <code>required sint32 h = 4;</code>
       */
      public Builder setH(int value) {
        bitField0_ |= 0x00000008;
        h_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 h = 4;</code>
       */
      public Builder clearH() {
        bitField0_ = (bitField0_ & ~0x00000008);
        h_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.webswing.directdraw.proto.RectangleProto)
    }

    static {
      defaultInstance = new RectangleProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.webswing.directdraw.proto.RectangleProto)
  }

  public interface EllipseProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required sint32 x = 1;
    /**
     * <code>required sint32 x = 1;</code>
     */
    boolean hasX();
    /**
     * <code>required sint32 x = 1;</code>
     */
    int getX();

    // required sint32 y = 2;
    /**
     * <code>required sint32 y = 2;</code>
     */
    boolean hasY();
    /**
     * <code>required sint32 y = 2;</code>
     */
    int getY();

    // required sint32 w = 3;
    /**
     * <code>required sint32 w = 3;</code>
     */
    boolean hasW();
    /**
     * <code>required sint32 w = 3;</code>
     */
    int getW();

    // required sint32 h = 4;
    /**
     * <code>required sint32 h = 4;</code>
     */
    boolean hasH();
    /**
     * <code>required sint32 h = 4;</code>
     */
    int getH();
  }
  /**
   * Protobuf type {@code org.webswing.directdraw.proto.EllipseProto}
   */
  public static final class EllipseProto extends
      com.google.protobuf.GeneratedMessage
      implements EllipseProtoOrBuilder {
    // Use EllipseProto.newBuilder() to construct.
    private EllipseProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private EllipseProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final EllipseProto defaultInstance;
    public static EllipseProto getDefaultInstance() {
      return defaultInstance;
    }

    public EllipseProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private EllipseProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              x_ = input.readSInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              y_ = input.readSInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              w_ = input.readSInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              h_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_EllipseProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_EllipseProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.webswing.directdraw.proto.Directdraw.EllipseProto.class, org.webswing.directdraw.proto.Directdraw.EllipseProto.Builder.class);
    }

    public static com.google.protobuf.Parser<EllipseProto> PARSER =
        new com.google.protobuf.AbstractParser<EllipseProto>() {
      public EllipseProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EllipseProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<EllipseProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required sint32 x = 1;
    public static final int X_FIELD_NUMBER = 1;
    private int x_;
    /**
     * <code>required sint32 x = 1;</code>
     */
    public boolean hasX() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sint32 x = 1;</code>
     */
    public int getX() {
      return x_;
    }

    // required sint32 y = 2;
    public static final int Y_FIELD_NUMBER = 2;
    private int y_;
    /**
     * <code>required sint32 y = 2;</code>
     */
    public boolean hasY() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required sint32 y = 2;</code>
     */
    public int getY() {
      return y_;
    }

    // required sint32 w = 3;
    public static final int W_FIELD_NUMBER = 3;
    private int w_;
    /**
     * <code>required sint32 w = 3;</code>
     */
    public boolean hasW() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required sint32 w = 3;</code>
     */
    public int getW() {
      return w_;
    }

    // required sint32 h = 4;
    public static final int H_FIELD_NUMBER = 4;
    private int h_;
    /**
     * <code>required sint32 h = 4;</code>
     */
    public boolean hasH() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required sint32 h = 4;</code>
     */
    public int getH() {
      return h_;
    }

    private void initFields() {
      x_ = 0;
      y_ = 0;
      w_ = 0;
      h_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasW()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasH()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, y_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(3, w_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeSInt32(4, h_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, y_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, w_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(4, h_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.webswing.directdraw.proto.Directdraw.EllipseProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.EllipseProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.EllipseProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.EllipseProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.EllipseProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.EllipseProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.EllipseProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.EllipseProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.EllipseProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.EllipseProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.webswing.directdraw.proto.Directdraw.EllipseProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.webswing.directdraw.proto.EllipseProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.webswing.directdraw.proto.Directdraw.EllipseProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_EllipseProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_EllipseProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.webswing.directdraw.proto.Directdraw.EllipseProto.class, org.webswing.directdraw.proto.Directdraw.EllipseProto.Builder.class);
      }

      // Construct using org.webswing.directdraw.proto.Directdraw.EllipseProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        x_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        y_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        w_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        h_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_EllipseProto_descriptor;
      }

      public org.webswing.directdraw.proto.Directdraw.EllipseProto getDefaultInstanceForType() {
        return org.webswing.directdraw.proto.Directdraw.EllipseProto.getDefaultInstance();
      }

      public org.webswing.directdraw.proto.Directdraw.EllipseProto build() {
        org.webswing.directdraw.proto.Directdraw.EllipseProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.webswing.directdraw.proto.Directdraw.EllipseProto buildPartial() {
        org.webswing.directdraw.proto.Directdraw.EllipseProto result = new org.webswing.directdraw.proto.Directdraw.EllipseProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.y_ = y_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.w_ = w_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.h_ = h_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.webswing.directdraw.proto.Directdraw.EllipseProto) {
          return mergeFrom((org.webswing.directdraw.proto.Directdraw.EllipseProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.webswing.directdraw.proto.Directdraw.EllipseProto other) {
        if (other == org.webswing.directdraw.proto.Directdraw.EllipseProto.getDefaultInstance()) return this;
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        if (other.hasW()) {
          setW(other.getW());
        }
        if (other.hasH()) {
          setH(other.getH());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasX()) {
          
          return false;
        }
        if (!hasY()) {
          
          return false;
        }
        if (!hasW()) {
          
          return false;
        }
        if (!hasH()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.webswing.directdraw.proto.Directdraw.EllipseProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.webswing.directdraw.proto.Directdraw.EllipseProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required sint32 x = 1;
      private int x_ ;
      /**
       * <code>required sint32 x = 1;</code>
       */
      public boolean hasX() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sint32 x = 1;</code>
       */
      public int getX() {
        return x_;
      }
      /**
       * <code>required sint32 x = 1;</code>
       */
      public Builder setX(int value) {
        bitField0_ |= 0x00000001;
        x_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 x = 1;</code>
       */
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        x_ = 0;
        onChanged();
        return this;
      }

      // required sint32 y = 2;
      private int y_ ;
      /**
       * <code>required sint32 y = 2;</code>
       */
      public boolean hasY() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required sint32 y = 2;</code>
       */
      public int getY() {
        return y_;
      }
      /**
       * <code>required sint32 y = 2;</code>
       */
      public Builder setY(int value) {
        bitField0_ |= 0x00000002;
        y_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 y = 2;</code>
       */
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        y_ = 0;
        onChanged();
        return this;
      }

      // required sint32 w = 3;
      private int w_ ;
      /**
       * <code>required sint32 w = 3;</code>
       */
      public boolean hasW() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required sint32 w = 3;</code>
       */
      public int getW() {
        return w_;
      }
      /**
       * <code>required sint32 w = 3;</code>
       */
      public Builder setW(int value) {
        bitField0_ |= 0x00000004;
        w_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 w = 3;</code>
       */
      public Builder clearW() {
        bitField0_ = (bitField0_ & ~0x00000004);
        w_ = 0;
        onChanged();
        return this;
      }

      // required sint32 h = 4;
      private int h_ ;
      /**
       * <code>required sint32 h = 4;</code>
       */
      public boolean hasH() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required sint32 h = 4;</code>
       */
      public int getH() {
        return h_;
      }
      /**
       * <code>required sint32 h = 4;</code>
       */
      public Builder setH(int value) {
        bitField0_ |= 0x00000008;
        h_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 h = 4;</code>
       */
      public Builder clearH() {
        bitField0_ = (bitField0_ & ~0x00000008);
        h_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.webswing.directdraw.proto.EllipseProto)
    }

    static {
      defaultInstance = new EllipseProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.webswing.directdraw.proto.EllipseProto)
  }

  public interface RoundRectangleProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required sint32 x = 1;
    /**
     * <code>required sint32 x = 1;</code>
     */
    boolean hasX();
    /**
     * <code>required sint32 x = 1;</code>
     */
    int getX();

    // required sint32 y = 2;
    /**
     * <code>required sint32 y = 2;</code>
     */
    boolean hasY();
    /**
     * <code>required sint32 y = 2;</code>
     */
    int getY();

    // required sint32 w = 3;
    /**
     * <code>required sint32 w = 3;</code>
     */
    boolean hasW();
    /**
     * <code>required sint32 w = 3;</code>
     */
    int getW();

    // required sint32 h = 4;
    /**
     * <code>required sint32 h = 4;</code>
     */
    boolean hasH();
    /**
     * <code>required sint32 h = 4;</code>
     */
    int getH();

    // optional sint32 arcW = 5;
    /**
     * <code>optional sint32 arcW = 5;</code>
     */
    boolean hasArcW();
    /**
     * <code>optional sint32 arcW = 5;</code>
     */
    int getArcW();

    // optional sint32 arcH = 6;
    /**
     * <code>optional sint32 arcH = 6;</code>
     */
    boolean hasArcH();
    /**
     * <code>optional sint32 arcH = 6;</code>
     */
    int getArcH();
  }
  /**
   * Protobuf type {@code org.webswing.directdraw.proto.RoundRectangleProto}
   */
  public static final class RoundRectangleProto extends
      com.google.protobuf.GeneratedMessage
      implements RoundRectangleProtoOrBuilder {
    // Use RoundRectangleProto.newBuilder() to construct.
    private RoundRectangleProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RoundRectangleProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RoundRectangleProto defaultInstance;
    public static RoundRectangleProto getDefaultInstance() {
      return defaultInstance;
    }

    public RoundRectangleProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RoundRectangleProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              x_ = input.readSInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              y_ = input.readSInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              w_ = input.readSInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              h_ = input.readSInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              arcW_ = input.readSInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              arcH_ = input.readSInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_RoundRectangleProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_RoundRectangleProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.webswing.directdraw.proto.Directdraw.RoundRectangleProto.class, org.webswing.directdraw.proto.Directdraw.RoundRectangleProto.Builder.class);
    }

    public static com.google.protobuf.Parser<RoundRectangleProto> PARSER =
        new com.google.protobuf.AbstractParser<RoundRectangleProto>() {
      public RoundRectangleProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RoundRectangleProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RoundRectangleProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required sint32 x = 1;
    public static final int X_FIELD_NUMBER = 1;
    private int x_;
    /**
     * <code>required sint32 x = 1;</code>
     */
    public boolean hasX() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sint32 x = 1;</code>
     */
    public int getX() {
      return x_;
    }

    // required sint32 y = 2;
    public static final int Y_FIELD_NUMBER = 2;
    private int y_;
    /**
     * <code>required sint32 y = 2;</code>
     */
    public boolean hasY() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required sint32 y = 2;</code>
     */
    public int getY() {
      return y_;
    }

    // required sint32 w = 3;
    public static final int W_FIELD_NUMBER = 3;
    private int w_;
    /**
     * <code>required sint32 w = 3;</code>
     */
    public boolean hasW() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required sint32 w = 3;</code>
     */
    public int getW() {
      return w_;
    }

    // required sint32 h = 4;
    public static final int H_FIELD_NUMBER = 4;
    private int h_;
    /**
     * <code>required sint32 h = 4;</code>
     */
    public boolean hasH() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required sint32 h = 4;</code>
     */
    public int getH() {
      return h_;
    }

    // optional sint32 arcW = 5;
    public static final int ARCW_FIELD_NUMBER = 5;
    private int arcW_;
    /**
     * <code>optional sint32 arcW = 5;</code>
     */
    public boolean hasArcW() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional sint32 arcW = 5;</code>
     */
    public int getArcW() {
      return arcW_;
    }

    // optional sint32 arcH = 6;
    public static final int ARCH_FIELD_NUMBER = 6;
    private int arcH_;
    /**
     * <code>optional sint32 arcH = 6;</code>
     */
    public boolean hasArcH() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional sint32 arcH = 6;</code>
     */
    public int getArcH() {
      return arcH_;
    }

    private void initFields() {
      x_ = 0;
      y_ = 0;
      w_ = 0;
      h_ = 0;
      arcW_ = 0;
      arcH_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasW()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasH()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, y_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(3, w_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeSInt32(4, h_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeSInt32(5, arcW_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeSInt32(6, arcH_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, y_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, w_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(4, h_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(5, arcW_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(6, arcH_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.webswing.directdraw.proto.Directdraw.RoundRectangleProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.RoundRectangleProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.RoundRectangleProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.RoundRectangleProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.RoundRectangleProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.RoundRectangleProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.RoundRectangleProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.RoundRectangleProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.RoundRectangleProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.RoundRectangleProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.webswing.directdraw.proto.Directdraw.RoundRectangleProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.webswing.directdraw.proto.RoundRectangleProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.webswing.directdraw.proto.Directdraw.RoundRectangleProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_RoundRectangleProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_RoundRectangleProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.webswing.directdraw.proto.Directdraw.RoundRectangleProto.class, org.webswing.directdraw.proto.Directdraw.RoundRectangleProto.Builder.class);
      }

      // Construct using org.webswing.directdraw.proto.Directdraw.RoundRectangleProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        x_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        y_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        w_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        h_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        arcW_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        arcH_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_RoundRectangleProto_descriptor;
      }

      public org.webswing.directdraw.proto.Directdraw.RoundRectangleProto getDefaultInstanceForType() {
        return org.webswing.directdraw.proto.Directdraw.RoundRectangleProto.getDefaultInstance();
      }

      public org.webswing.directdraw.proto.Directdraw.RoundRectangleProto build() {
        org.webswing.directdraw.proto.Directdraw.RoundRectangleProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.webswing.directdraw.proto.Directdraw.RoundRectangleProto buildPartial() {
        org.webswing.directdraw.proto.Directdraw.RoundRectangleProto result = new org.webswing.directdraw.proto.Directdraw.RoundRectangleProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.y_ = y_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.w_ = w_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.h_ = h_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.arcW_ = arcW_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.arcH_ = arcH_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.webswing.directdraw.proto.Directdraw.RoundRectangleProto) {
          return mergeFrom((org.webswing.directdraw.proto.Directdraw.RoundRectangleProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.webswing.directdraw.proto.Directdraw.RoundRectangleProto other) {
        if (other == org.webswing.directdraw.proto.Directdraw.RoundRectangleProto.getDefaultInstance()) return this;
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        if (other.hasW()) {
          setW(other.getW());
        }
        if (other.hasH()) {
          setH(other.getH());
        }
        if (other.hasArcW()) {
          setArcW(other.getArcW());
        }
        if (other.hasArcH()) {
          setArcH(other.getArcH());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasX()) {
          
          return false;
        }
        if (!hasY()) {
          
          return false;
        }
        if (!hasW()) {
          
          return false;
        }
        if (!hasH()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.webswing.directdraw.proto.Directdraw.RoundRectangleProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.webswing.directdraw.proto.Directdraw.RoundRectangleProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required sint32 x = 1;
      private int x_ ;
      /**
       * <code>required sint32 x = 1;</code>
       */
      public boolean hasX() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sint32 x = 1;</code>
       */
      public int getX() {
        return x_;
      }
      /**
       * <code>required sint32 x = 1;</code>
       */
      public Builder setX(int value) {
        bitField0_ |= 0x00000001;
        x_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 x = 1;</code>
       */
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        x_ = 0;
        onChanged();
        return this;
      }

      // required sint32 y = 2;
      private int y_ ;
      /**
       * <code>required sint32 y = 2;</code>
       */
      public boolean hasY() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required sint32 y = 2;</code>
       */
      public int getY() {
        return y_;
      }
      /**
       * <code>required sint32 y = 2;</code>
       */
      public Builder setY(int value) {
        bitField0_ |= 0x00000002;
        y_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 y = 2;</code>
       */
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        y_ = 0;
        onChanged();
        return this;
      }

      // required sint32 w = 3;
      private int w_ ;
      /**
       * <code>required sint32 w = 3;</code>
       */
      public boolean hasW() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required sint32 w = 3;</code>
       */
      public int getW() {
        return w_;
      }
      /**
       * <code>required sint32 w = 3;</code>
       */
      public Builder setW(int value) {
        bitField0_ |= 0x00000004;
        w_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 w = 3;</code>
       */
      public Builder clearW() {
        bitField0_ = (bitField0_ & ~0x00000004);
        w_ = 0;
        onChanged();
        return this;
      }

      // required sint32 h = 4;
      private int h_ ;
      /**
       * <code>required sint32 h = 4;</code>
       */
      public boolean hasH() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required sint32 h = 4;</code>
       */
      public int getH() {
        return h_;
      }
      /**
       * <code>required sint32 h = 4;</code>
       */
      public Builder setH(int value) {
        bitField0_ |= 0x00000008;
        h_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 h = 4;</code>
       */
      public Builder clearH() {
        bitField0_ = (bitField0_ & ~0x00000008);
        h_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 arcW = 5;
      private int arcW_ ;
      /**
       * <code>optional sint32 arcW = 5;</code>
       */
      public boolean hasArcW() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional sint32 arcW = 5;</code>
       */
      public int getArcW() {
        return arcW_;
      }
      /**
       * <code>optional sint32 arcW = 5;</code>
       */
      public Builder setArcW(int value) {
        bitField0_ |= 0x00000010;
        arcW_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 arcW = 5;</code>
       */
      public Builder clearArcW() {
        bitField0_ = (bitField0_ & ~0x00000010);
        arcW_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 arcH = 6;
      private int arcH_ ;
      /**
       * <code>optional sint32 arcH = 6;</code>
       */
      public boolean hasArcH() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional sint32 arcH = 6;</code>
       */
      public int getArcH() {
        return arcH_;
      }
      /**
       * <code>optional sint32 arcH = 6;</code>
       */
      public Builder setArcH(int value) {
        bitField0_ |= 0x00000020;
        arcH_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 arcH = 6;</code>
       */
      public Builder clearArcH() {
        bitField0_ = (bitField0_ & ~0x00000020);
        arcH_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.webswing.directdraw.proto.RoundRectangleProto)
    }

    static {
      defaultInstance = new RoundRectangleProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.webswing.directdraw.proto.RoundRectangleProto)
  }

  public interface ArcProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required sint32 x = 1;
    /**
     * <code>required sint32 x = 1;</code>
     */
    boolean hasX();
    /**
     * <code>required sint32 x = 1;</code>
     */
    int getX();

    // required sint32 y = 2;
    /**
     * <code>required sint32 y = 2;</code>
     */
    boolean hasY();
    /**
     * <code>required sint32 y = 2;</code>
     */
    int getY();

    // required sint32 w = 3;
    /**
     * <code>required sint32 w = 3;</code>
     */
    boolean hasW();
    /**
     * <code>required sint32 w = 3;</code>
     */
    int getW();

    // required sint32 h = 4;
    /**
     * <code>required sint32 h = 4;</code>
     */
    boolean hasH();
    /**
     * <code>required sint32 h = 4;</code>
     */
    int getH();

    // optional sint32 start = 5;
    /**
     * <code>optional sint32 start = 5;</code>
     */
    boolean hasStart();
    /**
     * <code>optional sint32 start = 5;</code>
     */
    int getStart();

    // optional sint32 extent = 6;
    /**
     * <code>optional sint32 extent = 6;</code>
     */
    boolean hasExtent();
    /**
     * <code>optional sint32 extent = 6;</code>
     */
    int getExtent();

    // optional .org.webswing.directdraw.proto.ArcProto.ArcTypeProto type = 7;
    /**
     * <code>optional .org.webswing.directdraw.proto.ArcProto.ArcTypeProto type = 7;</code>
     */
    boolean hasType();
    /**
     * <code>optional .org.webswing.directdraw.proto.ArcProto.ArcTypeProto type = 7;</code>
     */
    org.webswing.directdraw.proto.Directdraw.ArcProto.ArcTypeProto getType();
  }
  /**
   * Protobuf type {@code org.webswing.directdraw.proto.ArcProto}
   */
  public static final class ArcProto extends
      com.google.protobuf.GeneratedMessage
      implements ArcProtoOrBuilder {
    // Use ArcProto.newBuilder() to construct.
    private ArcProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ArcProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ArcProto defaultInstance;
    public static ArcProto getDefaultInstance() {
      return defaultInstance;
    }

    public ArcProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ArcProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              x_ = input.readSInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              y_ = input.readSInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              w_ = input.readSInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              h_ = input.readSInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              start_ = input.readSInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              extent_ = input.readSInt32();
              break;
            }
            case 56: {
              int rawValue = input.readEnum();
              org.webswing.directdraw.proto.Directdraw.ArcProto.ArcTypeProto value = org.webswing.directdraw.proto.Directdraw.ArcProto.ArcTypeProto.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(7, rawValue);
              } else {
                bitField0_ |= 0x00000040;
                type_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_ArcProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_ArcProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.webswing.directdraw.proto.Directdraw.ArcProto.class, org.webswing.directdraw.proto.Directdraw.ArcProto.Builder.class);
    }

    public static com.google.protobuf.Parser<ArcProto> PARSER =
        new com.google.protobuf.AbstractParser<ArcProto>() {
      public ArcProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ArcProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ArcProto> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code org.webswing.directdraw.proto.ArcProto.ArcTypeProto}
     */
    public enum ArcTypeProto
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>OPEN = 0;</code>
       */
      OPEN(0, 0),
      /**
       * <code>CHORD = 1;</code>
       */
      CHORD(1, 1),
      /**
       * <code>PIE = 2;</code>
       */
      PIE(2, 2),
      ;

      /**
       * <code>OPEN = 0;</code>
       */
      public static final int OPEN_VALUE = 0;
      /**
       * <code>CHORD = 1;</code>
       */
      public static final int CHORD_VALUE = 1;
      /**
       * <code>PIE = 2;</code>
       */
      public static final int PIE_VALUE = 2;


      public final int getNumber() { return value; }

      public static ArcTypeProto valueOf(int value) {
        switch (value) {
          case 0: return OPEN;
          case 1: return CHORD;
          case 2: return PIE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ArcTypeProto>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<ArcTypeProto>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ArcTypeProto>() {
              public ArcTypeProto findValueByNumber(int number) {
                return ArcTypeProto.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.webswing.directdraw.proto.Directdraw.ArcProto.getDescriptor().getEnumTypes().get(0);
      }

      private static final ArcTypeProto[] VALUES = values();

      public static ArcTypeProto valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private ArcTypeProto(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.webswing.directdraw.proto.ArcProto.ArcTypeProto)
    }

    private int bitField0_;
    // required sint32 x = 1;
    public static final int X_FIELD_NUMBER = 1;
    private int x_;
    /**
     * <code>required sint32 x = 1;</code>
     */
    public boolean hasX() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sint32 x = 1;</code>
     */
    public int getX() {
      return x_;
    }

    // required sint32 y = 2;
    public static final int Y_FIELD_NUMBER = 2;
    private int y_;
    /**
     * <code>required sint32 y = 2;</code>
     */
    public boolean hasY() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required sint32 y = 2;</code>
     */
    public int getY() {
      return y_;
    }

    // required sint32 w = 3;
    public static final int W_FIELD_NUMBER = 3;
    private int w_;
    /**
     * <code>required sint32 w = 3;</code>
     */
    public boolean hasW() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required sint32 w = 3;</code>
     */
    public int getW() {
      return w_;
    }

    // required sint32 h = 4;
    public static final int H_FIELD_NUMBER = 4;
    private int h_;
    /**
     * <code>required sint32 h = 4;</code>
     */
    public boolean hasH() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required sint32 h = 4;</code>
     */
    public int getH() {
      return h_;
    }

    // optional sint32 start = 5;
    public static final int START_FIELD_NUMBER = 5;
    private int start_;
    /**
     * <code>optional sint32 start = 5;</code>
     */
    public boolean hasStart() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional sint32 start = 5;</code>
     */
    public int getStart() {
      return start_;
    }

    // optional sint32 extent = 6;
    public static final int EXTENT_FIELD_NUMBER = 6;
    private int extent_;
    /**
     * <code>optional sint32 extent = 6;</code>
     */
    public boolean hasExtent() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional sint32 extent = 6;</code>
     */
    public int getExtent() {
      return extent_;
    }

    // optional .org.webswing.directdraw.proto.ArcProto.ArcTypeProto type = 7;
    public static final int TYPE_FIELD_NUMBER = 7;
    private org.webswing.directdraw.proto.Directdraw.ArcProto.ArcTypeProto type_;
    /**
     * <code>optional .org.webswing.directdraw.proto.ArcProto.ArcTypeProto type = 7;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.ArcProto.ArcTypeProto type = 7;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.ArcProto.ArcTypeProto getType() {
      return type_;
    }

    private void initFields() {
      x_ = 0;
      y_ = 0;
      w_ = 0;
      h_ = 0;
      start_ = 0;
      extent_ = 0;
      type_ = org.webswing.directdraw.proto.Directdraw.ArcProto.ArcTypeProto.OPEN;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasX()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasY()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasW()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasH()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, y_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(3, w_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeSInt32(4, h_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeSInt32(5, start_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeSInt32(6, extent_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeEnum(7, type_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, x_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, y_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, w_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(4, h_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(5, start_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(6, extent_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, type_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.webswing.directdraw.proto.Directdraw.ArcProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.ArcProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.ArcProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.ArcProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.ArcProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.ArcProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.ArcProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.ArcProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.ArcProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.ArcProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.webswing.directdraw.proto.Directdraw.ArcProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.webswing.directdraw.proto.ArcProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.webswing.directdraw.proto.Directdraw.ArcProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_ArcProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_ArcProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.webswing.directdraw.proto.Directdraw.ArcProto.class, org.webswing.directdraw.proto.Directdraw.ArcProto.Builder.class);
      }

      // Construct using org.webswing.directdraw.proto.Directdraw.ArcProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        x_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        y_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        w_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        h_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        start_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        extent_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        type_ = org.webswing.directdraw.proto.Directdraw.ArcProto.ArcTypeProto.OPEN;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_ArcProto_descriptor;
      }

      public org.webswing.directdraw.proto.Directdraw.ArcProto getDefaultInstanceForType() {
        return org.webswing.directdraw.proto.Directdraw.ArcProto.getDefaultInstance();
      }

      public org.webswing.directdraw.proto.Directdraw.ArcProto build() {
        org.webswing.directdraw.proto.Directdraw.ArcProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.webswing.directdraw.proto.Directdraw.ArcProto buildPartial() {
        org.webswing.directdraw.proto.Directdraw.ArcProto result = new org.webswing.directdraw.proto.Directdraw.ArcProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.y_ = y_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.w_ = w_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.h_ = h_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.start_ = start_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.extent_ = extent_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.type_ = type_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.webswing.directdraw.proto.Directdraw.ArcProto) {
          return mergeFrom((org.webswing.directdraw.proto.Directdraw.ArcProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.webswing.directdraw.proto.Directdraw.ArcProto other) {
        if (other == org.webswing.directdraw.proto.Directdraw.ArcProto.getDefaultInstance()) return this;
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        if (other.hasW()) {
          setW(other.getW());
        }
        if (other.hasH()) {
          setH(other.getH());
        }
        if (other.hasStart()) {
          setStart(other.getStart());
        }
        if (other.hasExtent()) {
          setExtent(other.getExtent());
        }
        if (other.hasType()) {
          setType(other.getType());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasX()) {
          
          return false;
        }
        if (!hasY()) {
          
          return false;
        }
        if (!hasW()) {
          
          return false;
        }
        if (!hasH()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.webswing.directdraw.proto.Directdraw.ArcProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.webswing.directdraw.proto.Directdraw.ArcProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required sint32 x = 1;
      private int x_ ;
      /**
       * <code>required sint32 x = 1;</code>
       */
      public boolean hasX() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sint32 x = 1;</code>
       */
      public int getX() {
        return x_;
      }
      /**
       * <code>required sint32 x = 1;</code>
       */
      public Builder setX(int value) {
        bitField0_ |= 0x00000001;
        x_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 x = 1;</code>
       */
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000001);
        x_ = 0;
        onChanged();
        return this;
      }

      // required sint32 y = 2;
      private int y_ ;
      /**
       * <code>required sint32 y = 2;</code>
       */
      public boolean hasY() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required sint32 y = 2;</code>
       */
      public int getY() {
        return y_;
      }
      /**
       * <code>required sint32 y = 2;</code>
       */
      public Builder setY(int value) {
        bitField0_ |= 0x00000002;
        y_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 y = 2;</code>
       */
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000002);
        y_ = 0;
        onChanged();
        return this;
      }

      // required sint32 w = 3;
      private int w_ ;
      /**
       * <code>required sint32 w = 3;</code>
       */
      public boolean hasW() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required sint32 w = 3;</code>
       */
      public int getW() {
        return w_;
      }
      /**
       * <code>required sint32 w = 3;</code>
       */
      public Builder setW(int value) {
        bitField0_ |= 0x00000004;
        w_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 w = 3;</code>
       */
      public Builder clearW() {
        bitField0_ = (bitField0_ & ~0x00000004);
        w_ = 0;
        onChanged();
        return this;
      }

      // required sint32 h = 4;
      private int h_ ;
      /**
       * <code>required sint32 h = 4;</code>
       */
      public boolean hasH() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required sint32 h = 4;</code>
       */
      public int getH() {
        return h_;
      }
      /**
       * <code>required sint32 h = 4;</code>
       */
      public Builder setH(int value) {
        bitField0_ |= 0x00000008;
        h_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 h = 4;</code>
       */
      public Builder clearH() {
        bitField0_ = (bitField0_ & ~0x00000008);
        h_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 start = 5;
      private int start_ ;
      /**
       * <code>optional sint32 start = 5;</code>
       */
      public boolean hasStart() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional sint32 start = 5;</code>
       */
      public int getStart() {
        return start_;
      }
      /**
       * <code>optional sint32 start = 5;</code>
       */
      public Builder setStart(int value) {
        bitField0_ |= 0x00000010;
        start_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 start = 5;</code>
       */
      public Builder clearStart() {
        bitField0_ = (bitField0_ & ~0x00000010);
        start_ = 0;
        onChanged();
        return this;
      }

      // optional sint32 extent = 6;
      private int extent_ ;
      /**
       * <code>optional sint32 extent = 6;</code>
       */
      public boolean hasExtent() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional sint32 extent = 6;</code>
       */
      public int getExtent() {
        return extent_;
      }
      /**
       * <code>optional sint32 extent = 6;</code>
       */
      public Builder setExtent(int value) {
        bitField0_ |= 0x00000020;
        extent_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 extent = 6;</code>
       */
      public Builder clearExtent() {
        bitField0_ = (bitField0_ & ~0x00000020);
        extent_ = 0;
        onChanged();
        return this;
      }

      // optional .org.webswing.directdraw.proto.ArcProto.ArcTypeProto type = 7;
      private org.webswing.directdraw.proto.Directdraw.ArcProto.ArcTypeProto type_ = org.webswing.directdraw.proto.Directdraw.ArcProto.ArcTypeProto.OPEN;
      /**
       * <code>optional .org.webswing.directdraw.proto.ArcProto.ArcTypeProto type = 7;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.ArcProto.ArcTypeProto type = 7;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.ArcProto.ArcTypeProto getType() {
        return type_;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.ArcProto.ArcTypeProto type = 7;</code>
       */
      public Builder setType(org.webswing.directdraw.proto.Directdraw.ArcProto.ArcTypeProto value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000040;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.ArcProto.ArcTypeProto type = 7;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000040);
        type_ = org.webswing.directdraw.proto.Directdraw.ArcProto.ArcTypeProto.OPEN;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.webswing.directdraw.proto.ArcProto)
    }

    static {
      defaultInstance = new ArcProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.webswing.directdraw.proto.ArcProto)
  }

  public interface PathProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required bool windingOdd = 1;
    /**
     * <code>required bool windingOdd = 1;</code>
     */
    boolean hasWindingOdd();
    /**
     * <code>required bool windingOdd = 1;</code>
     */
    boolean getWindingOdd();

    // repeated .org.webswing.directdraw.proto.PathProto.SegmentTypeProto type = 2;
    /**
     * <code>repeated .org.webswing.directdraw.proto.PathProto.SegmentTypeProto type = 2;</code>
     */
    java.util.List<org.webswing.directdraw.proto.Directdraw.PathProto.SegmentTypeProto> getTypeList();
    /**
     * <code>repeated .org.webswing.directdraw.proto.PathProto.SegmentTypeProto type = 2;</code>
     */
    int getTypeCount();
    /**
     * <code>repeated .org.webswing.directdraw.proto.PathProto.SegmentTypeProto type = 2;</code>
     */
    org.webswing.directdraw.proto.Directdraw.PathProto.SegmentTypeProto getType(int index);

    // repeated float points = 3;
    /**
     * <code>repeated float points = 3;</code>
     */
    java.util.List<java.lang.Float> getPointsList();
    /**
     * <code>repeated float points = 3;</code>
     */
    int getPointsCount();
    /**
     * <code>repeated float points = 3;</code>
     */
    float getPoints(int index);
  }
  /**
   * Protobuf type {@code org.webswing.directdraw.proto.PathProto}
   */
  public static final class PathProto extends
      com.google.protobuf.GeneratedMessage
      implements PathProtoOrBuilder {
    // Use PathProto.newBuilder() to construct.
    private PathProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PathProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PathProto defaultInstance;
    public static PathProto getDefaultInstance() {
      return defaultInstance;
    }

    public PathProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PathProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              windingOdd_ = input.readBool();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              org.webswing.directdraw.proto.Directdraw.PathProto.SegmentTypeProto value = org.webswing.directdraw.proto.Directdraw.PathProto.SegmentTypeProto.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  type_ = new java.util.ArrayList<org.webswing.directdraw.proto.Directdraw.PathProto.SegmentTypeProto>();
                  mutable_bitField0_ |= 0x00000002;
                }
                type_.add(value);
              }
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int rawValue = input.readEnum();
                org.webswing.directdraw.proto.Directdraw.PathProto.SegmentTypeProto value = org.webswing.directdraw.proto.Directdraw.PathProto.SegmentTypeProto.valueOf(rawValue);
                if (value == null) {
                  unknownFields.mergeVarintField(2, rawValue);
                } else {
                  if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                    type_ = new java.util.ArrayList<org.webswing.directdraw.proto.Directdraw.PathProto.SegmentTypeProto>();
                    mutable_bitField0_ |= 0x00000002;
                  }
                  type_.add(value);
                }
              }
              input.popLimit(oldLimit);
              break;
            }
            case 29: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                points_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000004;
              }
              points_.add(input.readFloat());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                points_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                points_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          type_ = java.util.Collections.unmodifiableList(type_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          points_ = java.util.Collections.unmodifiableList(points_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_PathProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_PathProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.webswing.directdraw.proto.Directdraw.PathProto.class, org.webswing.directdraw.proto.Directdraw.PathProto.Builder.class);
    }

    public static com.google.protobuf.Parser<PathProto> PARSER =
        new com.google.protobuf.AbstractParser<PathProto>() {
      public PathProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PathProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PathProto> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code org.webswing.directdraw.proto.PathProto.SegmentTypeProto}
     */
    public enum SegmentTypeProto
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>MOVE = 0;</code>
       */
      MOVE(0, 0),
      /**
       * <code>LINE = 1;</code>
       */
      LINE(1, 1),
      /**
       * <code>QUAD = 2;</code>
       */
      QUAD(2, 2),
      /**
       * <code>CUBIC = 3;</code>
       */
      CUBIC(3, 3),
      /**
       * <code>CLOSE = 4;</code>
       */
      CLOSE(4, 4),
      ;

      /**
       * <code>MOVE = 0;</code>
       */
      public static final int MOVE_VALUE = 0;
      /**
       * <code>LINE = 1;</code>
       */
      public static final int LINE_VALUE = 1;
      /**
       * <code>QUAD = 2;</code>
       */
      public static final int QUAD_VALUE = 2;
      /**
       * <code>CUBIC = 3;</code>
       */
      public static final int CUBIC_VALUE = 3;
      /**
       * <code>CLOSE = 4;</code>
       */
      public static final int CLOSE_VALUE = 4;


      public final int getNumber() { return value; }

      public static SegmentTypeProto valueOf(int value) {
        switch (value) {
          case 0: return MOVE;
          case 1: return LINE;
          case 2: return QUAD;
          case 3: return CUBIC;
          case 4: return CLOSE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SegmentTypeProto>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<SegmentTypeProto>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SegmentTypeProto>() {
              public SegmentTypeProto findValueByNumber(int number) {
                return SegmentTypeProto.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.webswing.directdraw.proto.Directdraw.PathProto.getDescriptor().getEnumTypes().get(0);
      }

      private static final SegmentTypeProto[] VALUES = values();

      public static SegmentTypeProto valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private SegmentTypeProto(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.webswing.directdraw.proto.PathProto.SegmentTypeProto)
    }

    private int bitField0_;
    // required bool windingOdd = 1;
    public static final int WINDINGODD_FIELD_NUMBER = 1;
    private boolean windingOdd_;
    /**
     * <code>required bool windingOdd = 1;</code>
     */
    public boolean hasWindingOdd() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required bool windingOdd = 1;</code>
     */
    public boolean getWindingOdd() {
      return windingOdd_;
    }

    // repeated .org.webswing.directdraw.proto.PathProto.SegmentTypeProto type = 2;
    public static final int TYPE_FIELD_NUMBER = 2;
    private java.util.List<org.webswing.directdraw.proto.Directdraw.PathProto.SegmentTypeProto> type_;
    /**
     * <code>repeated .org.webswing.directdraw.proto.PathProto.SegmentTypeProto type = 2;</code>
     */
    public java.util.List<org.webswing.directdraw.proto.Directdraw.PathProto.SegmentTypeProto> getTypeList() {
      return type_;
    }
    /**
     * <code>repeated .org.webswing.directdraw.proto.PathProto.SegmentTypeProto type = 2;</code>
     */
    public int getTypeCount() {
      return type_.size();
    }
    /**
     * <code>repeated .org.webswing.directdraw.proto.PathProto.SegmentTypeProto type = 2;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.PathProto.SegmentTypeProto getType(int index) {
      return type_.get(index);
    }

    // repeated float points = 3;
    public static final int POINTS_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Float> points_;
    /**
     * <code>repeated float points = 3;</code>
     */
    public java.util.List<java.lang.Float>
        getPointsList() {
      return points_;
    }
    /**
     * <code>repeated float points = 3;</code>
     */
    public int getPointsCount() {
      return points_.size();
    }
    /**
     * <code>repeated float points = 3;</code>
     */
    public float getPoints(int index) {
      return points_.get(index);
    }

    private void initFields() {
      windingOdd_ = false;
      type_ = java.util.Collections.emptyList();
      points_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasWindingOdd()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, windingOdd_);
      }
      for (int i = 0; i < type_.size(); i++) {
        output.writeEnum(2, type_.get(i).getNumber());
      }
      for (int i = 0; i < points_.size(); i++) {
        output.writeFloat(3, points_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, windingOdd_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < type_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(type_.get(i).getNumber());
        }
        size += dataSize;
        size += 1 * type_.size();
      }
      {
        int dataSize = 0;
        dataSize = 4 * getPointsList().size();
        size += dataSize;
        size += 1 * getPointsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.webswing.directdraw.proto.Directdraw.PathProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.PathProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.PathProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.PathProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.PathProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.PathProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.PathProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.PathProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.PathProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.PathProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.webswing.directdraw.proto.Directdraw.PathProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.webswing.directdraw.proto.PathProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.webswing.directdraw.proto.Directdraw.PathProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_PathProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_PathProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.webswing.directdraw.proto.Directdraw.PathProto.class, org.webswing.directdraw.proto.Directdraw.PathProto.Builder.class);
      }

      // Construct using org.webswing.directdraw.proto.Directdraw.PathProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        windingOdd_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        points_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_PathProto_descriptor;
      }

      public org.webswing.directdraw.proto.Directdraw.PathProto getDefaultInstanceForType() {
        return org.webswing.directdraw.proto.Directdraw.PathProto.getDefaultInstance();
      }

      public org.webswing.directdraw.proto.Directdraw.PathProto build() {
        org.webswing.directdraw.proto.Directdraw.PathProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.webswing.directdraw.proto.Directdraw.PathProto buildPartial() {
        org.webswing.directdraw.proto.Directdraw.PathProto result = new org.webswing.directdraw.proto.Directdraw.PathProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.windingOdd_ = windingOdd_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          type_ = java.util.Collections.unmodifiableList(type_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.type_ = type_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          points_ = java.util.Collections.unmodifiableList(points_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.points_ = points_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.webswing.directdraw.proto.Directdraw.PathProto) {
          return mergeFrom((org.webswing.directdraw.proto.Directdraw.PathProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.webswing.directdraw.proto.Directdraw.PathProto other) {
        if (other == org.webswing.directdraw.proto.Directdraw.PathProto.getDefaultInstance()) return this;
        if (other.hasWindingOdd()) {
          setWindingOdd(other.getWindingOdd());
        }
        if (!other.type_.isEmpty()) {
          if (type_.isEmpty()) {
            type_ = other.type_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureTypeIsMutable();
            type_.addAll(other.type_);
          }
          onChanged();
        }
        if (!other.points_.isEmpty()) {
          if (points_.isEmpty()) {
            points_ = other.points_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensurePointsIsMutable();
            points_.addAll(other.points_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasWindingOdd()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.webswing.directdraw.proto.Directdraw.PathProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.webswing.directdraw.proto.Directdraw.PathProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required bool windingOdd = 1;
      private boolean windingOdd_ ;
      /**
       * <code>required bool windingOdd = 1;</code>
       */
      public boolean hasWindingOdd() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required bool windingOdd = 1;</code>
       */
      public boolean getWindingOdd() {
        return windingOdd_;
      }
      /**
       * <code>required bool windingOdd = 1;</code>
       */
      public Builder setWindingOdd(boolean value) {
        bitField0_ |= 0x00000001;
        windingOdd_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool windingOdd = 1;</code>
       */
      public Builder clearWindingOdd() {
        bitField0_ = (bitField0_ & ~0x00000001);
        windingOdd_ = false;
        onChanged();
        return this;
      }

      // repeated .org.webswing.directdraw.proto.PathProto.SegmentTypeProto type = 2;
      private java.util.List<org.webswing.directdraw.proto.Directdraw.PathProto.SegmentTypeProto> type_ =
        java.util.Collections.emptyList();
      private void ensureTypeIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          type_ = new java.util.ArrayList<org.webswing.directdraw.proto.Directdraw.PathProto.SegmentTypeProto>(type_);
          bitField0_ |= 0x00000002;
        }
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.PathProto.SegmentTypeProto type = 2;</code>
       */
      public java.util.List<org.webswing.directdraw.proto.Directdraw.PathProto.SegmentTypeProto> getTypeList() {
        return java.util.Collections.unmodifiableList(type_);
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.PathProto.SegmentTypeProto type = 2;</code>
       */
      public int getTypeCount() {
        return type_.size();
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.PathProto.SegmentTypeProto type = 2;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.PathProto.SegmentTypeProto getType(int index) {
        return type_.get(index);
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.PathProto.SegmentTypeProto type = 2;</code>
       */
      public Builder setType(
          int index, org.webswing.directdraw.proto.Directdraw.PathProto.SegmentTypeProto value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTypeIsMutable();
        type_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.PathProto.SegmentTypeProto type = 2;</code>
       */
      public Builder addType(org.webswing.directdraw.proto.Directdraw.PathProto.SegmentTypeProto value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureTypeIsMutable();
        type_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.PathProto.SegmentTypeProto type = 2;</code>
       */
      public Builder addAllType(
          java.lang.Iterable<? extends org.webswing.directdraw.proto.Directdraw.PathProto.SegmentTypeProto> values) {
        ensureTypeIsMutable();
        super.addAll(values, type_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated .org.webswing.directdraw.proto.PathProto.SegmentTypeProto type = 2;</code>
       */
      public Builder clearType() {
        type_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      // repeated float points = 3;
      private java.util.List<java.lang.Float> points_ = java.util.Collections.emptyList();
      private void ensurePointsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          points_ = new java.util.ArrayList<java.lang.Float>(points_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated float points = 3;</code>
       */
      public java.util.List<java.lang.Float>
          getPointsList() {
        return java.util.Collections.unmodifiableList(points_);
      }
      /**
       * <code>repeated float points = 3;</code>
       */
      public int getPointsCount() {
        return points_.size();
      }
      /**
       * <code>repeated float points = 3;</code>
       */
      public float getPoints(int index) {
        return points_.get(index);
      }
      /**
       * <code>repeated float points = 3;</code>
       */
      public Builder setPoints(
          int index, float value) {
        ensurePointsIsMutable();
        points_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float points = 3;</code>
       */
      public Builder addPoints(float value) {
        ensurePointsIsMutable();
        points_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float points = 3;</code>
       */
      public Builder addAllPoints(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensurePointsIsMutable();
        super.addAll(values, points_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float points = 3;</code>
       */
      public Builder clearPoints() {
        points_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.webswing.directdraw.proto.PathProto)
    }

    static {
      defaultInstance = new PathProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.webswing.directdraw.proto.PathProto)
  }

  public interface FontProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required string family = 1;
    /**
     * <code>required string family = 1;</code>
     */
    boolean hasFamily();
    /**
     * <code>required string family = 1;</code>
     */
    java.lang.String getFamily();
    /**
     * <code>required string family = 1;</code>
     */
    com.google.protobuf.ByteString
        getFamilyBytes();

    // optional .org.webswing.directdraw.proto.FontProto.StyleProto style = 2;
    /**
     * <code>optional .org.webswing.directdraw.proto.FontProto.StyleProto style = 2;</code>
     */
    boolean hasStyle();
    /**
     * <code>optional .org.webswing.directdraw.proto.FontProto.StyleProto style = 2;</code>
     */
    org.webswing.directdraw.proto.Directdraw.FontProto.StyleProto getStyle();

    // optional uint32 size = 3;
    /**
     * <code>optional uint32 size = 3;</code>
     */
    boolean hasSize();
    /**
     * <code>optional uint32 size = 3;</code>
     */
    int getSize();

    // optional .org.webswing.directdraw.proto.TransformProto transform = 4;
    /**
     * <code>optional .org.webswing.directdraw.proto.TransformProto transform = 4;</code>
     */
    boolean hasTransform();
    /**
     * <code>optional .org.webswing.directdraw.proto.TransformProto transform = 4;</code>
     */
    org.webswing.directdraw.proto.Directdraw.TransformProto getTransform();
    /**
     * <code>optional .org.webswing.directdraw.proto.TransformProto transform = 4;</code>
     */
    org.webswing.directdraw.proto.Directdraw.TransformProtoOrBuilder getTransformOrBuilder();
  }
  /**
   * Protobuf type {@code org.webswing.directdraw.proto.FontProto}
   */
  public static final class FontProto extends
      com.google.protobuf.GeneratedMessage
      implements FontProtoOrBuilder {
    // Use FontProto.newBuilder() to construct.
    private FontProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FontProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FontProto defaultInstance;
    public static FontProto getDefaultInstance() {
      return defaultInstance;
    }

    public FontProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FontProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              family_ = input.readBytes();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              org.webswing.directdraw.proto.Directdraw.FontProto.StyleProto value = org.webswing.directdraw.proto.Directdraw.FontProto.StyleProto.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                style_ = value;
              }
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              size_ = input.readUInt32();
              break;
            }
            case 34: {
              org.webswing.directdraw.proto.Directdraw.TransformProto.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = transform_.toBuilder();
              }
              transform_ = input.readMessage(org.webswing.directdraw.proto.Directdraw.TransformProto.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(transform_);
                transform_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_FontProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_FontProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.webswing.directdraw.proto.Directdraw.FontProto.class, org.webswing.directdraw.proto.Directdraw.FontProto.Builder.class);
    }

    public static com.google.protobuf.Parser<FontProto> PARSER =
        new com.google.protobuf.AbstractParser<FontProto>() {
      public FontProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FontProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<FontProto> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code org.webswing.directdraw.proto.FontProto.StyleProto}
     */
    public enum StyleProto
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NORMAL = 0;</code>
       */
      NORMAL(0, 0),
      /**
       * <code>OBLIQUE = 1;</code>
       */
      OBLIQUE(1, 1),
      /**
       * <code>ITALIC = 2;</code>
       */
      ITALIC(2, 2),
      /**
       * <code>BOLDANDITALIC = 3;</code>
       */
      BOLDANDITALIC(3, 3),
      ;

      /**
       * <code>NORMAL = 0;</code>
       */
      public static final int NORMAL_VALUE = 0;
      /**
       * <code>OBLIQUE = 1;</code>
       */
      public static final int OBLIQUE_VALUE = 1;
      /**
       * <code>ITALIC = 2;</code>
       */
      public static final int ITALIC_VALUE = 2;
      /**
       * <code>BOLDANDITALIC = 3;</code>
       */
      public static final int BOLDANDITALIC_VALUE = 3;


      public final int getNumber() { return value; }

      public static StyleProto valueOf(int value) {
        switch (value) {
          case 0: return NORMAL;
          case 1: return OBLIQUE;
          case 2: return ITALIC;
          case 3: return BOLDANDITALIC;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<StyleProto>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<StyleProto>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<StyleProto>() {
              public StyleProto findValueByNumber(int number) {
                return StyleProto.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.webswing.directdraw.proto.Directdraw.FontProto.getDescriptor().getEnumTypes().get(0);
      }

      private static final StyleProto[] VALUES = values();

      public static StyleProto valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private StyleProto(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.webswing.directdraw.proto.FontProto.StyleProto)
    }

    private int bitField0_;
    // required string family = 1;
    public static final int FAMILY_FIELD_NUMBER = 1;
    private java.lang.Object family_;
    /**
     * <code>required string family = 1;</code>
     */
    public boolean hasFamily() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string family = 1;</code>
     */
    public java.lang.String getFamily() {
      java.lang.Object ref = family_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          family_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string family = 1;</code>
     */
    public com.google.protobuf.ByteString
        getFamilyBytes() {
      java.lang.Object ref = family_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        family_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // optional .org.webswing.directdraw.proto.FontProto.StyleProto style = 2;
    public static final int STYLE_FIELD_NUMBER = 2;
    private org.webswing.directdraw.proto.Directdraw.FontProto.StyleProto style_;
    /**
     * <code>optional .org.webswing.directdraw.proto.FontProto.StyleProto style = 2;</code>
     */
    public boolean hasStyle() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.FontProto.StyleProto style = 2;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.FontProto.StyleProto getStyle() {
      return style_;
    }

    // optional uint32 size = 3;
    public static final int SIZE_FIELD_NUMBER = 3;
    private int size_;
    /**
     * <code>optional uint32 size = 3;</code>
     */
    public boolean hasSize() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 size = 3;</code>
     */
    public int getSize() {
      return size_;
    }

    // optional .org.webswing.directdraw.proto.TransformProto transform = 4;
    public static final int TRANSFORM_FIELD_NUMBER = 4;
    private org.webswing.directdraw.proto.Directdraw.TransformProto transform_;
    /**
     * <code>optional .org.webswing.directdraw.proto.TransformProto transform = 4;</code>
     */
    public boolean hasTransform() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.TransformProto transform = 4;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.TransformProto getTransform() {
      return transform_;
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.TransformProto transform = 4;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.TransformProtoOrBuilder getTransformOrBuilder() {
      return transform_;
    }

    private void initFields() {
      family_ = "";
      style_ = org.webswing.directdraw.proto.Directdraw.FontProto.StyleProto.NORMAL;
      size_ = 0;
      transform_ = org.webswing.directdraw.proto.Directdraw.TransformProto.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasFamily()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getFamilyBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, style_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, size_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, transform_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getFamilyBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, style_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, size_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, transform_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.webswing.directdraw.proto.Directdraw.FontProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.FontProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.FontProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.FontProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.FontProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.FontProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.FontProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.FontProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.FontProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.FontProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.webswing.directdraw.proto.Directdraw.FontProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.webswing.directdraw.proto.FontProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.webswing.directdraw.proto.Directdraw.FontProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_FontProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_FontProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.webswing.directdraw.proto.Directdraw.FontProto.class, org.webswing.directdraw.proto.Directdraw.FontProto.Builder.class);
      }

      // Construct using org.webswing.directdraw.proto.Directdraw.FontProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTransformFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        family_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        style_ = org.webswing.directdraw.proto.Directdraw.FontProto.StyleProto.NORMAL;
        bitField0_ = (bitField0_ & ~0x00000002);
        size_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (transformBuilder_ == null) {
          transform_ = org.webswing.directdraw.proto.Directdraw.TransformProto.getDefaultInstance();
        } else {
          transformBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_FontProto_descriptor;
      }

      public org.webswing.directdraw.proto.Directdraw.FontProto getDefaultInstanceForType() {
        return org.webswing.directdraw.proto.Directdraw.FontProto.getDefaultInstance();
      }

      public org.webswing.directdraw.proto.Directdraw.FontProto build() {
        org.webswing.directdraw.proto.Directdraw.FontProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.webswing.directdraw.proto.Directdraw.FontProto buildPartial() {
        org.webswing.directdraw.proto.Directdraw.FontProto result = new org.webswing.directdraw.proto.Directdraw.FontProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.family_ = family_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.style_ = style_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.size_ = size_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (transformBuilder_ == null) {
          result.transform_ = transform_;
        } else {
          result.transform_ = transformBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.webswing.directdraw.proto.Directdraw.FontProto) {
          return mergeFrom((org.webswing.directdraw.proto.Directdraw.FontProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.webswing.directdraw.proto.Directdraw.FontProto other) {
        if (other == org.webswing.directdraw.proto.Directdraw.FontProto.getDefaultInstance()) return this;
        if (other.hasFamily()) {
          bitField0_ |= 0x00000001;
          family_ = other.family_;
          onChanged();
        }
        if (other.hasStyle()) {
          setStyle(other.getStyle());
        }
        if (other.hasSize()) {
          setSize(other.getSize());
        }
        if (other.hasTransform()) {
          mergeTransform(other.getTransform());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasFamily()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.webswing.directdraw.proto.Directdraw.FontProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.webswing.directdraw.proto.Directdraw.FontProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string family = 1;
      private java.lang.Object family_ = "";
      /**
       * <code>required string family = 1;</code>
       */
      public boolean hasFamily() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string family = 1;</code>
       */
      public java.lang.String getFamily() {
        java.lang.Object ref = family_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          family_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string family = 1;</code>
       */
      public com.google.protobuf.ByteString
          getFamilyBytes() {
        java.lang.Object ref = family_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          family_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string family = 1;</code>
       */
      public Builder setFamily(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        family_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string family = 1;</code>
       */
      public Builder clearFamily() {
        bitField0_ = (bitField0_ & ~0x00000001);
        family_ = getDefaultInstance().getFamily();
        onChanged();
        return this;
      }
      /**
       * <code>required string family = 1;</code>
       */
      public Builder setFamilyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        family_ = value;
        onChanged();
        return this;
      }

      // optional .org.webswing.directdraw.proto.FontProto.StyleProto style = 2;
      private org.webswing.directdraw.proto.Directdraw.FontProto.StyleProto style_ = org.webswing.directdraw.proto.Directdraw.FontProto.StyleProto.NORMAL;
      /**
       * <code>optional .org.webswing.directdraw.proto.FontProto.StyleProto style = 2;</code>
       */
      public boolean hasStyle() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.FontProto.StyleProto style = 2;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.FontProto.StyleProto getStyle() {
        return style_;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.FontProto.StyleProto style = 2;</code>
       */
      public Builder setStyle(org.webswing.directdraw.proto.Directdraw.FontProto.StyleProto value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        style_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.FontProto.StyleProto style = 2;</code>
       */
      public Builder clearStyle() {
        bitField0_ = (bitField0_ & ~0x00000002);
        style_ = org.webswing.directdraw.proto.Directdraw.FontProto.StyleProto.NORMAL;
        onChanged();
        return this;
      }

      // optional uint32 size = 3;
      private int size_ ;
      /**
       * <code>optional uint32 size = 3;</code>
       */
      public boolean hasSize() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 size = 3;</code>
       */
      public int getSize() {
        return size_;
      }
      /**
       * <code>optional uint32 size = 3;</code>
       */
      public Builder setSize(int value) {
        bitField0_ |= 0x00000004;
        size_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 size = 3;</code>
       */
      public Builder clearSize() {
        bitField0_ = (bitField0_ & ~0x00000004);
        size_ = 0;
        onChanged();
        return this;
      }

      // optional .org.webswing.directdraw.proto.TransformProto transform = 4;
      private org.webswing.directdraw.proto.Directdraw.TransformProto transform_ = org.webswing.directdraw.proto.Directdraw.TransformProto.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.TransformProto, org.webswing.directdraw.proto.Directdraw.TransformProto.Builder, org.webswing.directdraw.proto.Directdraw.TransformProtoOrBuilder> transformBuilder_;
      /**
       * <code>optional .org.webswing.directdraw.proto.TransformProto transform = 4;</code>
       */
      public boolean hasTransform() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.TransformProto transform = 4;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.TransformProto getTransform() {
        if (transformBuilder_ == null) {
          return transform_;
        } else {
          return transformBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.TransformProto transform = 4;</code>
       */
      public Builder setTransform(org.webswing.directdraw.proto.Directdraw.TransformProto value) {
        if (transformBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          transform_ = value;
          onChanged();
        } else {
          transformBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.TransformProto transform = 4;</code>
       */
      public Builder setTransform(
          org.webswing.directdraw.proto.Directdraw.TransformProto.Builder builderForValue) {
        if (transformBuilder_ == null) {
          transform_ = builderForValue.build();
          onChanged();
        } else {
          transformBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.TransformProto transform = 4;</code>
       */
      public Builder mergeTransform(org.webswing.directdraw.proto.Directdraw.TransformProto value) {
        if (transformBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              transform_ != org.webswing.directdraw.proto.Directdraw.TransformProto.getDefaultInstance()) {
            transform_ =
              org.webswing.directdraw.proto.Directdraw.TransformProto.newBuilder(transform_).mergeFrom(value).buildPartial();
          } else {
            transform_ = value;
          }
          onChanged();
        } else {
          transformBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.TransformProto transform = 4;</code>
       */
      public Builder clearTransform() {
        if (transformBuilder_ == null) {
          transform_ = org.webswing.directdraw.proto.Directdraw.TransformProto.getDefaultInstance();
          onChanged();
        } else {
          transformBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.TransformProto transform = 4;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.TransformProto.Builder getTransformBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getTransformFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.TransformProto transform = 4;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.TransformProtoOrBuilder getTransformOrBuilder() {
        if (transformBuilder_ != null) {
          return transformBuilder_.getMessageOrBuilder();
        } else {
          return transform_;
        }
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.TransformProto transform = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.TransformProto, org.webswing.directdraw.proto.Directdraw.TransformProto.Builder, org.webswing.directdraw.proto.Directdraw.TransformProtoOrBuilder> 
          getTransformFieldBuilder() {
        if (transformBuilder_ == null) {
          transformBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.webswing.directdraw.proto.Directdraw.TransformProto, org.webswing.directdraw.proto.Directdraw.TransformProto.Builder, org.webswing.directdraw.proto.Directdraw.TransformProtoOrBuilder>(
                  transform_,
                  getParentForChildren(),
                  isClean());
          transform_ = null;
        }
        return transformBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.webswing.directdraw.proto.FontProto)
    }

    static {
      defaultInstance = new FontProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.webswing.directdraw.proto.FontProto)
  }

  public interface StrokeProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required float width = 1;
    /**
     * <code>required float width = 1;</code>
     */
    boolean hasWidth();
    /**
     * <code>required float width = 1;</code>
     */
    float getWidth();

    // optional float miterLimit = 2;
    /**
     * <code>optional float miterLimit = 2;</code>
     */
    boolean hasMiterLimit();
    /**
     * <code>optional float miterLimit = 2;</code>
     */
    float getMiterLimit();

    // optional .org.webswing.directdraw.proto.StrokeProto.StrokeJoinProto join = 3;
    /**
     * <code>optional .org.webswing.directdraw.proto.StrokeProto.StrokeJoinProto join = 3;</code>
     */
    boolean hasJoin();
    /**
     * <code>optional .org.webswing.directdraw.proto.StrokeProto.StrokeJoinProto join = 3;</code>
     */
    org.webswing.directdraw.proto.Directdraw.StrokeProto.StrokeJoinProto getJoin();

    // optional .org.webswing.directdraw.proto.StrokeProto.StrokeCapProto cap = 4;
    /**
     * <code>optional .org.webswing.directdraw.proto.StrokeProto.StrokeCapProto cap = 4;</code>
     */
    boolean hasCap();
    /**
     * <code>optional .org.webswing.directdraw.proto.StrokeProto.StrokeCapProto cap = 4;</code>
     */
    org.webswing.directdraw.proto.Directdraw.StrokeProto.StrokeCapProto getCap();

    // repeated float dash = 5;
    /**
     * <code>repeated float dash = 5;</code>
     */
    java.util.List<java.lang.Float> getDashList();
    /**
     * <code>repeated float dash = 5;</code>
     */
    int getDashCount();
    /**
     * <code>repeated float dash = 5;</code>
     */
    float getDash(int index);

    // optional float dashOffset = 6;
    /**
     * <code>optional float dashOffset = 6;</code>
     */
    boolean hasDashOffset();
    /**
     * <code>optional float dashOffset = 6;</code>
     */
    float getDashOffset();
  }
  /**
   * Protobuf type {@code org.webswing.directdraw.proto.StrokeProto}
   */
  public static final class StrokeProto extends
      com.google.protobuf.GeneratedMessage
      implements StrokeProtoOrBuilder {
    // Use StrokeProto.newBuilder() to construct.
    private StrokeProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private StrokeProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final StrokeProto defaultInstance;
    public static StrokeProto getDefaultInstance() {
      return defaultInstance;
    }

    public StrokeProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private StrokeProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              width_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              miterLimit_ = input.readFloat();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              org.webswing.directdraw.proto.Directdraw.StrokeProto.StrokeJoinProto value = org.webswing.directdraw.proto.Directdraw.StrokeProto.StrokeJoinProto.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                join_ = value;
              }
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              org.webswing.directdraw.proto.Directdraw.StrokeProto.StrokeCapProto value = org.webswing.directdraw.proto.Directdraw.StrokeProto.StrokeCapProto.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                cap_ = value;
              }
              break;
            }
            case 45: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                dash_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000010;
              }
              dash_.add(input.readFloat());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                dash_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                dash_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 53: {
              bitField0_ |= 0x00000010;
              dashOffset_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          dash_ = java.util.Collections.unmodifiableList(dash_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_StrokeProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_StrokeProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.webswing.directdraw.proto.Directdraw.StrokeProto.class, org.webswing.directdraw.proto.Directdraw.StrokeProto.Builder.class);
    }

    public static com.google.protobuf.Parser<StrokeProto> PARSER =
        new com.google.protobuf.AbstractParser<StrokeProto>() {
      public StrokeProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StrokeProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<StrokeProto> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code org.webswing.directdraw.proto.StrokeProto.StrokeJoinProto}
     */
    public enum StrokeJoinProto
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>JOIN_MITER = 0;</code>
       */
      JOIN_MITER(0, 0),
      /**
       * <code>JOIN_ROUND = 1;</code>
       */
      JOIN_ROUND(1, 1),
      /**
       * <code>JOIN_BEVEL = 2;</code>
       */
      JOIN_BEVEL(2, 2),
      ;

      /**
       * <code>JOIN_MITER = 0;</code>
       */
      public static final int JOIN_MITER_VALUE = 0;
      /**
       * <code>JOIN_ROUND = 1;</code>
       */
      public static final int JOIN_ROUND_VALUE = 1;
      /**
       * <code>JOIN_BEVEL = 2;</code>
       */
      public static final int JOIN_BEVEL_VALUE = 2;


      public final int getNumber() { return value; }

      public static StrokeJoinProto valueOf(int value) {
        switch (value) {
          case 0: return JOIN_MITER;
          case 1: return JOIN_ROUND;
          case 2: return JOIN_BEVEL;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<StrokeJoinProto>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<StrokeJoinProto>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<StrokeJoinProto>() {
              public StrokeJoinProto findValueByNumber(int number) {
                return StrokeJoinProto.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.webswing.directdraw.proto.Directdraw.StrokeProto.getDescriptor().getEnumTypes().get(0);
      }

      private static final StrokeJoinProto[] VALUES = values();

      public static StrokeJoinProto valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private StrokeJoinProto(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.webswing.directdraw.proto.StrokeProto.StrokeJoinProto)
    }

    /**
     * Protobuf enum {@code org.webswing.directdraw.proto.StrokeProto.StrokeCapProto}
     */
    public enum StrokeCapProto
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>CAP_BUTT = 0;</code>
       */
      CAP_BUTT(0, 0),
      /**
       * <code>CAP_ROUND = 1;</code>
       */
      CAP_ROUND(1, 1),
      /**
       * <code>CAP_SQUARE = 2;</code>
       */
      CAP_SQUARE(2, 2),
      ;

      /**
       * <code>CAP_BUTT = 0;</code>
       */
      public static final int CAP_BUTT_VALUE = 0;
      /**
       * <code>CAP_ROUND = 1;</code>
       */
      public static final int CAP_ROUND_VALUE = 1;
      /**
       * <code>CAP_SQUARE = 2;</code>
       */
      public static final int CAP_SQUARE_VALUE = 2;


      public final int getNumber() { return value; }

      public static StrokeCapProto valueOf(int value) {
        switch (value) {
          case 0: return CAP_BUTT;
          case 1: return CAP_ROUND;
          case 2: return CAP_SQUARE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<StrokeCapProto>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<StrokeCapProto>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<StrokeCapProto>() {
              public StrokeCapProto findValueByNumber(int number) {
                return StrokeCapProto.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.webswing.directdraw.proto.Directdraw.StrokeProto.getDescriptor().getEnumTypes().get(1);
      }

      private static final StrokeCapProto[] VALUES = values();

      public static StrokeCapProto valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private StrokeCapProto(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.webswing.directdraw.proto.StrokeProto.StrokeCapProto)
    }

    private int bitField0_;
    // required float width = 1;
    public static final int WIDTH_FIELD_NUMBER = 1;
    private float width_;
    /**
     * <code>required float width = 1;</code>
     */
    public boolean hasWidth() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required float width = 1;</code>
     */
    public float getWidth() {
      return width_;
    }

    // optional float miterLimit = 2;
    public static final int MITERLIMIT_FIELD_NUMBER = 2;
    private float miterLimit_;
    /**
     * <code>optional float miterLimit = 2;</code>
     */
    public boolean hasMiterLimit() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float miterLimit = 2;</code>
     */
    public float getMiterLimit() {
      return miterLimit_;
    }

    // optional .org.webswing.directdraw.proto.StrokeProto.StrokeJoinProto join = 3;
    public static final int JOIN_FIELD_NUMBER = 3;
    private org.webswing.directdraw.proto.Directdraw.StrokeProto.StrokeJoinProto join_;
    /**
     * <code>optional .org.webswing.directdraw.proto.StrokeProto.StrokeJoinProto join = 3;</code>
     */
    public boolean hasJoin() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.StrokeProto.StrokeJoinProto join = 3;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.StrokeProto.StrokeJoinProto getJoin() {
      return join_;
    }

    // optional .org.webswing.directdraw.proto.StrokeProto.StrokeCapProto cap = 4;
    public static final int CAP_FIELD_NUMBER = 4;
    private org.webswing.directdraw.proto.Directdraw.StrokeProto.StrokeCapProto cap_;
    /**
     * <code>optional .org.webswing.directdraw.proto.StrokeProto.StrokeCapProto cap = 4;</code>
     */
    public boolean hasCap() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .org.webswing.directdraw.proto.StrokeProto.StrokeCapProto cap = 4;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.StrokeProto.StrokeCapProto getCap() {
      return cap_;
    }

    // repeated float dash = 5;
    public static final int DASH_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Float> dash_;
    /**
     * <code>repeated float dash = 5;</code>
     */
    public java.util.List<java.lang.Float>
        getDashList() {
      return dash_;
    }
    /**
     * <code>repeated float dash = 5;</code>
     */
    public int getDashCount() {
      return dash_.size();
    }
    /**
     * <code>repeated float dash = 5;</code>
     */
    public float getDash(int index) {
      return dash_.get(index);
    }

    // optional float dashOffset = 6;
    public static final int DASHOFFSET_FIELD_NUMBER = 6;
    private float dashOffset_;
    /**
     * <code>optional float dashOffset = 6;</code>
     */
    public boolean hasDashOffset() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float dashOffset = 6;</code>
     */
    public float getDashOffset() {
      return dashOffset_;
    }

    private void initFields() {
      width_ = 0F;
      miterLimit_ = 0F;
      join_ = org.webswing.directdraw.proto.Directdraw.StrokeProto.StrokeJoinProto.JOIN_MITER;
      cap_ = org.webswing.directdraw.proto.Directdraw.StrokeProto.StrokeCapProto.CAP_BUTT;
      dash_ = java.util.Collections.emptyList();
      dashOffset_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasWidth()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, width_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, miterLimit_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, join_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, cap_.getNumber());
      }
      for (int i = 0; i < dash_.size(); i++) {
        output.writeFloat(5, dash_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(6, dashOffset_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, width_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, miterLimit_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, join_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, cap_.getNumber());
      }
      {
        int dataSize = 0;
        dataSize = 4 * getDashList().size();
        size += dataSize;
        size += 1 * getDashList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, dashOffset_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.webswing.directdraw.proto.Directdraw.StrokeProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.StrokeProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.StrokeProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.StrokeProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.StrokeProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.StrokeProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.StrokeProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.StrokeProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.StrokeProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.StrokeProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.webswing.directdraw.proto.Directdraw.StrokeProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.webswing.directdraw.proto.StrokeProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.webswing.directdraw.proto.Directdraw.StrokeProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_StrokeProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_StrokeProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.webswing.directdraw.proto.Directdraw.StrokeProto.class, org.webswing.directdraw.proto.Directdraw.StrokeProto.Builder.class);
      }

      // Construct using org.webswing.directdraw.proto.Directdraw.StrokeProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        width_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000001);
        miterLimit_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        join_ = org.webswing.directdraw.proto.Directdraw.StrokeProto.StrokeJoinProto.JOIN_MITER;
        bitField0_ = (bitField0_ & ~0x00000004);
        cap_ = org.webswing.directdraw.proto.Directdraw.StrokeProto.StrokeCapProto.CAP_BUTT;
        bitField0_ = (bitField0_ & ~0x00000008);
        dash_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        dashOffset_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_StrokeProto_descriptor;
      }

      public org.webswing.directdraw.proto.Directdraw.StrokeProto getDefaultInstanceForType() {
        return org.webswing.directdraw.proto.Directdraw.StrokeProto.getDefaultInstance();
      }

      public org.webswing.directdraw.proto.Directdraw.StrokeProto build() {
        org.webswing.directdraw.proto.Directdraw.StrokeProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.webswing.directdraw.proto.Directdraw.StrokeProto buildPartial() {
        org.webswing.directdraw.proto.Directdraw.StrokeProto result = new org.webswing.directdraw.proto.Directdraw.StrokeProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.width_ = width_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.miterLimit_ = miterLimit_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.join_ = join_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.cap_ = cap_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          dash_ = java.util.Collections.unmodifiableList(dash_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.dash_ = dash_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.dashOffset_ = dashOffset_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.webswing.directdraw.proto.Directdraw.StrokeProto) {
          return mergeFrom((org.webswing.directdraw.proto.Directdraw.StrokeProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.webswing.directdraw.proto.Directdraw.StrokeProto other) {
        if (other == org.webswing.directdraw.proto.Directdraw.StrokeProto.getDefaultInstance()) return this;
        if (other.hasWidth()) {
          setWidth(other.getWidth());
        }
        if (other.hasMiterLimit()) {
          setMiterLimit(other.getMiterLimit());
        }
        if (other.hasJoin()) {
          setJoin(other.getJoin());
        }
        if (other.hasCap()) {
          setCap(other.getCap());
        }
        if (!other.dash_.isEmpty()) {
          if (dash_.isEmpty()) {
            dash_ = other.dash_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureDashIsMutable();
            dash_.addAll(other.dash_);
          }
          onChanged();
        }
        if (other.hasDashOffset()) {
          setDashOffset(other.getDashOffset());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasWidth()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.webswing.directdraw.proto.Directdraw.StrokeProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.webswing.directdraw.proto.Directdraw.StrokeProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required float width = 1;
      private float width_ ;
      /**
       * <code>required float width = 1;</code>
       */
      public boolean hasWidth() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required float width = 1;</code>
       */
      public float getWidth() {
        return width_;
      }
      /**
       * <code>required float width = 1;</code>
       */
      public Builder setWidth(float value) {
        bitField0_ |= 0x00000001;
        width_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float width = 1;</code>
       */
      public Builder clearWidth() {
        bitField0_ = (bitField0_ & ~0x00000001);
        width_ = 0F;
        onChanged();
        return this;
      }

      // optional float miterLimit = 2;
      private float miterLimit_ ;
      /**
       * <code>optional float miterLimit = 2;</code>
       */
      public boolean hasMiterLimit() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float miterLimit = 2;</code>
       */
      public float getMiterLimit() {
        return miterLimit_;
      }
      /**
       * <code>optional float miterLimit = 2;</code>
       */
      public Builder setMiterLimit(float value) {
        bitField0_ |= 0x00000002;
        miterLimit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float miterLimit = 2;</code>
       */
      public Builder clearMiterLimit() {
        bitField0_ = (bitField0_ & ~0x00000002);
        miterLimit_ = 0F;
        onChanged();
        return this;
      }

      // optional .org.webswing.directdraw.proto.StrokeProto.StrokeJoinProto join = 3;
      private org.webswing.directdraw.proto.Directdraw.StrokeProto.StrokeJoinProto join_ = org.webswing.directdraw.proto.Directdraw.StrokeProto.StrokeJoinProto.JOIN_MITER;
      /**
       * <code>optional .org.webswing.directdraw.proto.StrokeProto.StrokeJoinProto join = 3;</code>
       */
      public boolean hasJoin() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.StrokeProto.StrokeJoinProto join = 3;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.StrokeProto.StrokeJoinProto getJoin() {
        return join_;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.StrokeProto.StrokeJoinProto join = 3;</code>
       */
      public Builder setJoin(org.webswing.directdraw.proto.Directdraw.StrokeProto.StrokeJoinProto value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        join_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.StrokeProto.StrokeJoinProto join = 3;</code>
       */
      public Builder clearJoin() {
        bitField0_ = (bitField0_ & ~0x00000004);
        join_ = org.webswing.directdraw.proto.Directdraw.StrokeProto.StrokeJoinProto.JOIN_MITER;
        onChanged();
        return this;
      }

      // optional .org.webswing.directdraw.proto.StrokeProto.StrokeCapProto cap = 4;
      private org.webswing.directdraw.proto.Directdraw.StrokeProto.StrokeCapProto cap_ = org.webswing.directdraw.proto.Directdraw.StrokeProto.StrokeCapProto.CAP_BUTT;
      /**
       * <code>optional .org.webswing.directdraw.proto.StrokeProto.StrokeCapProto cap = 4;</code>
       */
      public boolean hasCap() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.StrokeProto.StrokeCapProto cap = 4;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.StrokeProto.StrokeCapProto getCap() {
        return cap_;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.StrokeProto.StrokeCapProto cap = 4;</code>
       */
      public Builder setCap(org.webswing.directdraw.proto.Directdraw.StrokeProto.StrokeCapProto value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        cap_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .org.webswing.directdraw.proto.StrokeProto.StrokeCapProto cap = 4;</code>
       */
      public Builder clearCap() {
        bitField0_ = (bitField0_ & ~0x00000008);
        cap_ = org.webswing.directdraw.proto.Directdraw.StrokeProto.StrokeCapProto.CAP_BUTT;
        onChanged();
        return this;
      }

      // repeated float dash = 5;
      private java.util.List<java.lang.Float> dash_ = java.util.Collections.emptyList();
      private void ensureDashIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          dash_ = new java.util.ArrayList<java.lang.Float>(dash_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated float dash = 5;</code>
       */
      public java.util.List<java.lang.Float>
          getDashList() {
        return java.util.Collections.unmodifiableList(dash_);
      }
      /**
       * <code>repeated float dash = 5;</code>
       */
      public int getDashCount() {
        return dash_.size();
      }
      /**
       * <code>repeated float dash = 5;</code>
       */
      public float getDash(int index) {
        return dash_.get(index);
      }
      /**
       * <code>repeated float dash = 5;</code>
       */
      public Builder setDash(
          int index, float value) {
        ensureDashIsMutable();
        dash_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float dash = 5;</code>
       */
      public Builder addDash(float value) {
        ensureDashIsMutable();
        dash_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float dash = 5;</code>
       */
      public Builder addAllDash(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureDashIsMutable();
        super.addAll(values, dash_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float dash = 5;</code>
       */
      public Builder clearDash() {
        dash_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      // optional float dashOffset = 6;
      private float dashOffset_ ;
      /**
       * <code>optional float dashOffset = 6;</code>
       */
      public boolean hasDashOffset() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional float dashOffset = 6;</code>
       */
      public float getDashOffset() {
        return dashOffset_;
      }
      /**
       * <code>optional float dashOffset = 6;</code>
       */
      public Builder setDashOffset(float value) {
        bitField0_ |= 0x00000020;
        dashOffset_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float dashOffset = 6;</code>
       */
      public Builder clearDashOffset() {
        bitField0_ = (bitField0_ & ~0x00000020);
        dashOffset_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.webswing.directdraw.proto.StrokeProto)
    }

    static {
      defaultInstance = new StrokeProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.webswing.directdraw.proto.StrokeProto)
  }

  public interface LinearGradientProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required sint32 xStart = 1;
    /**
     * <code>required sint32 xStart = 1;</code>
     */
    boolean hasXStart();
    /**
     * <code>required sint32 xStart = 1;</code>
     */
    int getXStart();

    // required sint32 yStart = 2;
    /**
     * <code>required sint32 yStart = 2;</code>
     */
    boolean hasYStart();
    /**
     * <code>required sint32 yStart = 2;</code>
     */
    int getYStart();

    // required sint32 xEnd = 3;
    /**
     * <code>required sint32 xEnd = 3;</code>
     */
    boolean hasXEnd();
    /**
     * <code>required sint32 xEnd = 3;</code>
     */
    int getXEnd();

    // required sint32 yEnd = 4;
    /**
     * <code>required sint32 yEnd = 4;</code>
     */
    boolean hasYEnd();
    /**
     * <code>required sint32 yEnd = 4;</code>
     */
    int getYEnd();

    // repeated fixed32 colors = 5;
    /**
     * <code>repeated fixed32 colors = 5;</code>
     */
    java.util.List<java.lang.Integer> getColorsList();
    /**
     * <code>repeated fixed32 colors = 5;</code>
     */
    int getColorsCount();
    /**
     * <code>repeated fixed32 colors = 5;</code>
     */
    int getColors(int index);

    // repeated float fractions = 6;
    /**
     * <code>repeated float fractions = 6;</code>
     */
    java.util.List<java.lang.Float> getFractionsList();
    /**
     * <code>repeated float fractions = 6;</code>
     */
    int getFractionsCount();
    /**
     * <code>repeated float fractions = 6;</code>
     */
    float getFractions(int index);

    // required .org.webswing.directdraw.proto.CyclicMethodProto repeat = 7;
    /**
     * <code>required .org.webswing.directdraw.proto.CyclicMethodProto repeat = 7;</code>
     */
    boolean hasRepeat();
    /**
     * <code>required .org.webswing.directdraw.proto.CyclicMethodProto repeat = 7;</code>
     */
    org.webswing.directdraw.proto.Directdraw.CyclicMethodProto getRepeat();
  }
  /**
   * Protobuf type {@code org.webswing.directdraw.proto.LinearGradientProto}
   */
  public static final class LinearGradientProto extends
      com.google.protobuf.GeneratedMessage
      implements LinearGradientProtoOrBuilder {
    // Use LinearGradientProto.newBuilder() to construct.
    private LinearGradientProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private LinearGradientProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final LinearGradientProto defaultInstance;
    public static LinearGradientProto getDefaultInstance() {
      return defaultInstance;
    }

    public LinearGradientProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private LinearGradientProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              xStart_ = input.readSInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              yStart_ = input.readSInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              xEnd_ = input.readSInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              yEnd_ = input.readSInt32();
              break;
            }
            case 45: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                colors_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              colors_.add(input.readFixed32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
                colors_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                colors_.add(input.readFixed32());
              }
              input.popLimit(limit);
              break;
            }
            case 53: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                fractions_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000020;
              }
              fractions_.add(input.readFloat());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                fractions_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                fractions_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 56: {
              int rawValue = input.readEnum();
              org.webswing.directdraw.proto.Directdraw.CyclicMethodProto value = org.webswing.directdraw.proto.Directdraw.CyclicMethodProto.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(7, rawValue);
              } else {
                bitField0_ |= 0x00000010;
                repeat_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          colors_ = java.util.Collections.unmodifiableList(colors_);
        }
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          fractions_ = java.util.Collections.unmodifiableList(fractions_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_LinearGradientProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_LinearGradientProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.webswing.directdraw.proto.Directdraw.LinearGradientProto.class, org.webswing.directdraw.proto.Directdraw.LinearGradientProto.Builder.class);
    }

    public static com.google.protobuf.Parser<LinearGradientProto> PARSER =
        new com.google.protobuf.AbstractParser<LinearGradientProto>() {
      public LinearGradientProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LinearGradientProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LinearGradientProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required sint32 xStart = 1;
    public static final int XSTART_FIELD_NUMBER = 1;
    private int xStart_;
    /**
     * <code>required sint32 xStart = 1;</code>
     */
    public boolean hasXStart() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sint32 xStart = 1;</code>
     */
    public int getXStart() {
      return xStart_;
    }

    // required sint32 yStart = 2;
    public static final int YSTART_FIELD_NUMBER = 2;
    private int yStart_;
    /**
     * <code>required sint32 yStart = 2;</code>
     */
    public boolean hasYStart() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required sint32 yStart = 2;</code>
     */
    public int getYStart() {
      return yStart_;
    }

    // required sint32 xEnd = 3;
    public static final int XEND_FIELD_NUMBER = 3;
    private int xEnd_;
    /**
     * <code>required sint32 xEnd = 3;</code>
     */
    public boolean hasXEnd() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required sint32 xEnd = 3;</code>
     */
    public int getXEnd() {
      return xEnd_;
    }

    // required sint32 yEnd = 4;
    public static final int YEND_FIELD_NUMBER = 4;
    private int yEnd_;
    /**
     * <code>required sint32 yEnd = 4;</code>
     */
    public boolean hasYEnd() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required sint32 yEnd = 4;</code>
     */
    public int getYEnd() {
      return yEnd_;
    }

    // repeated fixed32 colors = 5;
    public static final int COLORS_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> colors_;
    /**
     * <code>repeated fixed32 colors = 5;</code>
     */
    public java.util.List<java.lang.Integer>
        getColorsList() {
      return colors_;
    }
    /**
     * <code>repeated fixed32 colors = 5;</code>
     */
    public int getColorsCount() {
      return colors_.size();
    }
    /**
     * <code>repeated fixed32 colors = 5;</code>
     */
    public int getColors(int index) {
      return colors_.get(index);
    }

    // repeated float fractions = 6;
    public static final int FRACTIONS_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Float> fractions_;
    /**
     * <code>repeated float fractions = 6;</code>
     */
    public java.util.List<java.lang.Float>
        getFractionsList() {
      return fractions_;
    }
    /**
     * <code>repeated float fractions = 6;</code>
     */
    public int getFractionsCount() {
      return fractions_.size();
    }
    /**
     * <code>repeated float fractions = 6;</code>
     */
    public float getFractions(int index) {
      return fractions_.get(index);
    }

    // required .org.webswing.directdraw.proto.CyclicMethodProto repeat = 7;
    public static final int REPEAT_FIELD_NUMBER = 7;
    private org.webswing.directdraw.proto.Directdraw.CyclicMethodProto repeat_;
    /**
     * <code>required .org.webswing.directdraw.proto.CyclicMethodProto repeat = 7;</code>
     */
    public boolean hasRepeat() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required .org.webswing.directdraw.proto.CyclicMethodProto repeat = 7;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.CyclicMethodProto getRepeat() {
      return repeat_;
    }

    private void initFields() {
      xStart_ = 0;
      yStart_ = 0;
      xEnd_ = 0;
      yEnd_ = 0;
      colors_ = java.util.Collections.emptyList();
      fractions_ = java.util.Collections.emptyList();
      repeat_ = org.webswing.directdraw.proto.Directdraw.CyclicMethodProto.NO_CYCLE;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasXStart()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasYStart()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasXEnd()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasYEnd()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRepeat()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, xStart_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, yStart_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(3, xEnd_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeSInt32(4, yEnd_);
      }
      for (int i = 0; i < colors_.size(); i++) {
        output.writeFixed32(5, colors_.get(i));
      }
      for (int i = 0; i < fractions_.size(); i++) {
        output.writeFloat(6, fractions_.get(i));
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeEnum(7, repeat_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, xStart_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, yStart_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, xEnd_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(4, yEnd_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getColorsList().size();
        size += dataSize;
        size += 1 * getColorsList().size();
      }
      {
        int dataSize = 0;
        dataSize = 4 * getFractionsList().size();
        size += dataSize;
        size += 1 * getFractionsList().size();
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, repeat_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.webswing.directdraw.proto.Directdraw.LinearGradientProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.LinearGradientProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.LinearGradientProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.LinearGradientProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.LinearGradientProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.LinearGradientProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.LinearGradientProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.LinearGradientProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.LinearGradientProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.LinearGradientProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.webswing.directdraw.proto.Directdraw.LinearGradientProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.webswing.directdraw.proto.LinearGradientProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.webswing.directdraw.proto.Directdraw.LinearGradientProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_LinearGradientProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_LinearGradientProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.webswing.directdraw.proto.Directdraw.LinearGradientProto.class, org.webswing.directdraw.proto.Directdraw.LinearGradientProto.Builder.class);
      }

      // Construct using org.webswing.directdraw.proto.Directdraw.LinearGradientProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        xStart_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        yStart_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        xEnd_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        yEnd_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        colors_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        fractions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        repeat_ = org.webswing.directdraw.proto.Directdraw.CyclicMethodProto.NO_CYCLE;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_LinearGradientProto_descriptor;
      }

      public org.webswing.directdraw.proto.Directdraw.LinearGradientProto getDefaultInstanceForType() {
        return org.webswing.directdraw.proto.Directdraw.LinearGradientProto.getDefaultInstance();
      }

      public org.webswing.directdraw.proto.Directdraw.LinearGradientProto build() {
        org.webswing.directdraw.proto.Directdraw.LinearGradientProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.webswing.directdraw.proto.Directdraw.LinearGradientProto buildPartial() {
        org.webswing.directdraw.proto.Directdraw.LinearGradientProto result = new org.webswing.directdraw.proto.Directdraw.LinearGradientProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.xStart_ = xStart_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.yStart_ = yStart_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.xEnd_ = xEnd_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.yEnd_ = yEnd_;
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          colors_ = java.util.Collections.unmodifiableList(colors_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.colors_ = colors_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          fractions_ = java.util.Collections.unmodifiableList(fractions_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.fractions_ = fractions_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000010;
        }
        result.repeat_ = repeat_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.webswing.directdraw.proto.Directdraw.LinearGradientProto) {
          return mergeFrom((org.webswing.directdraw.proto.Directdraw.LinearGradientProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.webswing.directdraw.proto.Directdraw.LinearGradientProto other) {
        if (other == org.webswing.directdraw.proto.Directdraw.LinearGradientProto.getDefaultInstance()) return this;
        if (other.hasXStart()) {
          setXStart(other.getXStart());
        }
        if (other.hasYStart()) {
          setYStart(other.getYStart());
        }
        if (other.hasXEnd()) {
          setXEnd(other.getXEnd());
        }
        if (other.hasYEnd()) {
          setYEnd(other.getYEnd());
        }
        if (!other.colors_.isEmpty()) {
          if (colors_.isEmpty()) {
            colors_ = other.colors_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureColorsIsMutable();
            colors_.addAll(other.colors_);
          }
          onChanged();
        }
        if (!other.fractions_.isEmpty()) {
          if (fractions_.isEmpty()) {
            fractions_ = other.fractions_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureFractionsIsMutable();
            fractions_.addAll(other.fractions_);
          }
          onChanged();
        }
        if (other.hasRepeat()) {
          setRepeat(other.getRepeat());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasXStart()) {
          
          return false;
        }
        if (!hasYStart()) {
          
          return false;
        }
        if (!hasXEnd()) {
          
          return false;
        }
        if (!hasYEnd()) {
          
          return false;
        }
        if (!hasRepeat()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.webswing.directdraw.proto.Directdraw.LinearGradientProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.webswing.directdraw.proto.Directdraw.LinearGradientProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required sint32 xStart = 1;
      private int xStart_ ;
      /**
       * <code>required sint32 xStart = 1;</code>
       */
      public boolean hasXStart() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sint32 xStart = 1;</code>
       */
      public int getXStart() {
        return xStart_;
      }
      /**
       * <code>required sint32 xStart = 1;</code>
       */
      public Builder setXStart(int value) {
        bitField0_ |= 0x00000001;
        xStart_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 xStart = 1;</code>
       */
      public Builder clearXStart() {
        bitField0_ = (bitField0_ & ~0x00000001);
        xStart_ = 0;
        onChanged();
        return this;
      }

      // required sint32 yStart = 2;
      private int yStart_ ;
      /**
       * <code>required sint32 yStart = 2;</code>
       */
      public boolean hasYStart() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required sint32 yStart = 2;</code>
       */
      public int getYStart() {
        return yStart_;
      }
      /**
       * <code>required sint32 yStart = 2;</code>
       */
      public Builder setYStart(int value) {
        bitField0_ |= 0x00000002;
        yStart_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 yStart = 2;</code>
       */
      public Builder clearYStart() {
        bitField0_ = (bitField0_ & ~0x00000002);
        yStart_ = 0;
        onChanged();
        return this;
      }

      // required sint32 xEnd = 3;
      private int xEnd_ ;
      /**
       * <code>required sint32 xEnd = 3;</code>
       */
      public boolean hasXEnd() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required sint32 xEnd = 3;</code>
       */
      public int getXEnd() {
        return xEnd_;
      }
      /**
       * <code>required sint32 xEnd = 3;</code>
       */
      public Builder setXEnd(int value) {
        bitField0_ |= 0x00000004;
        xEnd_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 xEnd = 3;</code>
       */
      public Builder clearXEnd() {
        bitField0_ = (bitField0_ & ~0x00000004);
        xEnd_ = 0;
        onChanged();
        return this;
      }

      // required sint32 yEnd = 4;
      private int yEnd_ ;
      /**
       * <code>required sint32 yEnd = 4;</code>
       */
      public boolean hasYEnd() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required sint32 yEnd = 4;</code>
       */
      public int getYEnd() {
        return yEnd_;
      }
      /**
       * <code>required sint32 yEnd = 4;</code>
       */
      public Builder setYEnd(int value) {
        bitField0_ |= 0x00000008;
        yEnd_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 yEnd = 4;</code>
       */
      public Builder clearYEnd() {
        bitField0_ = (bitField0_ & ~0x00000008);
        yEnd_ = 0;
        onChanged();
        return this;
      }

      // repeated fixed32 colors = 5;
      private java.util.List<java.lang.Integer> colors_ = java.util.Collections.emptyList();
      private void ensureColorsIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          colors_ = new java.util.ArrayList<java.lang.Integer>(colors_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <code>repeated fixed32 colors = 5;</code>
       */
      public java.util.List<java.lang.Integer>
          getColorsList() {
        return java.util.Collections.unmodifiableList(colors_);
      }
      /**
       * <code>repeated fixed32 colors = 5;</code>
       */
      public int getColorsCount() {
        return colors_.size();
      }
      /**
       * <code>repeated fixed32 colors = 5;</code>
       */
      public int getColors(int index) {
        return colors_.get(index);
      }
      /**
       * <code>repeated fixed32 colors = 5;</code>
       */
      public Builder setColors(
          int index, int value) {
        ensureColorsIsMutable();
        colors_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated fixed32 colors = 5;</code>
       */
      public Builder addColors(int value) {
        ensureColorsIsMutable();
        colors_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated fixed32 colors = 5;</code>
       */
      public Builder addAllColors(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureColorsIsMutable();
        super.addAll(values, colors_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated fixed32 colors = 5;</code>
       */
      public Builder clearColors() {
        colors_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      // repeated float fractions = 6;
      private java.util.List<java.lang.Float> fractions_ = java.util.Collections.emptyList();
      private void ensureFractionsIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          fractions_ = new java.util.ArrayList<java.lang.Float>(fractions_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated float fractions = 6;</code>
       */
      public java.util.List<java.lang.Float>
          getFractionsList() {
        return java.util.Collections.unmodifiableList(fractions_);
      }
      /**
       * <code>repeated float fractions = 6;</code>
       */
      public int getFractionsCount() {
        return fractions_.size();
      }
      /**
       * <code>repeated float fractions = 6;</code>
       */
      public float getFractions(int index) {
        return fractions_.get(index);
      }
      /**
       * <code>repeated float fractions = 6;</code>
       */
      public Builder setFractions(
          int index, float value) {
        ensureFractionsIsMutable();
        fractions_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float fractions = 6;</code>
       */
      public Builder addFractions(float value) {
        ensureFractionsIsMutable();
        fractions_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float fractions = 6;</code>
       */
      public Builder addAllFractions(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureFractionsIsMutable();
        super.addAll(values, fractions_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float fractions = 6;</code>
       */
      public Builder clearFractions() {
        fractions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // required .org.webswing.directdraw.proto.CyclicMethodProto repeat = 7;
      private org.webswing.directdraw.proto.Directdraw.CyclicMethodProto repeat_ = org.webswing.directdraw.proto.Directdraw.CyclicMethodProto.NO_CYCLE;
      /**
       * <code>required .org.webswing.directdraw.proto.CyclicMethodProto repeat = 7;</code>
       */
      public boolean hasRepeat() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required .org.webswing.directdraw.proto.CyclicMethodProto repeat = 7;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.CyclicMethodProto getRepeat() {
        return repeat_;
      }
      /**
       * <code>required .org.webswing.directdraw.proto.CyclicMethodProto repeat = 7;</code>
       */
      public Builder setRepeat(org.webswing.directdraw.proto.Directdraw.CyclicMethodProto value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000040;
        repeat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .org.webswing.directdraw.proto.CyclicMethodProto repeat = 7;</code>
       */
      public Builder clearRepeat() {
        bitField0_ = (bitField0_ & ~0x00000040);
        repeat_ = org.webswing.directdraw.proto.Directdraw.CyclicMethodProto.NO_CYCLE;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.webswing.directdraw.proto.LinearGradientProto)
    }

    static {
      defaultInstance = new LinearGradientProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.webswing.directdraw.proto.LinearGradientProto)
  }

  public interface RadialGradientProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required sint32 xCenter = 1;
    /**
     * <code>required sint32 xCenter = 1;</code>
     */
    boolean hasXCenter();
    /**
     * <code>required sint32 xCenter = 1;</code>
     */
    int getXCenter();

    // required sint32 yCenter = 2;
    /**
     * <code>required sint32 yCenter = 2;</code>
     */
    boolean hasYCenter();
    /**
     * <code>required sint32 yCenter = 2;</code>
     */
    int getYCenter();

    // required sint32 xFocus = 3;
    /**
     * <code>required sint32 xFocus = 3;</code>
     */
    boolean hasXFocus();
    /**
     * <code>required sint32 xFocus = 3;</code>
     */
    int getXFocus();

    // required sint32 yFocus = 4;
    /**
     * <code>required sint32 yFocus = 4;</code>
     */
    boolean hasYFocus();
    /**
     * <code>required sint32 yFocus = 4;</code>
     */
    int getYFocus();

    // required sint32 radius = 5;
    /**
     * <code>required sint32 radius = 5;</code>
     */
    boolean hasRadius();
    /**
     * <code>required sint32 radius = 5;</code>
     */
    int getRadius();

    // repeated fixed32 colors = 6;
    /**
     * <code>repeated fixed32 colors = 6;</code>
     */
    java.util.List<java.lang.Integer> getColorsList();
    /**
     * <code>repeated fixed32 colors = 6;</code>
     */
    int getColorsCount();
    /**
     * <code>repeated fixed32 colors = 6;</code>
     */
    int getColors(int index);

    // repeated float fractions = 7;
    /**
     * <code>repeated float fractions = 7;</code>
     */
    java.util.List<java.lang.Float> getFractionsList();
    /**
     * <code>repeated float fractions = 7;</code>
     */
    int getFractionsCount();
    /**
     * <code>repeated float fractions = 7;</code>
     */
    float getFractions(int index);

    // required .org.webswing.directdraw.proto.CyclicMethodProto repeat = 8;
    /**
     * <code>required .org.webswing.directdraw.proto.CyclicMethodProto repeat = 8;</code>
     */
    boolean hasRepeat();
    /**
     * <code>required .org.webswing.directdraw.proto.CyclicMethodProto repeat = 8;</code>
     */
    org.webswing.directdraw.proto.Directdraw.CyclicMethodProto getRepeat();
  }
  /**
   * Protobuf type {@code org.webswing.directdraw.proto.RadialGradientProto}
   */
  public static final class RadialGradientProto extends
      com.google.protobuf.GeneratedMessage
      implements RadialGradientProtoOrBuilder {
    // Use RadialGradientProto.newBuilder() to construct.
    private RadialGradientProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RadialGradientProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RadialGradientProto defaultInstance;
    public static RadialGradientProto getDefaultInstance() {
      return defaultInstance;
    }

    public RadialGradientProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RadialGradientProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              xCenter_ = input.readSInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              yCenter_ = input.readSInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              xFocus_ = input.readSInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              yFocus_ = input.readSInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              radius_ = input.readSInt32();
              break;
            }
            case 53: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                colors_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              colors_.add(input.readFixed32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                colors_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                colors_.add(input.readFixed32());
              }
              input.popLimit(limit);
              break;
            }
            case 61: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                fractions_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000040;
              }
              fractions_.add(input.readFloat());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                fractions_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                fractions_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              int rawValue = input.readEnum();
              org.webswing.directdraw.proto.Directdraw.CyclicMethodProto value = org.webswing.directdraw.proto.Directdraw.CyclicMethodProto.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(8, rawValue);
              } else {
                bitField0_ |= 0x00000020;
                repeat_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          colors_ = java.util.Collections.unmodifiableList(colors_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          fractions_ = java.util.Collections.unmodifiableList(fractions_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_RadialGradientProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_RadialGradientProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.webswing.directdraw.proto.Directdraw.RadialGradientProto.class, org.webswing.directdraw.proto.Directdraw.RadialGradientProto.Builder.class);
    }

    public static com.google.protobuf.Parser<RadialGradientProto> PARSER =
        new com.google.protobuf.AbstractParser<RadialGradientProto>() {
      public RadialGradientProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RadialGradientProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RadialGradientProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required sint32 xCenter = 1;
    public static final int XCENTER_FIELD_NUMBER = 1;
    private int xCenter_;
    /**
     * <code>required sint32 xCenter = 1;</code>
     */
    public boolean hasXCenter() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required sint32 xCenter = 1;</code>
     */
    public int getXCenter() {
      return xCenter_;
    }

    // required sint32 yCenter = 2;
    public static final int YCENTER_FIELD_NUMBER = 2;
    private int yCenter_;
    /**
     * <code>required sint32 yCenter = 2;</code>
     */
    public boolean hasYCenter() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required sint32 yCenter = 2;</code>
     */
    public int getYCenter() {
      return yCenter_;
    }

    // required sint32 xFocus = 3;
    public static final int XFOCUS_FIELD_NUMBER = 3;
    private int xFocus_;
    /**
     * <code>required sint32 xFocus = 3;</code>
     */
    public boolean hasXFocus() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required sint32 xFocus = 3;</code>
     */
    public int getXFocus() {
      return xFocus_;
    }

    // required sint32 yFocus = 4;
    public static final int YFOCUS_FIELD_NUMBER = 4;
    private int yFocus_;
    /**
     * <code>required sint32 yFocus = 4;</code>
     */
    public boolean hasYFocus() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required sint32 yFocus = 4;</code>
     */
    public int getYFocus() {
      return yFocus_;
    }

    // required sint32 radius = 5;
    public static final int RADIUS_FIELD_NUMBER = 5;
    private int radius_;
    /**
     * <code>required sint32 radius = 5;</code>
     */
    public boolean hasRadius() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required sint32 radius = 5;</code>
     */
    public int getRadius() {
      return radius_;
    }

    // repeated fixed32 colors = 6;
    public static final int COLORS_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> colors_;
    /**
     * <code>repeated fixed32 colors = 6;</code>
     */
    public java.util.List<java.lang.Integer>
        getColorsList() {
      return colors_;
    }
    /**
     * <code>repeated fixed32 colors = 6;</code>
     */
    public int getColorsCount() {
      return colors_.size();
    }
    /**
     * <code>repeated fixed32 colors = 6;</code>
     */
    public int getColors(int index) {
      return colors_.get(index);
    }

    // repeated float fractions = 7;
    public static final int FRACTIONS_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Float> fractions_;
    /**
     * <code>repeated float fractions = 7;</code>
     */
    public java.util.List<java.lang.Float>
        getFractionsList() {
      return fractions_;
    }
    /**
     * <code>repeated float fractions = 7;</code>
     */
    public int getFractionsCount() {
      return fractions_.size();
    }
    /**
     * <code>repeated float fractions = 7;</code>
     */
    public float getFractions(int index) {
      return fractions_.get(index);
    }

    // required .org.webswing.directdraw.proto.CyclicMethodProto repeat = 8;
    public static final int REPEAT_FIELD_NUMBER = 8;
    private org.webswing.directdraw.proto.Directdraw.CyclicMethodProto repeat_;
    /**
     * <code>required .org.webswing.directdraw.proto.CyclicMethodProto repeat = 8;</code>
     */
    public boolean hasRepeat() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required .org.webswing.directdraw.proto.CyclicMethodProto repeat = 8;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.CyclicMethodProto getRepeat() {
      return repeat_;
    }

    private void initFields() {
      xCenter_ = 0;
      yCenter_ = 0;
      xFocus_ = 0;
      yFocus_ = 0;
      radius_ = 0;
      colors_ = java.util.Collections.emptyList();
      fractions_ = java.util.Collections.emptyList();
      repeat_ = org.webswing.directdraw.proto.Directdraw.CyclicMethodProto.NO_CYCLE;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasXCenter()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasYCenter()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasXFocus()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasYFocus()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRadius()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRepeat()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSInt32(1, xCenter_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, yCenter_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSInt32(3, xFocus_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeSInt32(4, yFocus_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeSInt32(5, radius_);
      }
      for (int i = 0; i < colors_.size(); i++) {
        output.writeFixed32(6, colors_.get(i));
      }
      for (int i = 0; i < fractions_.size(); i++) {
        output.writeFloat(7, fractions_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeEnum(8, repeat_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(1, xCenter_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, yCenter_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(3, xFocus_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(4, yFocus_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(5, radius_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getColorsList().size();
        size += dataSize;
        size += 1 * getColorsList().size();
      }
      {
        int dataSize = 0;
        dataSize = 4 * getFractionsList().size();
        size += dataSize;
        size += 1 * getFractionsList().size();
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, repeat_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.webswing.directdraw.proto.Directdraw.RadialGradientProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.RadialGradientProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.RadialGradientProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.RadialGradientProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.RadialGradientProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.RadialGradientProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.RadialGradientProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.RadialGradientProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.RadialGradientProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.RadialGradientProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.webswing.directdraw.proto.Directdraw.RadialGradientProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.webswing.directdraw.proto.RadialGradientProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.webswing.directdraw.proto.Directdraw.RadialGradientProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_RadialGradientProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_RadialGradientProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.webswing.directdraw.proto.Directdraw.RadialGradientProto.class, org.webswing.directdraw.proto.Directdraw.RadialGradientProto.Builder.class);
      }

      // Construct using org.webswing.directdraw.proto.Directdraw.RadialGradientProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        xCenter_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        yCenter_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        xFocus_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        yFocus_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        radius_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        colors_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        fractions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        repeat_ = org.webswing.directdraw.proto.Directdraw.CyclicMethodProto.NO_CYCLE;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_RadialGradientProto_descriptor;
      }

      public org.webswing.directdraw.proto.Directdraw.RadialGradientProto getDefaultInstanceForType() {
        return org.webswing.directdraw.proto.Directdraw.RadialGradientProto.getDefaultInstance();
      }

      public org.webswing.directdraw.proto.Directdraw.RadialGradientProto build() {
        org.webswing.directdraw.proto.Directdraw.RadialGradientProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.webswing.directdraw.proto.Directdraw.RadialGradientProto buildPartial() {
        org.webswing.directdraw.proto.Directdraw.RadialGradientProto result = new org.webswing.directdraw.proto.Directdraw.RadialGradientProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.xCenter_ = xCenter_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.yCenter_ = yCenter_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.xFocus_ = xFocus_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.yFocus_ = yFocus_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.radius_ = radius_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          colors_ = java.util.Collections.unmodifiableList(colors_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.colors_ = colors_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          fractions_ = java.util.Collections.unmodifiableList(fractions_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.fractions_ = fractions_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000020;
        }
        result.repeat_ = repeat_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.webswing.directdraw.proto.Directdraw.RadialGradientProto) {
          return mergeFrom((org.webswing.directdraw.proto.Directdraw.RadialGradientProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.webswing.directdraw.proto.Directdraw.RadialGradientProto other) {
        if (other == org.webswing.directdraw.proto.Directdraw.RadialGradientProto.getDefaultInstance()) return this;
        if (other.hasXCenter()) {
          setXCenter(other.getXCenter());
        }
        if (other.hasYCenter()) {
          setYCenter(other.getYCenter());
        }
        if (other.hasXFocus()) {
          setXFocus(other.getXFocus());
        }
        if (other.hasYFocus()) {
          setYFocus(other.getYFocus());
        }
        if (other.hasRadius()) {
          setRadius(other.getRadius());
        }
        if (!other.colors_.isEmpty()) {
          if (colors_.isEmpty()) {
            colors_ = other.colors_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureColorsIsMutable();
            colors_.addAll(other.colors_);
          }
          onChanged();
        }
        if (!other.fractions_.isEmpty()) {
          if (fractions_.isEmpty()) {
            fractions_ = other.fractions_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureFractionsIsMutable();
            fractions_.addAll(other.fractions_);
          }
          onChanged();
        }
        if (other.hasRepeat()) {
          setRepeat(other.getRepeat());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasXCenter()) {
          
          return false;
        }
        if (!hasYCenter()) {
          
          return false;
        }
        if (!hasXFocus()) {
          
          return false;
        }
        if (!hasYFocus()) {
          
          return false;
        }
        if (!hasRadius()) {
          
          return false;
        }
        if (!hasRepeat()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.webswing.directdraw.proto.Directdraw.RadialGradientProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.webswing.directdraw.proto.Directdraw.RadialGradientProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required sint32 xCenter = 1;
      private int xCenter_ ;
      /**
       * <code>required sint32 xCenter = 1;</code>
       */
      public boolean hasXCenter() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required sint32 xCenter = 1;</code>
       */
      public int getXCenter() {
        return xCenter_;
      }
      /**
       * <code>required sint32 xCenter = 1;</code>
       */
      public Builder setXCenter(int value) {
        bitField0_ |= 0x00000001;
        xCenter_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 xCenter = 1;</code>
       */
      public Builder clearXCenter() {
        bitField0_ = (bitField0_ & ~0x00000001);
        xCenter_ = 0;
        onChanged();
        return this;
      }

      // required sint32 yCenter = 2;
      private int yCenter_ ;
      /**
       * <code>required sint32 yCenter = 2;</code>
       */
      public boolean hasYCenter() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required sint32 yCenter = 2;</code>
       */
      public int getYCenter() {
        return yCenter_;
      }
      /**
       * <code>required sint32 yCenter = 2;</code>
       */
      public Builder setYCenter(int value) {
        bitField0_ |= 0x00000002;
        yCenter_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 yCenter = 2;</code>
       */
      public Builder clearYCenter() {
        bitField0_ = (bitField0_ & ~0x00000002);
        yCenter_ = 0;
        onChanged();
        return this;
      }

      // required sint32 xFocus = 3;
      private int xFocus_ ;
      /**
       * <code>required sint32 xFocus = 3;</code>
       */
      public boolean hasXFocus() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required sint32 xFocus = 3;</code>
       */
      public int getXFocus() {
        return xFocus_;
      }
      /**
       * <code>required sint32 xFocus = 3;</code>
       */
      public Builder setXFocus(int value) {
        bitField0_ |= 0x00000004;
        xFocus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 xFocus = 3;</code>
       */
      public Builder clearXFocus() {
        bitField0_ = (bitField0_ & ~0x00000004);
        xFocus_ = 0;
        onChanged();
        return this;
      }

      // required sint32 yFocus = 4;
      private int yFocus_ ;
      /**
       * <code>required sint32 yFocus = 4;</code>
       */
      public boolean hasYFocus() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required sint32 yFocus = 4;</code>
       */
      public int getYFocus() {
        return yFocus_;
      }
      /**
       * <code>required sint32 yFocus = 4;</code>
       */
      public Builder setYFocus(int value) {
        bitField0_ |= 0x00000008;
        yFocus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 yFocus = 4;</code>
       */
      public Builder clearYFocus() {
        bitField0_ = (bitField0_ & ~0x00000008);
        yFocus_ = 0;
        onChanged();
        return this;
      }

      // required sint32 radius = 5;
      private int radius_ ;
      /**
       * <code>required sint32 radius = 5;</code>
       */
      public boolean hasRadius() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required sint32 radius = 5;</code>
       */
      public int getRadius() {
        return radius_;
      }
      /**
       * <code>required sint32 radius = 5;</code>
       */
      public Builder setRadius(int value) {
        bitField0_ |= 0x00000010;
        radius_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sint32 radius = 5;</code>
       */
      public Builder clearRadius() {
        bitField0_ = (bitField0_ & ~0x00000010);
        radius_ = 0;
        onChanged();
        return this;
      }

      // repeated fixed32 colors = 6;
      private java.util.List<java.lang.Integer> colors_ = java.util.Collections.emptyList();
      private void ensureColorsIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          colors_ = new java.util.ArrayList<java.lang.Integer>(colors_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated fixed32 colors = 6;</code>
       */
      public java.util.List<java.lang.Integer>
          getColorsList() {
        return java.util.Collections.unmodifiableList(colors_);
      }
      /**
       * <code>repeated fixed32 colors = 6;</code>
       */
      public int getColorsCount() {
        return colors_.size();
      }
      /**
       * <code>repeated fixed32 colors = 6;</code>
       */
      public int getColors(int index) {
        return colors_.get(index);
      }
      /**
       * <code>repeated fixed32 colors = 6;</code>
       */
      public Builder setColors(
          int index, int value) {
        ensureColorsIsMutable();
        colors_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated fixed32 colors = 6;</code>
       */
      public Builder addColors(int value) {
        ensureColorsIsMutable();
        colors_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated fixed32 colors = 6;</code>
       */
      public Builder addAllColors(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureColorsIsMutable();
        super.addAll(values, colors_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated fixed32 colors = 6;</code>
       */
      public Builder clearColors() {
        colors_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      // repeated float fractions = 7;
      private java.util.List<java.lang.Float> fractions_ = java.util.Collections.emptyList();
      private void ensureFractionsIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          fractions_ = new java.util.ArrayList<java.lang.Float>(fractions_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated float fractions = 7;</code>
       */
      public java.util.List<java.lang.Float>
          getFractionsList() {
        return java.util.Collections.unmodifiableList(fractions_);
      }
      /**
       * <code>repeated float fractions = 7;</code>
       */
      public int getFractionsCount() {
        return fractions_.size();
      }
      /**
       * <code>repeated float fractions = 7;</code>
       */
      public float getFractions(int index) {
        return fractions_.get(index);
      }
      /**
       * <code>repeated float fractions = 7;</code>
       */
      public Builder setFractions(
          int index, float value) {
        ensureFractionsIsMutable();
        fractions_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float fractions = 7;</code>
       */
      public Builder addFractions(float value) {
        ensureFractionsIsMutable();
        fractions_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float fractions = 7;</code>
       */
      public Builder addAllFractions(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureFractionsIsMutable();
        super.addAll(values, fractions_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float fractions = 7;</code>
       */
      public Builder clearFractions() {
        fractions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      // required .org.webswing.directdraw.proto.CyclicMethodProto repeat = 8;
      private org.webswing.directdraw.proto.Directdraw.CyclicMethodProto repeat_ = org.webswing.directdraw.proto.Directdraw.CyclicMethodProto.NO_CYCLE;
      /**
       * <code>required .org.webswing.directdraw.proto.CyclicMethodProto repeat = 8;</code>
       */
      public boolean hasRepeat() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required .org.webswing.directdraw.proto.CyclicMethodProto repeat = 8;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.CyclicMethodProto getRepeat() {
        return repeat_;
      }
      /**
       * <code>required .org.webswing.directdraw.proto.CyclicMethodProto repeat = 8;</code>
       */
      public Builder setRepeat(org.webswing.directdraw.proto.Directdraw.CyclicMethodProto value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000080;
        repeat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .org.webswing.directdraw.proto.CyclicMethodProto repeat = 8;</code>
       */
      public Builder clearRepeat() {
        bitField0_ = (bitField0_ & ~0x00000080);
        repeat_ = org.webswing.directdraw.proto.Directdraw.CyclicMethodProto.NO_CYCLE;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.webswing.directdraw.proto.RadialGradientProto)
    }

    static {
      defaultInstance = new RadialGradientProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.webswing.directdraw.proto.RadialGradientProto)
  }

  public interface PointsProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated sint32 points = 1;
    /**
     * <code>repeated sint32 points = 1;</code>
     */
    java.util.List<java.lang.Integer> getPointsList();
    /**
     * <code>repeated sint32 points = 1;</code>
     */
    int getPointsCount();
    /**
     * <code>repeated sint32 points = 1;</code>
     */
    int getPoints(int index);
  }
  /**
   * Protobuf type {@code org.webswing.directdraw.proto.PointsProto}
   */
  public static final class PointsProto extends
      com.google.protobuf.GeneratedMessage
      implements PointsProtoOrBuilder {
    // Use PointsProto.newBuilder() to construct.
    private PointsProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PointsProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PointsProto defaultInstance;
    public static PointsProto getDefaultInstance() {
      return defaultInstance;
    }

    public PointsProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PointsProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                points_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              points_.add(input.readSInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                points_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                points_.add(input.readSInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          points_ = java.util.Collections.unmodifiableList(points_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_PointsProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_PointsProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.webswing.directdraw.proto.Directdraw.PointsProto.class, org.webswing.directdraw.proto.Directdraw.PointsProto.Builder.class);
    }

    public static com.google.protobuf.Parser<PointsProto> PARSER =
        new com.google.protobuf.AbstractParser<PointsProto>() {
      public PointsProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PointsProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PointsProto> getParserForType() {
      return PARSER;
    }

    // repeated sint32 points = 1;
    public static final int POINTS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> points_;
    /**
     * <code>repeated sint32 points = 1;</code>
     */
    public java.util.List<java.lang.Integer>
        getPointsList() {
      return points_;
    }
    /**
     * <code>repeated sint32 points = 1;</code>
     */
    public int getPointsCount() {
      return points_.size();
    }
    /**
     * <code>repeated sint32 points = 1;</code>
     */
    public int getPoints(int index) {
      return points_.get(index);
    }

    private void initFields() {
      points_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < points_.size(); i++) {
        output.writeSInt32(1, points_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < points_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeSInt32SizeNoTag(points_.get(i));
        }
        size += dataSize;
        size += 1 * getPointsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.webswing.directdraw.proto.Directdraw.PointsProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.PointsProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.PointsProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.PointsProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.PointsProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.PointsProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.PointsProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.PointsProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.PointsProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.PointsProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.webswing.directdraw.proto.Directdraw.PointsProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.webswing.directdraw.proto.PointsProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.webswing.directdraw.proto.Directdraw.PointsProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_PointsProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_PointsProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.webswing.directdraw.proto.Directdraw.PointsProto.class, org.webswing.directdraw.proto.Directdraw.PointsProto.Builder.class);
      }

      // Construct using org.webswing.directdraw.proto.Directdraw.PointsProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        points_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_PointsProto_descriptor;
      }

      public org.webswing.directdraw.proto.Directdraw.PointsProto getDefaultInstanceForType() {
        return org.webswing.directdraw.proto.Directdraw.PointsProto.getDefaultInstance();
      }

      public org.webswing.directdraw.proto.Directdraw.PointsProto build() {
        org.webswing.directdraw.proto.Directdraw.PointsProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.webswing.directdraw.proto.Directdraw.PointsProto buildPartial() {
        org.webswing.directdraw.proto.Directdraw.PointsProto result = new org.webswing.directdraw.proto.Directdraw.PointsProto(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          points_ = java.util.Collections.unmodifiableList(points_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.points_ = points_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.webswing.directdraw.proto.Directdraw.PointsProto) {
          return mergeFrom((org.webswing.directdraw.proto.Directdraw.PointsProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.webswing.directdraw.proto.Directdraw.PointsProto other) {
        if (other == org.webswing.directdraw.proto.Directdraw.PointsProto.getDefaultInstance()) return this;
        if (!other.points_.isEmpty()) {
          if (points_.isEmpty()) {
            points_ = other.points_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensurePointsIsMutable();
            points_.addAll(other.points_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.webswing.directdraw.proto.Directdraw.PointsProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.webswing.directdraw.proto.Directdraw.PointsProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated sint32 points = 1;
      private java.util.List<java.lang.Integer> points_ = java.util.Collections.emptyList();
      private void ensurePointsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          points_ = new java.util.ArrayList<java.lang.Integer>(points_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated sint32 points = 1;</code>
       */
      public java.util.List<java.lang.Integer>
          getPointsList() {
        return java.util.Collections.unmodifiableList(points_);
      }
      /**
       * <code>repeated sint32 points = 1;</code>
       */
      public int getPointsCount() {
        return points_.size();
      }
      /**
       * <code>repeated sint32 points = 1;</code>
       */
      public int getPoints(int index) {
        return points_.get(index);
      }
      /**
       * <code>repeated sint32 points = 1;</code>
       */
      public Builder setPoints(
          int index, int value) {
        ensurePointsIsMutable();
        points_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 points = 1;</code>
       */
      public Builder addPoints(int value) {
        ensurePointsIsMutable();
        points_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 points = 1;</code>
       */
      public Builder addAllPoints(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePointsIsMutable();
        super.addAll(values, points_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated sint32 points = 1;</code>
       */
      public Builder clearPoints() {
        points_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.webswing.directdraw.proto.PointsProto)
    }

    static {
      defaultInstance = new PointsProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.webswing.directdraw.proto.PointsProto)
  }

  public interface CompositeProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required .org.webswing.directdraw.proto.CompositeProto.CompositeTypeProto type = 1;
    /**
     * <code>required .org.webswing.directdraw.proto.CompositeProto.CompositeTypeProto type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>required .org.webswing.directdraw.proto.CompositeProto.CompositeTypeProto type = 1;</code>
     */
    org.webswing.directdraw.proto.Directdraw.CompositeProto.CompositeTypeProto getType();

    // optional float alpha = 2 [default = 1];
    /**
     * <code>optional float alpha = 2 [default = 1];</code>
     */
    boolean hasAlpha();
    /**
     * <code>optional float alpha = 2 [default = 1];</code>
     */
    float getAlpha();

    // optional fixed32 color = 3;
    /**
     * <code>optional fixed32 color = 3;</code>
     */
    boolean hasColor();
    /**
     * <code>optional fixed32 color = 3;</code>
     */
    int getColor();
  }
  /**
   * Protobuf type {@code org.webswing.directdraw.proto.CompositeProto}
   */
  public static final class CompositeProto extends
      com.google.protobuf.GeneratedMessage
      implements CompositeProtoOrBuilder {
    // Use CompositeProto.newBuilder() to construct.
    private CompositeProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CompositeProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CompositeProto defaultInstance;
    public static CompositeProto getDefaultInstance() {
      return defaultInstance;
    }

    public CompositeProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CompositeProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              org.webswing.directdraw.proto.Directdraw.CompositeProto.CompositeTypeProto value = org.webswing.directdraw.proto.Directdraw.CompositeProto.CompositeTypeProto.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              alpha_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              color_ = input.readFixed32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_CompositeProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_CompositeProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.webswing.directdraw.proto.Directdraw.CompositeProto.class, org.webswing.directdraw.proto.Directdraw.CompositeProto.Builder.class);
    }

    public static com.google.protobuf.Parser<CompositeProto> PARSER =
        new com.google.protobuf.AbstractParser<CompositeProto>() {
      public CompositeProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CompositeProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CompositeProto> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code org.webswing.directdraw.proto.CompositeProto.CompositeTypeProto}
     */
    public enum CompositeTypeProto
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>CLEAR = 1;</code>
       */
      CLEAR(0, 1),
      /**
       * <code>SRC = 2;</code>
       */
      SRC(1, 2),
      /**
       * <code>DST = 9;</code>
       */
      DST(2, 9),
      /**
       * <code>SRC_OVER = 3;</code>
       */
      SRC_OVER(3, 3),
      /**
       * <code>DST_OVER = 4;</code>
       */
      DST_OVER(4, 4),
      /**
       * <code>SRC_IN = 5;</code>
       */
      SRC_IN(5, 5),
      /**
       * <code>DST_IN = 6;</code>
       */
      DST_IN(6, 6),
      /**
       * <code>SRC_OUT = 7;</code>
       */
      SRC_OUT(7, 7),
      /**
       * <code>DST_OUT = 8;</code>
       */
      DST_OUT(8, 8),
      /**
       * <code>SRC_ATOP = 10;</code>
       */
      SRC_ATOP(9, 10),
      /**
       * <code>DST_ATOP = 11;</code>
       */
      DST_ATOP(10, 11),
      /**
       * <code>XOR = 12;</code>
       */
      XOR(11, 12),
      /**
       * <code>XOR_MODE = 13;</code>
       */
      XOR_MODE(12, 13),
      ;

      /**
       * <code>CLEAR = 1;</code>
       */
      public static final int CLEAR_VALUE = 1;
      /**
       * <code>SRC = 2;</code>
       */
      public static final int SRC_VALUE = 2;
      /**
       * <code>DST = 9;</code>
       */
      public static final int DST_VALUE = 9;
      /**
       * <code>SRC_OVER = 3;</code>
       */
      public static final int SRC_OVER_VALUE = 3;
      /**
       * <code>DST_OVER = 4;</code>
       */
      public static final int DST_OVER_VALUE = 4;
      /**
       * <code>SRC_IN = 5;</code>
       */
      public static final int SRC_IN_VALUE = 5;
      /**
       * <code>DST_IN = 6;</code>
       */
      public static final int DST_IN_VALUE = 6;
      /**
       * <code>SRC_OUT = 7;</code>
       */
      public static final int SRC_OUT_VALUE = 7;
      /**
       * <code>DST_OUT = 8;</code>
       */
      public static final int DST_OUT_VALUE = 8;
      /**
       * <code>SRC_ATOP = 10;</code>
       */
      public static final int SRC_ATOP_VALUE = 10;
      /**
       * <code>DST_ATOP = 11;</code>
       */
      public static final int DST_ATOP_VALUE = 11;
      /**
       * <code>XOR = 12;</code>
       */
      public static final int XOR_VALUE = 12;
      /**
       * <code>XOR_MODE = 13;</code>
       */
      public static final int XOR_MODE_VALUE = 13;


      public final int getNumber() { return value; }

      public static CompositeTypeProto valueOf(int value) {
        switch (value) {
          case 1: return CLEAR;
          case 2: return SRC;
          case 9: return DST;
          case 3: return SRC_OVER;
          case 4: return DST_OVER;
          case 5: return SRC_IN;
          case 6: return DST_IN;
          case 7: return SRC_OUT;
          case 8: return DST_OUT;
          case 10: return SRC_ATOP;
          case 11: return DST_ATOP;
          case 12: return XOR;
          case 13: return XOR_MODE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<CompositeTypeProto>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<CompositeTypeProto>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<CompositeTypeProto>() {
              public CompositeTypeProto findValueByNumber(int number) {
                return CompositeTypeProto.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return org.webswing.directdraw.proto.Directdraw.CompositeProto.getDescriptor().getEnumTypes().get(0);
      }

      private static final CompositeTypeProto[] VALUES = values();

      public static CompositeTypeProto valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private CompositeTypeProto(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:org.webswing.directdraw.proto.CompositeProto.CompositeTypeProto)
    }

    private int bitField0_;
    // required .org.webswing.directdraw.proto.CompositeProto.CompositeTypeProto type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private org.webswing.directdraw.proto.Directdraw.CompositeProto.CompositeTypeProto type_;
    /**
     * <code>required .org.webswing.directdraw.proto.CompositeProto.CompositeTypeProto type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.webswing.directdraw.proto.CompositeProto.CompositeTypeProto type = 1;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.CompositeProto.CompositeTypeProto getType() {
      return type_;
    }

    // optional float alpha = 2 [default = 1];
    public static final int ALPHA_FIELD_NUMBER = 2;
    private float alpha_;
    /**
     * <code>optional float alpha = 2 [default = 1];</code>
     */
    public boolean hasAlpha() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float alpha = 2 [default = 1];</code>
     */
    public float getAlpha() {
      return alpha_;
    }

    // optional fixed32 color = 3;
    public static final int COLOR_FIELD_NUMBER = 3;
    private int color_;
    /**
     * <code>optional fixed32 color = 3;</code>
     */
    public boolean hasColor() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional fixed32 color = 3;</code>
     */
    public int getColor() {
      return color_;
    }

    private void initFields() {
      type_ = org.webswing.directdraw.proto.Directdraw.CompositeProto.CompositeTypeProto.CLEAR;
      alpha_ = 1F;
      color_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, alpha_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFixed32(3, color_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, alpha_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, color_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.webswing.directdraw.proto.Directdraw.CompositeProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.CompositeProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.CompositeProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.CompositeProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.CompositeProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.CompositeProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.CompositeProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.CompositeProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.CompositeProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.CompositeProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.webswing.directdraw.proto.Directdraw.CompositeProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.webswing.directdraw.proto.CompositeProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.webswing.directdraw.proto.Directdraw.CompositeProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_CompositeProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_CompositeProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.webswing.directdraw.proto.Directdraw.CompositeProto.class, org.webswing.directdraw.proto.Directdraw.CompositeProto.Builder.class);
      }

      // Construct using org.webswing.directdraw.proto.Directdraw.CompositeProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = org.webswing.directdraw.proto.Directdraw.CompositeProto.CompositeTypeProto.CLEAR;
        bitField0_ = (bitField0_ & ~0x00000001);
        alpha_ = 1F;
        bitField0_ = (bitField0_ & ~0x00000002);
        color_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_CompositeProto_descriptor;
      }

      public org.webswing.directdraw.proto.Directdraw.CompositeProto getDefaultInstanceForType() {
        return org.webswing.directdraw.proto.Directdraw.CompositeProto.getDefaultInstance();
      }

      public org.webswing.directdraw.proto.Directdraw.CompositeProto build() {
        org.webswing.directdraw.proto.Directdraw.CompositeProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.webswing.directdraw.proto.Directdraw.CompositeProto buildPartial() {
        org.webswing.directdraw.proto.Directdraw.CompositeProto result = new org.webswing.directdraw.proto.Directdraw.CompositeProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.alpha_ = alpha_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.color_ = color_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.webswing.directdraw.proto.Directdraw.CompositeProto) {
          return mergeFrom((org.webswing.directdraw.proto.Directdraw.CompositeProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.webswing.directdraw.proto.Directdraw.CompositeProto other) {
        if (other == org.webswing.directdraw.proto.Directdraw.CompositeProto.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasAlpha()) {
          setAlpha(other.getAlpha());
        }
        if (other.hasColor()) {
          setColor(other.getColor());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.webswing.directdraw.proto.Directdraw.CompositeProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.webswing.directdraw.proto.Directdraw.CompositeProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .org.webswing.directdraw.proto.CompositeProto.CompositeTypeProto type = 1;
      private org.webswing.directdraw.proto.Directdraw.CompositeProto.CompositeTypeProto type_ = org.webswing.directdraw.proto.Directdraw.CompositeProto.CompositeTypeProto.CLEAR;
      /**
       * <code>required .org.webswing.directdraw.proto.CompositeProto.CompositeTypeProto type = 1;</code>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.webswing.directdraw.proto.CompositeProto.CompositeTypeProto type = 1;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.CompositeProto.CompositeTypeProto getType() {
        return type_;
      }
      /**
       * <code>required .org.webswing.directdraw.proto.CompositeProto.CompositeTypeProto type = 1;</code>
       */
      public Builder setType(org.webswing.directdraw.proto.Directdraw.CompositeProto.CompositeTypeProto value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .org.webswing.directdraw.proto.CompositeProto.CompositeTypeProto type = 1;</code>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = org.webswing.directdraw.proto.Directdraw.CompositeProto.CompositeTypeProto.CLEAR;
        onChanged();
        return this;
      }

      // optional float alpha = 2 [default = 1];
      private float alpha_ = 1F;
      /**
       * <code>optional float alpha = 2 [default = 1];</code>
       */
      public boolean hasAlpha() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float alpha = 2 [default = 1];</code>
       */
      public float getAlpha() {
        return alpha_;
      }
      /**
       * <code>optional float alpha = 2 [default = 1];</code>
       */
      public Builder setAlpha(float value) {
        bitField0_ |= 0x00000002;
        alpha_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float alpha = 2 [default = 1];</code>
       */
      public Builder clearAlpha() {
        bitField0_ = (bitField0_ & ~0x00000002);
        alpha_ = 1F;
        onChanged();
        return this;
      }

      // optional fixed32 color = 3;
      private int color_ ;
      /**
       * <code>optional fixed32 color = 3;</code>
       */
      public boolean hasColor() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional fixed32 color = 3;</code>
       */
      public int getColor() {
        return color_;
      }
      /**
       * <code>optional fixed32 color = 3;</code>
       */
      public Builder setColor(int value) {
        bitField0_ |= 0x00000004;
        color_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 color = 3;</code>
       */
      public Builder clearColor() {
        bitField0_ = (bitField0_ & ~0x00000004);
        color_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:org.webswing.directdraw.proto.CompositeProto)
    }

    static {
      defaultInstance = new CompositeProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.webswing.directdraw.proto.CompositeProto)
  }

  public interface TextureProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required .org.webswing.directdraw.proto.ImageProto image = 1;
    /**
     * <code>required .org.webswing.directdraw.proto.ImageProto image = 1;</code>
     */
    boolean hasImage();
    /**
     * <code>required .org.webswing.directdraw.proto.ImageProto image = 1;</code>
     */
    org.webswing.directdraw.proto.Directdraw.ImageProto getImage();
    /**
     * <code>required .org.webswing.directdraw.proto.ImageProto image = 1;</code>
     */
    org.webswing.directdraw.proto.Directdraw.ImageProtoOrBuilder getImageOrBuilder();

    // required .org.webswing.directdraw.proto.RectangleProto anchor = 2;
    /**
     * <code>required .org.webswing.directdraw.proto.RectangleProto anchor = 2;</code>
     */
    boolean hasAnchor();
    /**
     * <code>required .org.webswing.directdraw.proto.RectangleProto anchor = 2;</code>
     */
    org.webswing.directdraw.proto.Directdraw.RectangleProto getAnchor();
    /**
     * <code>required .org.webswing.directdraw.proto.RectangleProto anchor = 2;</code>
     */
    org.webswing.directdraw.proto.Directdraw.RectangleProtoOrBuilder getAnchorOrBuilder();
  }
  /**
   * Protobuf type {@code org.webswing.directdraw.proto.TextureProto}
   */
  public static final class TextureProto extends
      com.google.protobuf.GeneratedMessage
      implements TextureProtoOrBuilder {
    // Use TextureProto.newBuilder() to construct.
    private TextureProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TextureProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TextureProto defaultInstance;
    public static TextureProto getDefaultInstance() {
      return defaultInstance;
    }

    public TextureProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TextureProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              org.webswing.directdraw.proto.Directdraw.ImageProto.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = image_.toBuilder();
              }
              image_ = input.readMessage(org.webswing.directdraw.proto.Directdraw.ImageProto.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(image_);
                image_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              org.webswing.directdraw.proto.Directdraw.RectangleProto.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = anchor_.toBuilder();
              }
              anchor_ = input.readMessage(org.webswing.directdraw.proto.Directdraw.RectangleProto.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(anchor_);
                anchor_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_TextureProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_TextureProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.webswing.directdraw.proto.Directdraw.TextureProto.class, org.webswing.directdraw.proto.Directdraw.TextureProto.Builder.class);
    }

    public static com.google.protobuf.Parser<TextureProto> PARSER =
        new com.google.protobuf.AbstractParser<TextureProto>() {
      public TextureProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TextureProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TextureProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required .org.webswing.directdraw.proto.ImageProto image = 1;
    public static final int IMAGE_FIELD_NUMBER = 1;
    private org.webswing.directdraw.proto.Directdraw.ImageProto image_;
    /**
     * <code>required .org.webswing.directdraw.proto.ImageProto image = 1;</code>
     */
    public boolean hasImage() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .org.webswing.directdraw.proto.ImageProto image = 1;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.ImageProto getImage() {
      return image_;
    }
    /**
     * <code>required .org.webswing.directdraw.proto.ImageProto image = 1;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.ImageProtoOrBuilder getImageOrBuilder() {
      return image_;
    }

    // required .org.webswing.directdraw.proto.RectangleProto anchor = 2;
    public static final int ANCHOR_FIELD_NUMBER = 2;
    private org.webswing.directdraw.proto.Directdraw.RectangleProto anchor_;
    /**
     * <code>required .org.webswing.directdraw.proto.RectangleProto anchor = 2;</code>
     */
    public boolean hasAnchor() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .org.webswing.directdraw.proto.RectangleProto anchor = 2;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.RectangleProto getAnchor() {
      return anchor_;
    }
    /**
     * <code>required .org.webswing.directdraw.proto.RectangleProto anchor = 2;</code>
     */
    public org.webswing.directdraw.proto.Directdraw.RectangleProtoOrBuilder getAnchorOrBuilder() {
      return anchor_;
    }

    private void initFields() {
      image_ = org.webswing.directdraw.proto.Directdraw.ImageProto.getDefaultInstance();
      anchor_ = org.webswing.directdraw.proto.Directdraw.RectangleProto.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasImage()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAnchor()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getImage().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getAnchor().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, image_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, anchor_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, image_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, anchor_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static org.webswing.directdraw.proto.Directdraw.TextureProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.TextureProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.TextureProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static org.webswing.directdraw.proto.Directdraw.TextureProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.TextureProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.TextureProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.TextureProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.TextureProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static org.webswing.directdraw.proto.Directdraw.TextureProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static org.webswing.directdraw.proto.Directdraw.TextureProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(org.webswing.directdraw.proto.Directdraw.TextureProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code org.webswing.directdraw.proto.TextureProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements org.webswing.directdraw.proto.Directdraw.TextureProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_TextureProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_TextureProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                org.webswing.directdraw.proto.Directdraw.TextureProto.class, org.webswing.directdraw.proto.Directdraw.TextureProto.Builder.class);
      }

      // Construct using org.webswing.directdraw.proto.Directdraw.TextureProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getImageFieldBuilder();
          getAnchorFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (imageBuilder_ == null) {
          image_ = org.webswing.directdraw.proto.Directdraw.ImageProto.getDefaultInstance();
        } else {
          imageBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (anchorBuilder_ == null) {
          anchor_ = org.webswing.directdraw.proto.Directdraw.RectangleProto.getDefaultInstance();
        } else {
          anchorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return org.webswing.directdraw.proto.Directdraw.internal_static_org_webswing_directdraw_proto_TextureProto_descriptor;
      }

      public org.webswing.directdraw.proto.Directdraw.TextureProto getDefaultInstanceForType() {
        return org.webswing.directdraw.proto.Directdraw.TextureProto.getDefaultInstance();
      }

      public org.webswing.directdraw.proto.Directdraw.TextureProto build() {
        org.webswing.directdraw.proto.Directdraw.TextureProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public org.webswing.directdraw.proto.Directdraw.TextureProto buildPartial() {
        org.webswing.directdraw.proto.Directdraw.TextureProto result = new org.webswing.directdraw.proto.Directdraw.TextureProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (imageBuilder_ == null) {
          result.image_ = image_;
        } else {
          result.image_ = imageBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (anchorBuilder_ == null) {
          result.anchor_ = anchor_;
        } else {
          result.anchor_ = anchorBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof org.webswing.directdraw.proto.Directdraw.TextureProto) {
          return mergeFrom((org.webswing.directdraw.proto.Directdraw.TextureProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(org.webswing.directdraw.proto.Directdraw.TextureProto other) {
        if (other == org.webswing.directdraw.proto.Directdraw.TextureProto.getDefaultInstance()) return this;
        if (other.hasImage()) {
          mergeImage(other.getImage());
        }
        if (other.hasAnchor()) {
          mergeAnchor(other.getAnchor());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasImage()) {
          
          return false;
        }
        if (!hasAnchor()) {
          
          return false;
        }
        if (!getImage().isInitialized()) {
          
          return false;
        }
        if (!getAnchor().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        org.webswing.directdraw.proto.Directdraw.TextureProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (org.webswing.directdraw.proto.Directdraw.TextureProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .org.webswing.directdraw.proto.ImageProto image = 1;
      private org.webswing.directdraw.proto.Directdraw.ImageProto image_ = org.webswing.directdraw.proto.Directdraw.ImageProto.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.ImageProto, org.webswing.directdraw.proto.Directdraw.ImageProto.Builder, org.webswing.directdraw.proto.Directdraw.ImageProtoOrBuilder> imageBuilder_;
      /**
       * <code>required .org.webswing.directdraw.proto.ImageProto image = 1;</code>
       */
      public boolean hasImage() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .org.webswing.directdraw.proto.ImageProto image = 1;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.ImageProto getImage() {
        if (imageBuilder_ == null) {
          return image_;
        } else {
          return imageBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.webswing.directdraw.proto.ImageProto image = 1;</code>
       */
      public Builder setImage(org.webswing.directdraw.proto.Directdraw.ImageProto value) {
        if (imageBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          image_ = value;
          onChanged();
        } else {
          imageBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.webswing.directdraw.proto.ImageProto image = 1;</code>
       */
      public Builder setImage(
          org.webswing.directdraw.proto.Directdraw.ImageProto.Builder builderForValue) {
        if (imageBuilder_ == null) {
          image_ = builderForValue.build();
          onChanged();
        } else {
          imageBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.webswing.directdraw.proto.ImageProto image = 1;</code>
       */
      public Builder mergeImage(org.webswing.directdraw.proto.Directdraw.ImageProto value) {
        if (imageBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              image_ != org.webswing.directdraw.proto.Directdraw.ImageProto.getDefaultInstance()) {
            image_ =
              org.webswing.directdraw.proto.Directdraw.ImageProto.newBuilder(image_).mergeFrom(value).buildPartial();
          } else {
            image_ = value;
          }
          onChanged();
        } else {
          imageBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .org.webswing.directdraw.proto.ImageProto image = 1;</code>
       */
      public Builder clearImage() {
        if (imageBuilder_ == null) {
          image_ = org.webswing.directdraw.proto.Directdraw.ImageProto.getDefaultInstance();
          onChanged();
        } else {
          imageBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .org.webswing.directdraw.proto.ImageProto image = 1;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.ImageProto.Builder getImageBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getImageFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.webswing.directdraw.proto.ImageProto image = 1;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.ImageProtoOrBuilder getImageOrBuilder() {
        if (imageBuilder_ != null) {
          return imageBuilder_.getMessageOrBuilder();
        } else {
          return image_;
        }
      }
      /**
       * <code>required .org.webswing.directdraw.proto.ImageProto image = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.ImageProto, org.webswing.directdraw.proto.Directdraw.ImageProto.Builder, org.webswing.directdraw.proto.Directdraw.ImageProtoOrBuilder> 
          getImageFieldBuilder() {
        if (imageBuilder_ == null) {
          imageBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.webswing.directdraw.proto.Directdraw.ImageProto, org.webswing.directdraw.proto.Directdraw.ImageProto.Builder, org.webswing.directdraw.proto.Directdraw.ImageProtoOrBuilder>(
                  image_,
                  getParentForChildren(),
                  isClean());
          image_ = null;
        }
        return imageBuilder_;
      }

      // required .org.webswing.directdraw.proto.RectangleProto anchor = 2;
      private org.webswing.directdraw.proto.Directdraw.RectangleProto anchor_ = org.webswing.directdraw.proto.Directdraw.RectangleProto.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.RectangleProto, org.webswing.directdraw.proto.Directdraw.RectangleProto.Builder, org.webswing.directdraw.proto.Directdraw.RectangleProtoOrBuilder> anchorBuilder_;
      /**
       * <code>required .org.webswing.directdraw.proto.RectangleProto anchor = 2;</code>
       */
      public boolean hasAnchor() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .org.webswing.directdraw.proto.RectangleProto anchor = 2;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.RectangleProto getAnchor() {
        if (anchorBuilder_ == null) {
          return anchor_;
        } else {
          return anchorBuilder_.getMessage();
        }
      }
      /**
       * <code>required .org.webswing.directdraw.proto.RectangleProto anchor = 2;</code>
       */
      public Builder setAnchor(org.webswing.directdraw.proto.Directdraw.RectangleProto value) {
        if (anchorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          anchor_ = value;
          onChanged();
        } else {
          anchorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.webswing.directdraw.proto.RectangleProto anchor = 2;</code>
       */
      public Builder setAnchor(
          org.webswing.directdraw.proto.Directdraw.RectangleProto.Builder builderForValue) {
        if (anchorBuilder_ == null) {
          anchor_ = builderForValue.build();
          onChanged();
        } else {
          anchorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.webswing.directdraw.proto.RectangleProto anchor = 2;</code>
       */
      public Builder mergeAnchor(org.webswing.directdraw.proto.Directdraw.RectangleProto value) {
        if (anchorBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              anchor_ != org.webswing.directdraw.proto.Directdraw.RectangleProto.getDefaultInstance()) {
            anchor_ =
              org.webswing.directdraw.proto.Directdraw.RectangleProto.newBuilder(anchor_).mergeFrom(value).buildPartial();
          } else {
            anchor_ = value;
          }
          onChanged();
        } else {
          anchorBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .org.webswing.directdraw.proto.RectangleProto anchor = 2;</code>
       */
      public Builder clearAnchor() {
        if (anchorBuilder_ == null) {
          anchor_ = org.webswing.directdraw.proto.Directdraw.RectangleProto.getDefaultInstance();
          onChanged();
        } else {
          anchorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .org.webswing.directdraw.proto.RectangleProto anchor = 2;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.RectangleProto.Builder getAnchorBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getAnchorFieldBuilder().getBuilder();
      }
      /**
       * <code>required .org.webswing.directdraw.proto.RectangleProto anchor = 2;</code>
       */
      public org.webswing.directdraw.proto.Directdraw.RectangleProtoOrBuilder getAnchorOrBuilder() {
        if (anchorBuilder_ != null) {
          return anchorBuilder_.getMessageOrBuilder();
        } else {
          return anchor_;
        }
      }
      /**
       * <code>required .org.webswing.directdraw.proto.RectangleProto anchor = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          org.webswing.directdraw.proto.Directdraw.RectangleProto, org.webswing.directdraw.proto.Directdraw.RectangleProto.Builder, org.webswing.directdraw.proto.Directdraw.RectangleProtoOrBuilder> 
          getAnchorFieldBuilder() {
        if (anchorBuilder_ == null) {
          anchorBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              org.webswing.directdraw.proto.Directdraw.RectangleProto, org.webswing.directdraw.proto.Directdraw.RectangleProto.Builder, org.webswing.directdraw.proto.Directdraw.RectangleProtoOrBuilder>(
                  anchor_,
                  getParentForChildren(),
                  isClean());
          anchor_ = null;
        }
        return anchorBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:org.webswing.directdraw.proto.TextureProto)
    }

    static {
      defaultInstance = new TextureProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:org.webswing.directdraw.proto.TextureProto)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_org_webswing_directdraw_proto_WebImageProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_webswing_directdraw_proto_WebImageProto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_org_webswing_directdraw_proto_DrawInstructionProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_webswing_directdraw_proto_DrawInstructionProto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_org_webswing_directdraw_proto_DrawConstantProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_webswing_directdraw_proto_DrawConstantProto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_org_webswing_directdraw_proto_FontFaceProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_webswing_directdraw_proto_FontFaceProto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_org_webswing_directdraw_proto_ColorProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_webswing_directdraw_proto_ColorProto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_org_webswing_directdraw_proto_ImageProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_webswing_directdraw_proto_ImageProto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_org_webswing_directdraw_proto_TransformProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_webswing_directdraw_proto_TransformProto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_org_webswing_directdraw_proto_CombinedProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_webswing_directdraw_proto_CombinedProto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_org_webswing_directdraw_proto_GlyphProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_webswing_directdraw_proto_GlyphProto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_org_webswing_directdraw_proto_RectangleProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_webswing_directdraw_proto_RectangleProto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_org_webswing_directdraw_proto_EllipseProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_webswing_directdraw_proto_EllipseProto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_org_webswing_directdraw_proto_RoundRectangleProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_webswing_directdraw_proto_RoundRectangleProto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_org_webswing_directdraw_proto_ArcProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_webswing_directdraw_proto_ArcProto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_org_webswing_directdraw_proto_PathProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_webswing_directdraw_proto_PathProto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_org_webswing_directdraw_proto_FontProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_webswing_directdraw_proto_FontProto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_org_webswing_directdraw_proto_StrokeProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_webswing_directdraw_proto_StrokeProto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_org_webswing_directdraw_proto_LinearGradientProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_webswing_directdraw_proto_LinearGradientProto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_org_webswing_directdraw_proto_RadialGradientProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_webswing_directdraw_proto_RadialGradientProto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_org_webswing_directdraw_proto_PointsProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_webswing_directdraw_proto_PointsProto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_org_webswing_directdraw_proto_CompositeProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_webswing_directdraw_proto_CompositeProto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_org_webswing_directdraw_proto_TextureProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_org_webswing_directdraw_proto_TextureProto_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\020directdraw.proto\022\035org.webswing.directd" +
      "raw.proto\"\377\001\n\rWebImageProto\022\r\n\005width\030\001 \002" +
      "(\r\022\016\n\006height\030\002 \002(\r\022I\n\014instructions\030\003 \003(\013" +
      "23.org.webswing.directdraw.proto.DrawIns" +
      "tructionProto\022C\n\tconstants\030\004 \003(\01320.org.w" +
      "ebswing.directdraw.proto.DrawConstantPro" +
      "to\022?\n\tfontFaces\030\005 \003(\0132,.org.webswing.dir" +
      "ectdraw.proto.FontFaceProto\"\232\003\n\024DrawInst" +
      "ructionProto\022R\n\004inst\030\001 \002(\0162D.org.webswin" +
      "g.directdraw.proto.DrawInstructionProto.",
      "InstructionProto\022\014\n\004args\030\002 \003(\r\022\020\n\010webIma" +
      "ge\030\003 \001(\014\"\215\002\n\020InstructionProto\022\010\n\004DRAW\020\000\022" +
      "\010\n\004FILL\020\001\022\016\n\nDRAW_IMAGE\020\002\022\021\n\rDRAW_WEBIMA" +
      "GE\020\003\022\017\n\013DRAW_STRING\020\004\022\r\n\tCOPY_AREA\020\005\022\024\n\020" +
      "GRAPHICS_DISPOSE\020\006\022\023\n\017GRAPHICS_SWITCH\020\007\022" +
      "\023\n\017GRAPHICS_CREATE\020\010\022\r\n\tTRANSFORM\020\t\022\r\n\tS" +
      "ET_PAINT\020\n\022\014\n\010SET_FONT\020\013\022\016\n\nSET_STROKE\020\014" +
      "\022\021\n\rSET_COMPOSITE\020\r\022\023\n\017DRAW_GLYPH_LIST\020\016" +
      "\"\331\010\n\021DrawConstantProto\022\n\n\002id\030\001 \002(\r\0228\n\005co" +
      "lor\030\002 \001(\0132).org.webswing.directdraw.prot",
      "o.ColorProto\0228\n\005image\030\003 \001(\0132).org.webswi" +
      "ng.directdraw.proto.ImageProto\022@\n\ttransf" +
      "orm\030\004 \001(\0132-.org.webswing.directdraw.prot" +
      "o.TransformProto\022\016\n\006string\030\005 \001(\t\0226\n\004path" +
      "\030\006 \001(\0132(.org.webswing.directdraw.proto.P" +
      "athProto\0226\n\004font\030\007 \001(\0132(.org.webswing.di" +
      "rectdraw.proto.FontProto\022F\n\nlinearGrad\030\010" +
      " \001(\01322.org.webswing.directdraw.proto.Lin" +
      "earGradientProto\022F\n\nradialGrad\030\t \001(\01322.o" +
      "rg.webswing.directdraw.proto.RadialGradi",
      "entProto\022:\n\006points\030\n \001(\0132*.org.webswing." +
      "directdraw.proto.PointsProto\022@\n\trectangl" +
      "e\030\013 \001(\0132-.org.webswing.directdraw.proto." +
      "RectangleProto\022<\n\007ellipse\030\014 \001(\0132+.org.we" +
      "bswing.directdraw.proto.EllipseProto\022J\n\016" +
      "roundRectangle\030\r \001(\01322.org.webswing.dire" +
      "ctdraw.proto.RoundRectangleProto\0224\n\003arc\030" +
      "\016 \001(\0132\'.org.webswing.directdraw.proto.Ar" +
      "cProto\022:\n\006stroke\030\017 \001(\0132*.org.webswing.di" +
      "rectdraw.proto.StrokeProto\022@\n\tcomposite\030",
      "\020 \001(\0132-.org.webswing.directdraw.proto.Co" +
      "mpositeProto\022<\n\007texture\030\021 \001(\0132+.org.webs" +
      "wing.directdraw.proto.TextureProto\0228\n\005gl" +
      "yph\030\022 \001(\0132).org.webswing.directdraw.prot" +
      "o.GlyphProto\022>\n\010combined\030\023 \001(\0132,.org.web" +
      "swing.directdraw.proto.CombinedProto\":\n\r" +
      "FontFaceProto\022\014\n\004name\030\001 \002(\t\022\014\n\004font\030\002 \002(" +
      "\014\022\r\n\005style\030\003 \001(\t\"\032\n\nColorProto\022\014\n\004rgba\030\001" +
      " \002(\007\"\032\n\nImageProto\022\014\n\004data\030\001 \002(\014\"d\n\016Tran" +
      "sformProto\022\016\n\003m00\030\001 \001(\002:\0011\022\013\n\003m10\030\002 \001(\002\022",
      "\013\n\003m01\030\003 \001(\002\022\016\n\003m11\030\004 \001(\002:\0011\022\013\n\003m02\030\005 \001(" +
      "\002\022\013\n\003m12\030\006 \001(\002\"\034\n\rCombinedProto\022\013\n\003ids\030\001" +
      " \003(\r\"\032\n\nGlyphProto\022\014\n\004data\030\001 \001(\014\"<\n\016Rect" +
      "angleProto\022\t\n\001x\030\001 \002(\021\022\t\n\001y\030\002 \002(\021\022\t\n\001w\030\003 " +
      "\002(\021\022\t\n\001h\030\004 \002(\021\":\n\014EllipseProto\022\t\n\001x\030\001 \002(" +
      "\021\022\t\n\001y\030\002 \002(\021\022\t\n\001w\030\003 \002(\021\022\t\n\001h\030\004 \002(\021\"]\n\023Ro" +
      "undRectangleProto\022\t\n\001x\030\001 \002(\021\022\t\n\001y\030\002 \002(\021\022" +
      "\t\n\001w\030\003 \002(\021\022\t\n\001h\030\004 \002(\021\022\014\n\004arcW\030\005 \001(\021\022\014\n\004a" +
      "rcH\030\006 \001(\021\"\307\001\n\010ArcProto\022\t\n\001x\030\001 \002(\021\022\t\n\001y\030\002" +
      " \002(\021\022\t\n\001w\030\003 \002(\021\022\t\n\001h\030\004 \002(\021\022\r\n\005start\030\005 \001(",
      "\021\022\016\n\006extent\030\006 \001(\021\022B\n\004type\030\007 \001(\01624.org.we" +
      "bswing.directdraw.proto.ArcProto.ArcType" +
      "Proto\",\n\014ArcTypeProto\022\010\n\004OPEN\020\000\022\t\n\005CHORD" +
      "\020\001\022\007\n\003PIE\020\002\"\300\001\n\tPathProto\022\022\n\nwindingOdd\030" +
      "\001 \002(\010\022G\n\004type\030\002 \003(\01629.org.webswing.direc" +
      "tdraw.proto.PathProto.SegmentTypeProto\022\016" +
      "\n\006points\030\003 \003(\002\"F\n\020SegmentTypeProto\022\010\n\004MO" +
      "VE\020\000\022\010\n\004LINE\020\001\022\010\n\004QUAD\020\002\022\t\n\005CUBIC\020\003\022\t\n\005C" +
      "LOSE\020\004\"\365\001\n\tFontProto\022\016\n\006family\030\001 \002(\t\022B\n\005" +
      "style\030\002 \001(\01623.org.webswing.directdraw.pr",
      "oto.FontProto.StyleProto\022\014\n\004size\030\003 \001(\r\022@" +
      "\n\ttransform\030\004 \001(\0132-.org.webswing.directd" +
      "raw.proto.TransformProto\"D\n\nStyleProto\022\n" +
      "\n\006NORMAL\020\000\022\013\n\007OBLIQUE\020\001\022\n\n\006ITALIC\020\002\022\021\n\rB" +
      "OLDANDITALIC\020\003\"\346\002\n\013StrokeProto\022\r\n\005width\030" +
      "\001 \002(\002\022\022\n\nmiterLimit\030\002 \001(\002\022H\n\004join\030\003 \001(\0162" +
      ":.org.webswing.directdraw.proto.StrokePr" +
      "oto.StrokeJoinProto\022F\n\003cap\030\004 \001(\01629.org.w" +
      "ebswing.directdraw.proto.StrokeProto.Str" +
      "okeCapProto\022\014\n\004dash\030\005 \003(\002\022\022\n\ndashOffset\030",
      "\006 \001(\002\"A\n\017StrokeJoinProto\022\016\n\nJOIN_MITER\020\000" +
      "\022\016\n\nJOIN_ROUND\020\001\022\016\n\nJOIN_BEVEL\020\002\"=\n\016Stro" +
      "keCapProto\022\014\n\010CAP_BUTT\020\000\022\r\n\tCAP_ROUND\020\001\022" +
      "\016\n\nCAP_SQUARE\020\002\"\266\001\n\023LinearGradientProto\022" +
      "\016\n\006xStart\030\001 \002(\021\022\016\n\006yStart\030\002 \002(\021\022\014\n\004xEnd\030" +
      "\003 \002(\021\022\014\n\004yEnd\030\004 \002(\021\022\016\n\006colors\030\005 \003(\007\022\021\n\tf" +
      "ractions\030\006 \003(\002\022@\n\006repeat\030\007 \002(\01620.org.web" +
      "swing.directdraw.proto.CyclicMethodProto" +
      "\"\314\001\n\023RadialGradientProto\022\017\n\007xCenter\030\001 \002(" +
      "\021\022\017\n\007yCenter\030\002 \002(\021\022\016\n\006xFocus\030\003 \002(\021\022\016\n\006yF",
      "ocus\030\004 \002(\021\022\016\n\006radius\030\005 \002(\021\022\016\n\006colors\030\006 \003" +
      "(\007\022\021\n\tfractions\030\007 \003(\002\022@\n\006repeat\030\010 \002(\01620." +
      "org.webswing.directdraw.proto.CyclicMeth" +
      "odProto\"\035\n\013PointsProto\022\016\n\006points\030\001 \003(\021\"\266" +
      "\002\n\016CompositeProto\022N\n\004type\030\001 \002(\0162@.org.we" +
      "bswing.directdraw.proto.CompositeProto.C" +
      "ompositeTypeProto\022\020\n\005alpha\030\002 \001(\002:\0011\022\r\n\005c" +
      "olor\030\003 \001(\007\"\262\001\n\022CompositeTypeProto\022\t\n\005CLE" +
      "AR\020\001\022\007\n\003SRC\020\002\022\007\n\003DST\020\t\022\014\n\010SRC_OVER\020\003\022\014\n\010" +
      "DST_OVER\020\004\022\n\n\006SRC_IN\020\005\022\n\n\006DST_IN\020\006\022\013\n\007SR",
      "C_OUT\020\007\022\013\n\007DST_OUT\020\010\022\014\n\010SRC_ATOP\020\n\022\014\n\010DS" +
      "T_ATOP\020\013\022\007\n\003XOR\020\014\022\014\n\010XOR_MODE\020\r\"\207\001\n\014Text" +
      "ureProto\0228\n\005image\030\001 \002(\0132).org.webswing.d" +
      "irectdraw.proto.ImageProto\022=\n\006anchor\030\002 \002" +
      "(\0132-.org.webswing.directdraw.proto.Recta" +
      "ngleProto*:\n\021CyclicMethodProto\022\014\n\010NO_CYC" +
      "LE\020\000\022\013\n\007REFLECT\020\001\022\n\n\006REPEAT\020\002"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_org_webswing_directdraw_proto_WebImageProto_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_org_webswing_directdraw_proto_WebImageProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_org_webswing_directdraw_proto_WebImageProto_descriptor,
              new java.lang.String[] { "Width", "Height", "Instructions", "Constants", "FontFaces", });
          internal_static_org_webswing_directdraw_proto_DrawInstructionProto_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_org_webswing_directdraw_proto_DrawInstructionProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_org_webswing_directdraw_proto_DrawInstructionProto_descriptor,
              new java.lang.String[] { "Inst", "Args", "WebImage", });
          internal_static_org_webswing_directdraw_proto_DrawConstantProto_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_org_webswing_directdraw_proto_DrawConstantProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_org_webswing_directdraw_proto_DrawConstantProto_descriptor,
              new java.lang.String[] { "Id", "Color", "Image", "Transform", "String", "Path", "Font", "LinearGrad", "RadialGrad", "Points", "Rectangle", "Ellipse", "RoundRectangle", "Arc", "Stroke", "Composite", "Texture", "Glyph", "Combined", });
          internal_static_org_webswing_directdraw_proto_FontFaceProto_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_org_webswing_directdraw_proto_FontFaceProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_org_webswing_directdraw_proto_FontFaceProto_descriptor,
              new java.lang.String[] { "Name", "Font", "Style", });
          internal_static_org_webswing_directdraw_proto_ColorProto_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_org_webswing_directdraw_proto_ColorProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_org_webswing_directdraw_proto_ColorProto_descriptor,
              new java.lang.String[] { "Rgba", });
          internal_static_org_webswing_directdraw_proto_ImageProto_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_org_webswing_directdraw_proto_ImageProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_org_webswing_directdraw_proto_ImageProto_descriptor,
              new java.lang.String[] { "Data", });
          internal_static_org_webswing_directdraw_proto_TransformProto_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_org_webswing_directdraw_proto_TransformProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_org_webswing_directdraw_proto_TransformProto_descriptor,
              new java.lang.String[] { "M00", "M10", "M01", "M11", "M02", "M12", });
          internal_static_org_webswing_directdraw_proto_CombinedProto_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_org_webswing_directdraw_proto_CombinedProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_org_webswing_directdraw_proto_CombinedProto_descriptor,
              new java.lang.String[] { "Ids", });
          internal_static_org_webswing_directdraw_proto_GlyphProto_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_org_webswing_directdraw_proto_GlyphProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_org_webswing_directdraw_proto_GlyphProto_descriptor,
              new java.lang.String[] { "Data", });
          internal_static_org_webswing_directdraw_proto_RectangleProto_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_org_webswing_directdraw_proto_RectangleProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_org_webswing_directdraw_proto_RectangleProto_descriptor,
              new java.lang.String[] { "X", "Y", "W", "H", });
          internal_static_org_webswing_directdraw_proto_EllipseProto_descriptor =
            getDescriptor().getMessageTypes().get(10);
          internal_static_org_webswing_directdraw_proto_EllipseProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_org_webswing_directdraw_proto_EllipseProto_descriptor,
              new java.lang.String[] { "X", "Y", "W", "H", });
          internal_static_org_webswing_directdraw_proto_RoundRectangleProto_descriptor =
            getDescriptor().getMessageTypes().get(11);
          internal_static_org_webswing_directdraw_proto_RoundRectangleProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_org_webswing_directdraw_proto_RoundRectangleProto_descriptor,
              new java.lang.String[] { "X", "Y", "W", "H", "ArcW", "ArcH", });
          internal_static_org_webswing_directdraw_proto_ArcProto_descriptor =
            getDescriptor().getMessageTypes().get(12);
          internal_static_org_webswing_directdraw_proto_ArcProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_org_webswing_directdraw_proto_ArcProto_descriptor,
              new java.lang.String[] { "X", "Y", "W", "H", "Start", "Extent", "Type", });
          internal_static_org_webswing_directdraw_proto_PathProto_descriptor =
            getDescriptor().getMessageTypes().get(13);
          internal_static_org_webswing_directdraw_proto_PathProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_org_webswing_directdraw_proto_PathProto_descriptor,
              new java.lang.String[] { "WindingOdd", "Type", "Points", });
          internal_static_org_webswing_directdraw_proto_FontProto_descriptor =
            getDescriptor().getMessageTypes().get(14);
          internal_static_org_webswing_directdraw_proto_FontProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_org_webswing_directdraw_proto_FontProto_descriptor,
              new java.lang.String[] { "Family", "Style", "Size", "Transform", });
          internal_static_org_webswing_directdraw_proto_StrokeProto_descriptor =
            getDescriptor().getMessageTypes().get(15);
          internal_static_org_webswing_directdraw_proto_StrokeProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_org_webswing_directdraw_proto_StrokeProto_descriptor,
              new java.lang.String[] { "Width", "MiterLimit", "Join", "Cap", "Dash", "DashOffset", });
          internal_static_org_webswing_directdraw_proto_LinearGradientProto_descriptor =
            getDescriptor().getMessageTypes().get(16);
          internal_static_org_webswing_directdraw_proto_LinearGradientProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_org_webswing_directdraw_proto_LinearGradientProto_descriptor,
              new java.lang.String[] { "XStart", "YStart", "XEnd", "YEnd", "Colors", "Fractions", "Repeat", });
          internal_static_org_webswing_directdraw_proto_RadialGradientProto_descriptor =
            getDescriptor().getMessageTypes().get(17);
          internal_static_org_webswing_directdraw_proto_RadialGradientProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_org_webswing_directdraw_proto_RadialGradientProto_descriptor,
              new java.lang.String[] { "XCenter", "YCenter", "XFocus", "YFocus", "Radius", "Colors", "Fractions", "Repeat", });
          internal_static_org_webswing_directdraw_proto_PointsProto_descriptor =
            getDescriptor().getMessageTypes().get(18);
          internal_static_org_webswing_directdraw_proto_PointsProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_org_webswing_directdraw_proto_PointsProto_descriptor,
              new java.lang.String[] { "Points", });
          internal_static_org_webswing_directdraw_proto_CompositeProto_descriptor =
            getDescriptor().getMessageTypes().get(19);
          internal_static_org_webswing_directdraw_proto_CompositeProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_org_webswing_directdraw_proto_CompositeProto_descriptor,
              new java.lang.String[] { "Type", "Alpha", "Color", });
          internal_static_org_webswing_directdraw_proto_TextureProto_descriptor =
            getDescriptor().getMessageTypes().get(20);
          internal_static_org_webswing_directdraw_proto_TextureProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_org_webswing_directdraw_proto_TextureProto_descriptor,
              new java.lang.String[] { "Image", "Anchor", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
